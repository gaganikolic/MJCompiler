INFO  18:33:51,594 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:33:51,650 - #2 program
INFO  18:33:51,650 - #49 test301
INFO  18:33:51,651 - #6 const
INFO  18:33:51,652 - #49 int
INFO  18:33:51,652 - #49 a
INFO  18:33:51,652 - #7 =
INFO  18:33:51,652 - #48 5
INFO  18:33:51,652 - #8 ;
INFO  18:33:51,653 - #49 int
INFO  18:33:51,653 - #49 b
INFO  18:33:51,653 - #9 ,
INFO  18:33:51,654 - #49 c
INFO  18:33:51,654 - #8 ;
INFO  18:33:51,654 - #6 const
INFO  18:33:51,655 - #49 bool
INFO  18:33:51,655 - #49 t
INFO  18:33:51,655 - #7 =
INFO  18:33:51,655 - #51 true
INFO  18:33:51,655 - #9 ,
INFO  18:33:51,655 - #49 f
INFO  18:33:51,656 - #7 =
INFO  18:33:51,656 - #51 false
INFO  18:33:51,656 - #8 ;
INFO  18:33:51,656 - #49 int
INFO  18:33:51,656 - #49 niz1
INFO  18:33:51,656 - #10 [
INFO  18:33:51,656 - #11 ]
INFO  18:33:51,657 - #8 ;
INFO  18:33:51,658 - #49 int
INFO  18:33:51,658 - #49 d
INFO  18:33:51,658 - #9 ,
INFO  18:33:51,658 - #49 e
INFO  18:33:51,658 - #8 ;
INFO  18:33:51,658 - #4 {
INFO  18:33:51,658 - #49 char
INFO  18:33:51,659 - #49 dohvatPrviKarakter
INFO  18:33:51,659 - #20 (
INFO  18:33:51,659 - #49 char
INFO  18:33:51,659 - #49 niz
INFO  18:33:51,659 - #10 [
INFO  18:33:51,659 - #11 ]
INFO  18:33:51,660 - #21 )
INFO  18:33:51,660 - #4 {
INFO  18:33:51,660 - #49 s
INFO  18:33:51,660 - #7 =
INFO  18:33:51,660 - #49 null
INFO  18:33:51,661 - #8 ;
INFO  18:33:51,663 - #23 for
INFO  18:33:51,663 - #20 (
INFO  18:33:51,663 - #49 i
INFO  18:33:51,664 - #7 =
INFO  18:33:51,664 - #49 len
INFO  18:33:51,664 - #20 (
INFO  18:33:51,664 - #49 niz
INFO  18:33:51,664 - #21 )
INFO  18:33:51,664 - #9 ,
INFO  18:33:51,664 - #49 j
INFO  18:33:51,664 - #7 =
INFO  18:33:51,665 - #48 0
INFO  18:33:51,665 - #8 ;
INFO  18:33:51,665 - #49 i
INFO  18:33:51,666 - #33 >
INFO  18:33:51,666 - #48 0
INFO  18:33:51,667 - #8 ;
INFO  18:33:51,669 - #49 i
INFO  18:33:51,669 - #25 --
INFO  18:33:51,669 - #9 ,
INFO  18:33:51,670 - #49 j
INFO  18:33:51,670 - #24 ++
INFO  18:33:51,670 - #21 )
INFO  18:33:51,670 - #4 {
INFO  18:33:51,671 - #14 if
INFO  18:33:51,671 - #20 (
INFO  18:33:51,671 - #49 i
INFO  18:33:51,672 - #31 ==
INFO  18:33:51,672 - #48 1
INFO  18:33:51,672 - #26 &&
INFO  18:33:51,673 - #49 j
INFO  18:33:51,673 - #34 >=
INFO  18:33:51,673 - #48 0
INFO  18:33:51,673 - #27 ||
INFO  18:33:51,674 - #49 j
INFO  18:33:51,674 - #31 ==
INFO  18:33:51,674 - #48 0
INFO  18:33:51,675 - #21 )
INFO  18:33:51,675 - #4 {
INFO  18:33:51,675 - #49 s
INFO  18:33:51,675 - #7 =
INFO  18:33:51,675 - #49 niz
INFO  18:33:51,675 - #10 [
INFO  18:33:51,676 - #49 i
INFO  18:33:51,676 - #11 ]
INFO  18:33:51,676 - #8 ;
INFO  18:33:51,677 - #16 break
INFO  18:33:51,677 - #8 ;
INFO  18:33:51,677 - #5 }
INFO  18:33:51,678 - #5 }
INFO  18:33:51,679 - #18 return
INFO  18:33:51,679 - #49 s
INFO  18:33:51,679 - #8 ;
INFO  18:33:51,679 - #5 }
INFO  18:33:51,679 - #49 bool
INFO  18:33:51,680 - #49 provera
INFO  18:33:51,680 - #20 (
INFO  18:33:51,680 - #21 )
INFO  18:33:51,681 - #49 int
INFO  18:33:51,681 - #49 pom1
INFO  18:33:51,681 - #8 ;
INFO  18:33:51,681 - #4 {
INFO  18:33:51,681 - #49 pom1
INFO  18:33:51,681 - #7 =
INFO  18:33:51,681 - #28 -
INFO  18:33:51,681 - #20 (
INFO  18:33:51,681 - #48 5
INFO  18:33:51,681 - #38 *
INFO  18:33:51,681 - #48 2
INFO  18:33:51,682 - #21 )
INFO  18:33:51,683 - #37 +
INFO  18:33:51,683 - #48 11
INFO  18:33:51,684 - #8 ;
INFO  18:33:51,684 - #14 if
INFO  18:33:51,684 - #20 (
INFO  18:33:51,684 - #49 pom1
INFO  18:33:51,685 - #33 >
INFO  18:33:51,685 - #48 0
INFO  18:33:51,685 - #21 )
INFO  18:33:51,685 - #18 return
INFO  18:33:51,685 - #51 true
INFO  18:33:51,685 - #8 ;
INFO  18:33:51,685 - #15 else
INFO  18:33:51,685 - #18 return
INFO  18:33:51,686 - #51 false
INFO  18:33:51,686 - #8 ;
INFO  18:33:51,686 - #5 }
INFO  18:33:51,686 - #41 void
INFO  18:33:51,686 - #49 main
INFO  18:33:51,686 - #20 (
INFO  18:33:51,686 - #21 )
INFO  18:33:51,686 - #49 int
INFO  18:33:51,687 - #49 p1
INFO  18:33:51,687 - #9 ,
INFO  18:33:51,687 - #49 i
INFO  18:33:51,687 - #8 ;
INFO  18:33:51,687 - #6 const
INFO  18:33:51,687 - #49 int
INFO  18:33:51,687 - #49 p2
INFO  18:33:51,687 - #7 =
INFO  18:33:51,687 - #48 5
INFO  18:33:51,687 - #8 ;
INFO  18:33:51,687 - #49 char
INFO  18:33:51,687 - #49 p
INFO  18:33:51,687 - #8 ;
INFO  18:33:51,687 - #4 {
INFO  18:33:51,687 - #49 i
INFO  18:33:51,687 - #7 =
INFO  18:33:51,687 - #48 0
INFO  18:33:51,687 - #8 ;
INFO  18:33:51,687 - #14 if
INFO  18:33:51,688 - #20 (
INFO  18:33:51,688 - #49 i
INFO  18:33:51,688 - #31 ==
INFO  18:33:51,688 - #48 3
INFO  18:33:51,688 - #21 )
INFO  18:33:51,688 - #22 print
INFO  18:33:51,688 - #20 (
INFO  18:33:51,688 - #49 i
INFO  18:33:51,688 - #21 )
INFO  18:33:51,688 - #8 ;
INFO  18:33:51,688 - #15 else
INFO  18:33:51,688 - #14 if
INFO  18:33:51,688 - #20 (
INFO  18:33:51,688 - #49 i
INFO  18:33:51,688 - #31 ==
INFO  18:33:51,688 - #48 2
INFO  18:33:51,688 - #21 )
INFO  18:33:51,689 - #49 i
INFO  18:33:51,689 - #24 ++
INFO  18:33:51,689 - #8 ;
INFO  18:33:51,689 - #15 else
INFO  18:33:51,689 - #49 i
INFO  18:33:51,689 - #7 =
INFO  18:33:51,689 - #49 i
INFO  18:33:51,689 - #37 +
INFO  18:33:51,689 - #48 1
INFO  18:33:51,689 - #8 ;
INFO  18:33:51,689 - #22 print
INFO  18:33:51,689 - #20 (
INFO  18:33:51,689 - #49 i
INFO  18:33:51,689 - #21 )
INFO  18:33:51,689 - #8 ;
INFO  18:33:51,689 - #14 if
INFO  18:33:51,689 - #20 (
INFO  18:33:51,689 - #49 provera
INFO  18:33:51,690 - #20 (
INFO  18:33:51,690 - #21 )
INFO  18:33:51,690 - #21 )
INFO  18:33:51,690 - #22 print
INFO  18:33:51,690 - #20 (
INFO  18:33:51,691 - #50 t
INFO  18:33:51,691 - #21 )
INFO  18:33:51,691 - #8 ;
INFO  18:33:51,691 - #49 niz1
INFO  18:33:51,691 - #7 =
INFO  18:33:51,691 - #29 new
INFO  18:33:51,691 - #49 char
INFO  18:33:51,691 - #10 [
INFO  18:33:51,691 - #48 3
INFO  18:33:51,691 - #11 ]
INFO  18:33:51,691 - #8 ;
INFO  18:33:51,691 - #49 niz1
INFO  18:33:51,691 - #10 [
INFO  18:33:51,691 - #48 0
INFO  18:33:51,691 - #11 ]
INFO  18:33:51,691 - #7 =
INFO  18:33:51,692 - #50 a
INFO  18:33:51,692 - #8 ;
INFO  18:33:51,692 - #49 niz1
INFO  18:33:51,692 - #10 [
INFO  18:33:51,692 - #48 1
INFO  18:33:51,692 - #11 ]
INFO  18:33:51,692 - #7 =
INFO  18:33:51,692 - #50 b
INFO  18:33:51,692 - #8 ;
INFO  18:33:51,692 - #49 niz1
INFO  18:33:51,692 - #10 [
INFO  18:33:51,692 - #48 2
INFO  18:33:51,692 - #11 ]
INFO  18:33:51,692 - #7 =
INFO  18:33:51,692 - #50 c
INFO  18:33:51,692 - #8 ;
INFO  18:33:51,692 - #49 p
INFO  18:33:51,692 - #7 =
INFO  18:33:51,692 - #49 dohvatPrviKarakter
INFO  18:33:51,692 - #20 (
INFO  18:33:51,692 - #49 niz1
INFO  18:33:51,692 - #21 )
INFO  18:33:51,693 - #8 ;
INFO  18:33:51,693 - #22 print
INFO  18:33:51,693 - #20 (
INFO  18:33:51,693 - #49 p
INFO  18:33:51,693 - #21 )
INFO  18:33:51,693 - #8 ;
INFO  18:33:51,693 - #5 }
INFO  18:33:51,693 - #5 }
INFO  18:33:51,704 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          NoDeclarations(
          ) [NoDeclarations]
          Statements(
            StatementDesignator(
              DesignatorStatementMatched(
                DesignatorStatementAssignop(
                  DesignatorIdent(
                   s
                  ) [DesignatorIdent]
                  Assignop(
                  ) [Assignop]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             null
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementMatched]
            ) [StatementDesignator]
            Statements(
              StatementForCondFact(
                ForSt(
                ) [ForSt]
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 len
                                ) [DesignatorIdent]
                                ActualParsList(
                                  ActParsEnd(
                                    ExprPositive(
                                      AddopEnd(
                                        Term(
                                          MulopEnd(
                                            FactorDesignator(
                                              DesignatorIdent(
                                               niz
                                              ) [DesignatorIdent]
                                            ) [FactorDesignator]
                                          ) [MulopEnd]
                                        ) [Term]
                                      ) [AddopEnd]
                                    ) [ExprPositive]
                                  ) [ActParsEnd]
                                ) [ActualParsList]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorNum(
                                 0
                                ) [FactorNum]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
                LSemiFor(
                ) [LSemiFor]
                CondFactFor(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [CondFactFor]
                RSemiFor(
                ) [RSemiFor]
                DesignatorStatementListSecond(
                  DesignatorStatements(
                    DesignatorStatementMatched(
                      DesignatorStatementDecrement(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [DesignatorStatementDecrement]
                    ) [DesignatorStatementMatched]
                    DesignatorStatementOne(
                      DesignatorStatementMatched(
                        DesignatorStatementIncrement(
                          DesignatorIdent(
                           j
                          ) [DesignatorIdent]
                        ) [DesignatorStatementIncrement]
                      ) [DesignatorStatementMatched]
                    ) [DesignatorStatementOne]
                  ) [DesignatorStatements]
                ) [DesignatorStatementListSecond]
                RParenFor(
                ) [RParenFor]
                StatementStatementList(
                  Statements(
                    StatementIf(
                      LParenIf(
                      ) [LParenIf]
                      Conditions(
                        OneCondTerm(
                          CondTerms(
                            OneCondFact(
                              CondFactRelop(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorDesignator(
                                          DesignatorIdent(
                                           i
                                          ) [DesignatorIdent]
                                        ) [FactorDesignator]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                                EqualTo(
                                ) [EqualTo]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         1
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [CondFactRelop]
                            ) [OneCondFact]
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         j
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              GreaterEqual(
                              ) [GreaterEqual]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       0
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [CondTerms]
                        ) [OneCondTerm]
                        OrCond(
                        ) [OrCond]
                        OneCondFact(
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            EqualTo(
                            ) [EqualTo]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [OneCondFact]
                      ) [Conditions]
                      RParenIf(
                      ) [RParenIf]
                      StatementStatementList(
                        Statements(
                          StatementDesignator(
                            DesignatorStatementMatched(
                              DesignatorStatementAssignop(
                                DesignatorIdent(
                                 s
                                ) [DesignatorIdent]
                                Assignop(
                                ) [Assignop]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorDesignator(
                                          DesignatorExpr(
                                            DesignatorName(
                                             niz
                                            ) [DesignatorName]
                                            ArrayDecl(
                                              ExprPositive(
                                                AddopEnd(
                                                  Term(
                                                    MulopEnd(
                                                      FactorDesignator(
                                                        DesignatorIdent(
                                                         i
                                                        ) [DesignatorIdent]
                                                      ) [FactorDesignator]
                                                    ) [MulopEnd]
                                                  ) [Term]
                                                ) [AddopEnd]
                                              ) [ExprPositive]
                                            ) [ArrayDecl]
                                          ) [DesignatorExpr]
                                        ) [FactorDesignator]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [DesignatorStatementAssignop]
                            ) [DesignatorStatementMatched]
                          ) [StatementDesignator]
                          Statements(
                            StatementBreak(
                            ) [StatementBreak]
                            NoStatement(
                            ) [NoStatement]
                          ) [Statements]
                        ) [Statements]
                      ) [StatementStatementList]
                    ) [StatementIf]
                    NoStatement(
                    ) [NoStatement]
                  ) [Statements]
                ) [StatementStatementList]
              ) [StatementForCondFact]
              Statements(
                StatementReturnExpr(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             s
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementReturnExpr]
                NoStatement(
                ) [NoStatement]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:33:51,706 - ===================================
INFO  18:33:51,706 - Pocetak programa test301.
INFO  18:33:51,706 - Deklarisana je konstanta a na liniji 3
INFO  18:33:51,707 - Deklarisana je promenljiva b na liniji 4
INFO  18:33:51,707 - Deklarisana je promenljiva c na liniji 4
INFO  18:33:51,710 - Deklarisana je konstanta t na liniji 5
INFO  18:33:51,710 - Deklarisana je konstanta f na liniji 5
INFO  18:33:51,710 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:33:51,710 - Deklarisana je promenljiva d na liniji 7
INFO  18:33:51,710 - Deklarisana je promenljiva e na liniji 7
INFO  18:33:51,710 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:33:51,711 - Deklarisan je parametar funkcije (niz) niz na liniji 11
ERROR 18:33:51,711 - Greska na liniji 12 : ime s nije deklarisano! 
ERROR 18:33:51,711 - Greska na liniji 12 designator i expr nisu istog tipa
ERROR 18:33:51,711 - Greska na liniji 13 : ime i nije deklarisano! 
ERROR 18:33:51,711 - Greska, neodgovarajuci broj parametara pozvane funkcije na liniji 13
