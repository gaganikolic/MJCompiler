INFO  13:25:36,317 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:25:36,397 - #2 program
INFO  13:25:36,398 - #49 test301
INFO  13:25:36,398 - #6 const
INFO  13:25:36,399 - #49 int
INFO  13:25:36,399 - #49 nula
INFO  13:25:36,400 - #7 =
INFO  13:25:36,400 - #48 0
INFO  13:25:36,401 - #8 ;
INFO  13:25:36,402 - #6 const
INFO  13:25:36,402 - #49 int
INFO  13:25:36,402 - #49 jedan
INFO  13:25:36,403 - #7 =
INFO  13:25:36,403 - #48 1
INFO  13:25:36,403 - #8 ;
INFO  13:25:36,403 - #6 const
INFO  13:25:36,403 - #49 int
INFO  13:25:36,403 - #49 pet
INFO  13:25:36,403 - #7 =
INFO  13:25:36,403 - #48 5
INFO  13:25:36,403 - #8 ;
INFO  13:25:36,404 - #49 int
INFO  13:25:36,404 - #49 niz
INFO  13:25:36,404 - #10 [
INFO  13:25:36,404 - #11 ]
INFO  13:25:36,404 - #9 ,
INFO  13:25:36,405 - #49 niz2
INFO  13:25:36,405 - #10 [
INFO  13:25:36,405 - #11 ]
INFO  13:25:36,405 - #8 ;
INFO  13:25:36,405 - #49 char
INFO  13:25:36,406 - #49 nizch
INFO  13:25:36,406 - #10 [
INFO  13:25:36,406 - #11 ]
INFO  13:25:36,406 - #8 ;
INFO  13:25:36,406 - #49 char
INFO  13:25:36,406 - #49 c
INFO  13:25:36,406 - #10 [
INFO  13:25:36,406 - #11 ]
INFO  13:25:36,406 - #8 ;
INFO  13:25:36,406 - #4 {
INFO  13:25:36,406 - #41 void
INFO  13:25:36,407 - #49 main
INFO  13:25:36,407 - #20 (
INFO  13:25:36,408 - #21 )
INFO  13:25:36,409 - #49 int
INFO  13:25:36,409 - #49 bodovi
INFO  13:25:36,409 - #8 ;
INFO  13:25:36,409 - #49 bool
INFO  13:25:36,409 - #49 bt
INFO  13:25:36,409 - #8 ;
INFO  13:25:36,409 - #4 {
INFO  13:25:36,410 - #49 bodovi
INFO  13:25:36,410 - #7 =
INFO  13:25:36,410 - #48 0
INFO  13:25:36,411 - #8 ;
INFO  13:25:36,412 - #49 nizch
INFO  13:25:36,413 - #7 =
INFO  13:25:36,413 - #29 new
INFO  13:25:36,413 - #49 char
INFO  13:25:36,413 - #10 [
INFO  13:25:36,413 - #48 3
INFO  13:25:36,413 - #11 ]
INFO  13:25:36,413 - #8 ;
INFO  13:25:36,413 - #22 print
INFO  13:25:36,414 - #20 (
INFO  13:25:36,414 - #49 nizch
INFO  13:25:36,414 - #10 [
INFO  13:25:36,415 - #49 jedan
INFO  13:25:36,415 - #38 *
INFO  13:25:36,415 - #48 2
INFO  13:25:36,416 - #11 ]
INFO  13:25:36,416 - #21 )
INFO  13:25:36,417 - #8 ;
INFO  13:25:36,417 - #5 }
INFO  13:25:36,418 - #5 }
INFO  13:25:36,456 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       jedan
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorNum(
                                   2
                                  ) [FactorNum]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:25:36,459 - ===================================
INFO  13:25:36,459 - Pocetak programa test301.
INFO  13:25:36,459 - Deklarisana je konstanta nula na liniji 5
INFO  13:25:36,459 - Deklarisana je konstanta jedan na liniji 6
INFO  13:25:36,461 - Deklarisana je konstanta pet na liniji 7
INFO  13:25:36,461 - Deklarisan je niz niz na liniji 9
INFO  13:25:36,461 - Deklarisan je niz niz2 na liniji 9
INFO  13:25:36,462 - Deklarisan je niz nizch na liniji 10
INFO  13:25:36,462 - Deklarisan je niz c na liniji 11
INFO  13:25:36,462 - Obradjuje se funkcija main na liniji 14
INFO  13:25:36,463 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:25:36,463 - Deklarisana je promenljiva bt na liniji 16
INFO  13:26:07,282 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:26:07,373 - #2 program
INFO  13:26:07,374 - #49 test301
INFO  13:26:07,374 - #6 const
INFO  13:26:07,376 - #49 int
INFO  13:26:07,376 - #49 nula
INFO  13:26:07,377 - #7 =
INFO  13:26:07,377 - #48 0
INFO  13:26:07,377 - #8 ;
INFO  13:26:07,379 - #6 const
INFO  13:26:07,379 - #49 int
INFO  13:26:07,379 - #49 jedan
INFO  13:26:07,379 - #7 =
INFO  13:26:07,379 - #48 1
INFO  13:26:07,379 - #8 ;
INFO  13:26:07,379 - #6 const
INFO  13:26:07,381 - #49 int
INFO  13:26:07,381 - #49 pet
INFO  13:26:07,381 - #7 =
INFO  13:26:07,381 - #48 5
INFO  13:26:07,382 - #8 ;
INFO  13:26:07,382 - #49 int
INFO  13:26:07,382 - #49 niz
INFO  13:26:07,382 - #10 [
INFO  13:26:07,382 - #11 ]
INFO  13:26:07,383 - #9 ,
INFO  13:26:07,383 - #49 niz2
INFO  13:26:07,383 - #10 [
INFO  13:26:07,383 - #11 ]
INFO  13:26:07,383 - #8 ;
INFO  13:26:07,384 - #49 char
INFO  13:26:07,384 - #49 nizch
INFO  13:26:07,384 - #10 [
INFO  13:26:07,384 - #11 ]
INFO  13:26:07,384 - #8 ;
INFO  13:26:07,384 - #49 char
INFO  13:26:07,384 - #49 c
INFO  13:26:07,384 - #10 [
INFO  13:26:07,385 - #11 ]
INFO  13:26:07,385 - #8 ;
INFO  13:26:07,385 - #4 {
INFO  13:26:07,385 - #41 void
INFO  13:26:07,386 - #49 main
INFO  13:26:07,387 - #20 (
INFO  13:26:07,387 - #21 )
INFO  13:26:07,388 - #49 int
INFO  13:26:07,388 - #49 bodovi
INFO  13:26:07,388 - #8 ;
INFO  13:26:07,389 - #49 bool
INFO  13:26:07,389 - #49 bt
INFO  13:26:07,389 - #8 ;
INFO  13:26:07,389 - #4 {
INFO  13:26:07,389 - #49 bodovi
INFO  13:26:07,389 - #7 =
INFO  13:26:07,390 - #48 0
INFO  13:26:07,391 - #8 ;
INFO  13:26:07,392 - #49 nizch
INFO  13:26:07,393 - #7 =
INFO  13:26:07,393 - #29 new
INFO  13:26:07,393 - #49 char
INFO  13:26:07,393 - #10 [
INFO  13:26:07,393 - #48 3
INFO  13:26:07,393 - #11 ]
INFO  13:26:07,393 - #8 ;
INFO  13:26:07,394 - #22 print
INFO  13:26:07,394 - #20 (
INFO  13:26:07,394 - #49 nizch
INFO  13:26:07,394 - #10 [
INFO  13:26:07,395 - #49 jedan
INFO  13:26:07,395 - #38 *
INFO  13:26:07,395 - #48 2
INFO  13:26:07,397 - #11 ]
INFO  13:26:07,398 - #21 )
INFO  13:26:07,398 - #8 ;
INFO  13:26:07,398 - #5 }
INFO  13:26:07,399 - #5 }
INFO  13:26:07,433 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       jedan
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorNum(
                                   2
                                  ) [FactorNum]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:26:07,434 - ===================================
INFO  13:26:07,434 - Pocetak programa test301.
INFO  13:26:07,434 - Deklarisana je konstanta nula na liniji 5
INFO  13:26:07,435 - Deklarisana je konstanta jedan na liniji 6
INFO  13:26:07,442 - Deklarisana je konstanta pet na liniji 7
INFO  13:26:07,443 - Deklarisan je niz niz na liniji 9
INFO  13:26:07,443 - Deklarisan je niz niz2 na liniji 9
INFO  13:26:07,443 - Deklarisan je niz nizch na liniji 10
INFO  13:26:07,443 - Deklarisan je niz c na liniji 11
INFO  13:26:07,444 - Obradjuje se funkcija main na liniji 14
INFO  13:26:07,444 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:26:07,444 - Deklarisana je promenljiva bt na liniji 16
INFO  13:26:13,983 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:26:14,066 - #2 program
INFO  13:26:14,066 - #49 test301
INFO  13:26:14,067 - #6 const
INFO  13:26:14,069 - #49 int
INFO  13:26:14,069 - #49 nula
INFO  13:26:14,070 - #7 =
INFO  13:26:14,070 - #48 0
INFO  13:26:14,070 - #8 ;
INFO  13:26:14,072 - #6 const
INFO  13:26:14,072 - #49 int
INFO  13:26:14,072 - #49 jedan
INFO  13:26:14,072 - #7 =
INFO  13:26:14,073 - #48 1
INFO  13:26:14,073 - #8 ;
INFO  13:26:14,073 - #6 const
INFO  13:26:14,073 - #49 int
INFO  13:26:14,073 - #49 pet
INFO  13:26:14,073 - #7 =
INFO  13:26:14,073 - #48 5
INFO  13:26:14,073 - #8 ;
INFO  13:26:14,074 - #49 int
INFO  13:26:14,074 - #49 niz
INFO  13:26:14,074 - #10 [
INFO  13:26:14,074 - #11 ]
INFO  13:26:14,074 - #9 ,
INFO  13:26:14,074 - #49 niz2
INFO  13:26:14,074 - #10 [
INFO  13:26:14,075 - #11 ]
INFO  13:26:14,075 - #8 ;
INFO  13:26:14,075 - #49 char
INFO  13:26:14,075 - #49 nizch
INFO  13:26:14,076 - #10 [
INFO  13:26:14,076 - #11 ]
INFO  13:26:14,076 - #8 ;
INFO  13:26:14,076 - #49 char
INFO  13:26:14,076 - #49 c
INFO  13:26:14,076 - #10 [
INFO  13:26:14,076 - #11 ]
INFO  13:26:14,076 - #8 ;
INFO  13:26:14,076 - #4 {
INFO  13:26:14,076 - #41 void
INFO  13:26:14,077 - #49 main
INFO  13:26:14,078 - #20 (
INFO  13:26:14,078 - #21 )
INFO  13:26:14,080 - #49 int
INFO  13:26:14,080 - #49 bodovi
INFO  13:26:14,080 - #8 ;
INFO  13:26:14,081 - #49 bool
INFO  13:26:14,081 - #49 bt
INFO  13:26:14,081 - #8 ;
INFO  13:26:14,081 - #4 {
INFO  13:26:14,081 - #49 bodovi
INFO  13:26:14,081 - #7 =
INFO  13:26:14,082 - #48 0
INFO  13:26:14,084 - #8 ;
INFO  13:26:14,085 - #49 nizch
INFO  13:26:14,085 - #7 =
INFO  13:26:14,085 - #29 new
INFO  13:26:14,085 - #49 char
INFO  13:26:14,085 - #10 [
INFO  13:26:14,086 - #48 3
INFO  13:26:14,086 - #11 ]
INFO  13:26:14,086 - #8 ;
INFO  13:26:14,086 - #22 print
INFO  13:26:14,086 - #20 (
INFO  13:26:14,086 - #49 nizch
INFO  13:26:14,086 - #10 [
INFO  13:26:14,087 - #49 jedan
INFO  13:26:14,087 - #38 *
INFO  13:26:14,088 - #48 2
INFO  13:26:14,089 - #11 ]
INFO  13:26:14,089 - #21 )
INFO  13:26:14,090 - #8 ;
INFO  13:26:14,090 - #5 }
INFO  13:26:14,091 - #5 }
INFO  13:26:14,123 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       jedan
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorNum(
                                   2
                                  ) [FactorNum]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:26:14,123 - ===================================
INFO  13:26:14,124 - Pocetak programa test301.
INFO  13:26:14,124 - Deklarisana je konstanta nula na liniji 5
INFO  13:26:14,124 - Deklarisana je konstanta jedan na liniji 6
INFO  13:26:14,124 - Deklarisana je konstanta pet na liniji 7
INFO  13:26:14,124 - Deklarisan je niz niz na liniji 9
INFO  13:26:14,124 - Deklarisan je niz niz2 na liniji 9
INFO  13:26:14,124 - Deklarisan je niz nizch na liniji 10
INFO  13:26:14,125 - Deklarisan je niz c na liniji 11
INFO  13:26:14,125 - Obradjuje se funkcija main na liniji 14
INFO  13:26:14,125 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:26:14,125 - Deklarisana je promenljiva bt na liniji 16
INFO  13:26:42,489 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  13:26:59,182 - Designator i expr su odgovarajuceg tipa na liniji 19
INFO  13:28:41,978 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:28:42,057 - #2 program
INFO  13:28:42,057 - #49 test301
INFO  13:28:42,057 - #6 const
INFO  13:28:42,059 - #49 int
INFO  13:28:42,059 - #49 nula
INFO  13:28:42,060 - #7 =
INFO  13:28:42,060 - #48 0
INFO  13:28:42,060 - #8 ;
INFO  13:28:42,061 - #6 const
INFO  13:28:42,062 - #49 int
INFO  13:28:42,062 - #49 jedan
INFO  13:28:42,062 - #7 =
INFO  13:28:42,062 - #48 1
INFO  13:28:42,062 - #8 ;
INFO  13:28:42,062 - #6 const
INFO  13:28:42,062 - #49 int
INFO  13:28:42,062 - #49 pet
INFO  13:28:42,062 - #7 =
INFO  13:28:42,062 - #48 5
INFO  13:28:42,062 - #8 ;
INFO  13:28:42,062 - #49 int
INFO  13:28:42,063 - #49 niz
INFO  13:28:42,063 - #10 [
INFO  13:28:42,063 - #11 ]
INFO  13:28:42,063 - #9 ,
INFO  13:28:42,063 - #49 niz2
INFO  13:28:42,063 - #10 [
INFO  13:28:42,063 - #11 ]
INFO  13:28:42,063 - #8 ;
INFO  13:28:42,064 - #49 char
INFO  13:28:42,064 - #49 nizch
INFO  13:28:42,064 - #10 [
INFO  13:28:42,064 - #11 ]
INFO  13:28:42,064 - #8 ;
INFO  13:28:42,064 - #49 char
INFO  13:28:42,064 - #49 c
INFO  13:28:42,064 - #10 [
INFO  13:28:42,064 - #11 ]
INFO  13:28:42,064 - #8 ;
INFO  13:28:42,065 - #4 {
INFO  13:28:42,065 - #41 void
INFO  13:28:42,066 - #49 main
INFO  13:28:42,066 - #20 (
INFO  13:28:42,066 - #21 )
INFO  13:28:42,067 - #49 int
INFO  13:28:42,067 - #49 bodovi
INFO  13:28:42,067 - #8 ;
INFO  13:28:42,067 - #49 bool
INFO  13:28:42,067 - #49 bt
INFO  13:28:42,067 - #8 ;
INFO  13:28:42,068 - #4 {
INFO  13:28:42,068 - #49 bodovi
INFO  13:28:42,068 - #7 =
INFO  13:28:42,068 - #48 0
INFO  13:28:42,069 - #8 ;
INFO  13:28:42,071 - #49 nizch
INFO  13:28:42,071 - #7 =
INFO  13:28:42,071 - #29 new
INFO  13:28:42,071 - #49 char
INFO  13:28:42,071 - #10 [
INFO  13:28:42,071 - #48 3
INFO  13:28:42,071 - #11 ]
INFO  13:28:42,071 - #8 ;
INFO  13:28:42,072 - #22 print
INFO  13:28:42,072 - #20 (
INFO  13:28:42,072 - #49 nizch
INFO  13:28:42,072 - #10 [
INFO  13:28:42,073 - #49 jedan
INFO  13:28:42,073 - #38 *
INFO  13:28:42,073 - #48 2
INFO  13:28:42,074 - #11 ]
INFO  13:28:42,075 - #21 )
INFO  13:28:42,075 - #8 ;
INFO  13:28:42,075 - #5 }
INFO  13:28:42,076 - #5 }
INFO  13:28:42,104 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       jedan
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorNum(
                                   2
                                  ) [FactorNum]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:28:42,106 - ===================================
INFO  13:28:42,106 - Pocetak programa test301.
INFO  13:28:42,106 - Deklarisana je konstanta nula na liniji 5
INFO  13:28:42,107 - Deklarisana je konstanta jedan na liniji 6
INFO  13:28:42,107 - Deklarisana je konstanta pet na liniji 7
INFO  13:28:42,107 - Deklarisan je niz niz na liniji 9
INFO  13:28:42,107 - Deklarisan je niz niz2 na liniji 9
INFO  13:28:42,107 - Deklarisan je niz nizch na liniji 10
INFO  13:28:42,107 - Deklarisan je niz c na liniji 11
INFO  13:28:42,107 - Obradjuje se funkcija main na liniji 14
INFO  13:28:42,108 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:28:42,108 - Deklarisana je promenljiva bt na liniji 16
INFO  13:28:45,440 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  13:28:49,651 - Designator i expr su odgovarajuceg tipa na liniji 19
INFO  13:29:07,562 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:29:07,644 - #2 program
INFO  13:29:07,645 - #49 test301
INFO  13:29:07,645 - #6 const
INFO  13:29:07,646 - #49 int
INFO  13:29:07,647 - #49 nula
INFO  13:29:07,648 - #7 =
INFO  13:29:07,648 - #48 0
INFO  13:29:07,648 - #8 ;
INFO  13:29:07,649 - #6 const
INFO  13:29:07,650 - #49 int
INFO  13:29:07,650 - #49 jedan
INFO  13:29:07,650 - #7 =
INFO  13:29:07,650 - #48 1
INFO  13:29:07,650 - #8 ;
INFO  13:29:07,650 - #6 const
INFO  13:29:07,650 - #49 int
INFO  13:29:07,650 - #49 pet
INFO  13:29:07,650 - #7 =
INFO  13:29:07,650 - #48 5
INFO  13:29:07,651 - #8 ;
INFO  13:29:07,651 - #49 int
INFO  13:29:07,651 - #49 niz
INFO  13:29:07,651 - #10 [
INFO  13:29:07,651 - #11 ]
INFO  13:29:07,651 - #9 ,
INFO  13:29:07,651 - #49 niz2
INFO  13:29:07,651 - #10 [
INFO  13:29:07,651 - #11 ]
INFO  13:29:07,652 - #8 ;
INFO  13:29:07,652 - #49 char
INFO  13:29:07,652 - #49 nizch
INFO  13:29:07,652 - #10 [
INFO  13:29:07,652 - #11 ]
INFO  13:29:07,652 - #8 ;
INFO  13:29:07,652 - #49 char
INFO  13:29:07,653 - #49 c
INFO  13:29:07,653 - #10 [
INFO  13:29:07,653 - #11 ]
INFO  13:29:07,653 - #8 ;
INFO  13:29:07,653 - #4 {
INFO  13:29:07,653 - #41 void
INFO  13:29:07,654 - #49 main
INFO  13:29:07,654 - #20 (
INFO  13:29:07,655 - #21 )
INFO  13:29:07,656 - #49 int
INFO  13:29:07,656 - #49 bodovi
INFO  13:29:07,656 - #8 ;
INFO  13:29:07,657 - #49 bool
INFO  13:29:07,657 - #49 bt
INFO  13:29:07,657 - #8 ;
INFO  13:29:07,657 - #4 {
INFO  13:29:07,657 - #49 bodovi
INFO  13:29:07,657 - #7 =
INFO  13:29:07,657 - #48 0
INFO  13:29:07,658 - #8 ;
INFO  13:29:07,660 - #49 nizch
INFO  13:29:07,660 - #7 =
INFO  13:29:07,660 - #29 new
INFO  13:29:07,660 - #49 char
INFO  13:29:07,660 - #10 [
INFO  13:29:07,661 - #48 3
INFO  13:29:07,661 - #11 ]
INFO  13:29:07,661 - #8 ;
INFO  13:29:07,661 - #22 print
INFO  13:29:07,661 - #20 (
INFO  13:29:07,661 - #49 nizch
INFO  13:29:07,661 - #10 [
INFO  13:29:07,662 - #49 jedan
INFO  13:29:07,662 - #38 *
INFO  13:29:07,663 - #48 2
INFO  13:29:07,664 - #11 ]
INFO  13:29:07,664 - #21 )
INFO  13:29:07,665 - #8 ;
INFO  13:29:07,665 - #5 }
INFO  13:29:07,666 - #5 }
INFO  13:29:07,689 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       jedan
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorNum(
                                   2
                                  ) [FactorNum]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:29:07,690 - ===================================
INFO  13:29:07,690 - Pocetak programa test301.
INFO  13:29:07,690 - Deklarisana je konstanta nula na liniji 5
INFO  13:29:07,690 - Deklarisana je konstanta jedan na liniji 6
INFO  13:29:07,692 - Deklarisana je konstanta pet na liniji 7
INFO  13:29:07,692 - Deklarisan je niz niz na liniji 9
INFO  13:29:07,692 - Deklarisan je niz niz2 na liniji 9
INFO  13:29:07,693 - Deklarisan je niz nizch na liniji 10
INFO  13:29:07,693 - Deklarisan je niz c na liniji 11
INFO  13:29:07,693 - Obradjuje se funkcija main na liniji 14
INFO  13:29:07,693 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:29:07,693 - Deklarisana je promenljiva bt na liniji 16
INFO  13:29:17,634 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  13:33:01,364 - Designator i expr su odgovarajuceg tipa na liniji 19
INFO  13:34:29,228 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:34:29,346 - #2 program
INFO  13:34:29,346 - #49 test301
INFO  13:34:29,346 - #6 const
INFO  13:34:29,349 - #49 int
INFO  13:34:29,349 - #49 nula
INFO  13:34:29,356 - #7 =
INFO  13:34:29,358 - #48 0
INFO  13:34:29,359 - #8 ;
INFO  13:34:29,366 - #6 const
INFO  13:34:29,367 - #49 int
INFO  13:34:29,367 - #49 jedan
INFO  13:34:29,367 - #7 =
INFO  13:34:29,367 - #48 1
INFO  13:34:29,367 - #8 ;
INFO  13:34:29,368 - #6 const
INFO  13:34:29,368 - #49 int
INFO  13:34:29,368 - #49 pet
INFO  13:34:29,368 - #7 =
INFO  13:34:29,368 - #48 5
INFO  13:34:29,369 - #8 ;
INFO  13:34:29,370 - #49 int
INFO  13:34:29,370 - #49 niz
INFO  13:34:29,370 - #10 [
INFO  13:34:29,370 - #11 ]
INFO  13:34:29,370 - #9 ,
INFO  13:34:29,370 - #49 niz2
INFO  13:34:29,371 - #10 [
INFO  13:34:29,371 - #11 ]
INFO  13:34:29,371 - #8 ;
INFO  13:34:29,373 - #49 char
INFO  13:34:29,374 - #49 nizch
INFO  13:34:29,374 - #10 [
INFO  13:34:29,374 - #11 ]
INFO  13:34:29,375 - #8 ;
INFO  13:34:29,375 - #49 char
INFO  13:34:29,375 - #49 c
INFO  13:34:29,375 - #10 [
INFO  13:34:29,375 - #11 ]
INFO  13:34:29,376 - #8 ;
INFO  13:34:29,376 - #4 {
INFO  13:34:29,376 - #41 void
INFO  13:34:29,379 - #49 main
INFO  13:34:29,379 - #20 (
INFO  13:34:29,379 - #21 )
INFO  13:34:29,380 - #49 int
INFO  13:34:29,381 - #49 bodovi
INFO  13:34:29,381 - #8 ;
INFO  13:34:29,381 - #49 bool
INFO  13:34:29,381 - #49 bt
INFO  13:34:29,382 - #8 ;
INFO  13:34:29,382 - #4 {
INFO  13:34:29,382 - #49 bodovi
INFO  13:34:29,382 - #7 =
INFO  13:34:29,382 - #48 0
INFO  13:34:29,384 - #8 ;
INFO  13:34:29,387 - #49 nizch
INFO  13:34:29,388 - #7 =
INFO  13:34:29,388 - #29 new
INFO  13:34:29,388 - #49 char
INFO  13:34:29,388 - #10 [
INFO  13:34:29,388 - #48 3
INFO  13:34:29,388 - #11 ]
INFO  13:34:29,388 - #8 ;
INFO  13:34:29,389 - #22 print
INFO  13:34:29,389 - #20 (
INFO  13:34:29,389 - #49 nizch
INFO  13:34:29,389 - #10 [
INFO  13:34:29,390 - #49 jedan
INFO  13:34:29,390 - #37 +
INFO  13:34:29,390 - #48 2
INFO  13:34:29,391 - #11 ]
INFO  13:34:29,392 - #21 )
INFO  13:34:29,392 - #8 ;
INFO  13:34:29,392 - #5 }
INFO  13:34:29,393 - #5 }
INFO  13:34:29,411 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopList(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       jedan
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                              Plus(
                              ) [Plus]
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   2
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopList]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:34:29,417 - ===================================
INFO  13:34:29,417 - Pocetak programa test301.
INFO  13:34:29,417 - Deklarisana je konstanta nula na liniji 5
INFO  13:34:29,418 - Deklarisana je konstanta jedan na liniji 6
INFO  13:34:29,418 - Deklarisana je konstanta pet na liniji 7
INFO  13:34:29,418 - Deklarisan je niz niz na liniji 9
INFO  13:34:29,419 - Deklarisan je niz niz2 na liniji 9
INFO  13:34:29,419 - Deklarisan je niz nizch na liniji 10
INFO  13:34:29,419 - Deklarisan je niz c na liniji 11
INFO  13:34:29,420 - Obradjuje se funkcija main na liniji 14
INFO  13:34:29,420 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:34:29,420 - Deklarisana je promenljiva bt na liniji 16
INFO  13:34:29,420 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  13:34:29,420 - Designator i expr su odgovarajuceg tipa na liniji 19
INFO  13:34:29,421 - Kreiran/promenjen element niza nizch
INFO  13:34:29,421 - Obradjena funkcija PRINT na liniji 20
INFO  13:34:29,421 - ===================================
INFO  13:34:29,422 - Parsiranje uspesno zavrseno!
INFO  13:34:29,531 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:34:29,592 - #2 program
INFO  13:34:29,592 - #49 test301
INFO  13:34:29,592 - #6 const
INFO  13:34:29,593 - #49 int
INFO  13:34:29,593 - #49 nula
INFO  13:34:29,593 - #7 =
INFO  13:34:29,593 - #48 0
INFO  13:34:29,593 - #8 ;
INFO  13:34:29,594 - #6 const
INFO  13:34:29,594 - #49 int
INFO  13:34:29,594 - #49 jedan
INFO  13:34:29,595 - #7 =
INFO  13:34:29,595 - #48 1
INFO  13:34:29,595 - #8 ;
INFO  13:34:29,595 - #6 const
INFO  13:34:29,595 - #49 int
INFO  13:34:29,595 - #49 pet
INFO  13:34:29,595 - #7 =
INFO  13:34:29,595 - #48 5
INFO  13:34:29,595 - #8 ;
INFO  13:34:29,595 - #49 int
INFO  13:34:29,595 - #49 niz
INFO  13:34:29,596 - #10 [
INFO  13:34:29,596 - #11 ]
INFO  13:34:29,596 - #9 ,
INFO  13:34:29,596 - #49 niz2
INFO  13:34:29,596 - #10 [
INFO  13:34:29,596 - #11 ]
INFO  13:34:29,596 - #8 ;
INFO  13:34:29,596 - #49 char
INFO  13:34:29,597 - #49 nizch
INFO  13:34:29,597 - #10 [
INFO  13:34:29,597 - #11 ]
INFO  13:34:29,597 - #8 ;
INFO  13:34:29,597 - #49 char
INFO  13:34:29,597 - #49 c
INFO  13:34:29,597 - #10 [
INFO  13:34:29,597 - #11 ]
INFO  13:34:29,597 - #8 ;
INFO  13:34:29,598 - #4 {
INFO  13:34:29,598 - #41 void
INFO  13:34:29,599 - #49 main
INFO  13:34:29,599 - #20 (
INFO  13:34:29,599 - #21 )
INFO  13:34:29,600 - #49 int
INFO  13:34:29,600 - #49 bodovi
INFO  13:34:29,600 - #8 ;
INFO  13:34:29,600 - #49 bool
INFO  13:34:29,600 - #49 bt
INFO  13:34:29,601 - #8 ;
INFO  13:34:29,601 - #4 {
INFO  13:34:29,601 - #49 bodovi
INFO  13:34:29,601 - #7 =
INFO  13:34:29,601 - #48 0
INFO  13:34:29,602 - #8 ;
INFO  13:34:29,603 - #49 nizch
INFO  13:34:29,604 - #7 =
INFO  13:34:29,604 - #29 new
INFO  13:34:29,604 - #49 char
INFO  13:34:29,604 - #10 [
INFO  13:34:29,604 - #48 3
INFO  13:34:29,604 - #11 ]
INFO  13:34:29,605 - #8 ;
INFO  13:34:29,605 - #22 print
INFO  13:34:29,605 - #20 (
INFO  13:34:29,605 - #49 nizch
INFO  13:34:29,605 - #10 [
INFO  13:34:29,606 - #49 jedan
INFO  13:34:29,606 - #37 +
INFO  13:34:29,606 - #48 2
INFO  13:34:29,607 - #11 ]
INFO  13:34:29,607 - #21 )
INFO  13:34:29,608 - #8 ;
INFO  13:34:29,608 - #5 }
INFO  13:34:29,609 - #5 }
INFO  13:34:29,619 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopList(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       jedan
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                              Plus(
                              ) [Plus]
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   2
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopList]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:34:29,619 - ===================================
INFO  13:34:29,619 - Pocetak programa test301.
INFO  13:34:29,619 - Deklarisana je konstanta nula na liniji 5
INFO  13:34:29,620 - Deklarisana je konstanta jedan na liniji 6
INFO  13:34:29,620 - Deklarisana je konstanta pet na liniji 7
INFO  13:34:29,620 - Deklarisan je niz niz na liniji 9
INFO  13:34:29,620 - Deklarisan je niz niz2 na liniji 9
INFO  13:34:29,620 - Deklarisan je niz nizch na liniji 10
INFO  13:34:29,620 - Deklarisan je niz c na liniji 11
INFO  13:34:29,620 - Obradjuje se funkcija main na liniji 14
INFO  13:34:29,621 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:34:29,621 - Deklarisana je promenljiva bt na liniji 16
INFO  13:34:29,621 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  13:34:29,621 - Designator i expr su odgovarajuceg tipa na liniji 19
INFO  13:34:29,621 - Kreiran/promenjen element niza nizch
INFO  13:34:29,621 - Obradjena funkcija PRINT na liniji 20
INFO  13:34:29,622 - ===================================
INFO  13:34:29,622 - Parsiranje uspesno zavrseno!
INFO  13:44:00,613 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:44:00,709 - #2 program
INFO  13:44:00,709 - #49 test301
INFO  13:44:00,709 - #6 const
INFO  13:44:00,711 - #49 int
INFO  13:44:00,711 - #49 nula
INFO  13:44:00,712 - #7 =
INFO  13:44:00,713 - #48 0
INFO  13:44:00,713 - #8 ;
INFO  13:44:00,714 - #6 const
INFO  13:44:00,715 - #49 int
INFO  13:44:00,715 - #49 jedan
INFO  13:44:00,715 - #7 =
INFO  13:44:00,715 - #48 1
INFO  13:44:00,715 - #8 ;
INFO  13:44:00,716 - #6 const
INFO  13:44:00,716 - #49 int
INFO  13:44:00,716 - #49 pet
INFO  13:44:00,716 - #7 =
INFO  13:44:00,716 - #48 5
INFO  13:44:00,717 - #8 ;
INFO  13:44:00,719 - #49 int
INFO  13:44:00,719 - #49 niz
INFO  13:44:00,719 - #10 [
INFO  13:44:00,720 - #11 ]
INFO  13:44:00,720 - #9 ,
INFO  13:44:00,720 - #49 niz2
INFO  13:44:00,720 - #10 [
INFO  13:44:00,720 - #11 ]
INFO  13:44:00,720 - #8 ;
INFO  13:44:00,721 - #49 char
INFO  13:44:00,721 - #49 nizch
INFO  13:44:00,721 - #10 [
INFO  13:44:00,721 - #11 ]
INFO  13:44:00,721 - #8 ;
INFO  13:44:00,721 - #49 char
INFO  13:44:00,721 - #49 c
INFO  13:44:00,722 - #10 [
INFO  13:44:00,722 - #11 ]
INFO  13:44:00,722 - #8 ;
INFO  13:44:00,722 - #4 {
INFO  13:44:00,722 - #41 void
INFO  13:44:00,724 - #49 main
INFO  13:44:00,724 - #20 (
INFO  13:44:00,724 - #21 )
INFO  13:44:00,726 - #49 int
INFO  13:44:00,727 - #49 bodovi
INFO  13:44:00,727 - #8 ;
INFO  13:44:00,727 - #49 bool
INFO  13:44:00,727 - #49 bt
INFO  13:44:00,727 - #8 ;
INFO  13:44:00,727 - #4 {
INFO  13:44:00,727 - #49 bodovi
INFO  13:44:00,727 - #7 =
INFO  13:44:00,728 - #48 0
INFO  13:44:00,729 - #8 ;
INFO  13:44:00,731 - #49 nizch
INFO  13:44:00,731 - #7 =
INFO  13:44:00,731 - #29 new
INFO  13:44:00,731 - #49 char
INFO  13:44:00,731 - #10 [
INFO  13:44:00,731 - #48 3
INFO  13:44:00,731 - #11 ]
INFO  13:44:00,731 - #8 ;
INFO  13:44:00,731 - #22 print
INFO  13:44:00,732 - #20 (
INFO  13:44:00,732 - #49 nizch
INFO  13:44:00,732 - #10 [
INFO  13:44:00,733 - #49 jedan
INFO  13:44:00,733 - #37 +
INFO  13:44:00,733 - #48 2
INFO  13:44:00,735 - #11 ]
INFO  13:44:00,735 - #21 )
INFO  13:44:00,735 - #8 ;
INFO  13:44:00,735 - #5 }
INFO  13:44:00,737 - #5 }
INFO  13:44:00,764 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopList(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       jedan
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                              Plus(
                              ) [Plus]
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   2
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopList]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:44:00,765 - ===================================
INFO  13:44:00,766 - Pocetak programa test301.
INFO  13:44:00,767 - Deklarisana je konstanta nula na liniji 5
INFO  13:44:00,767 - Deklarisana je konstanta jedan na liniji 6
INFO  13:44:00,768 - Deklarisana je konstanta pet na liniji 7
INFO  13:44:00,768 - Deklarisan je niz niz na liniji 9
INFO  13:44:00,769 - Deklarisan je niz niz2 na liniji 9
INFO  13:44:00,769 - Deklarisan je niz nizch na liniji 10
INFO  13:44:00,769 - Deklarisan je niz c na liniji 11
INFO  13:44:00,769 - Obradjuje se funkcija main na liniji 14
INFO  13:44:00,769 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:44:00,769 - Deklarisana je promenljiva bt na liniji 16
INFO  13:44:08,361 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:44:08,415 - #2 program
INFO  13:44:08,415 - #49 test301
INFO  13:44:08,415 - #6 const
INFO  13:44:08,416 - #49 int
INFO  13:44:08,416 - #49 nula
INFO  13:44:08,417 - #7 =
INFO  13:44:08,417 - #48 0
INFO  13:44:08,417 - #8 ;
INFO  13:44:08,418 - #6 const
INFO  13:44:08,418 - #49 int
INFO  13:44:08,418 - #49 jedan
INFO  13:44:08,418 - #7 =
INFO  13:44:08,418 - #48 1
INFO  13:44:08,418 - #8 ;
INFO  13:44:08,419 - #6 const
INFO  13:44:08,419 - #49 int
INFO  13:44:08,419 - #49 pet
INFO  13:44:08,419 - #7 =
INFO  13:44:08,419 - #48 5
INFO  13:44:08,419 - #8 ;
INFO  13:44:08,419 - #49 int
INFO  13:44:08,419 - #49 niz
INFO  13:44:08,419 - #10 [
INFO  13:44:08,420 - #11 ]
INFO  13:44:08,420 - #9 ,
INFO  13:44:08,420 - #49 niz2
INFO  13:44:08,420 - #10 [
INFO  13:44:08,420 - #11 ]
INFO  13:44:08,420 - #8 ;
INFO  13:44:08,420 - #49 char
INFO  13:44:08,421 - #49 nizch
INFO  13:44:08,421 - #10 [
INFO  13:44:08,421 - #11 ]
INFO  13:44:08,421 - #8 ;
INFO  13:44:08,421 - #49 char
INFO  13:44:08,421 - #49 c
INFO  13:44:08,421 - #10 [
INFO  13:44:08,421 - #11 ]
INFO  13:44:08,422 - #8 ;
INFO  13:44:08,422 - #4 {
INFO  13:44:08,422 - #41 void
INFO  13:44:08,423 - #49 main
INFO  13:44:08,423 - #20 (
INFO  13:44:08,423 - #21 )
INFO  13:44:08,424 - #49 int
INFO  13:44:08,424 - #49 bodovi
INFO  13:44:08,424 - #8 ;
INFO  13:44:08,424 - #49 bool
INFO  13:44:08,424 - #49 bt
INFO  13:44:08,424 - #8 ;
INFO  13:44:08,424 - #4 {
INFO  13:44:08,424 - #49 bodovi
INFO  13:44:08,425 - #7 =
INFO  13:44:08,425 - #48 0
INFO  13:44:08,425 - #8 ;
INFO  13:44:08,427 - #49 nizch
INFO  13:44:08,427 - #7 =
INFO  13:44:08,427 - #29 new
INFO  13:44:08,427 - #49 char
INFO  13:44:08,427 - #10 [
INFO  13:44:08,427 - #48 3
INFO  13:44:08,427 - #11 ]
INFO  13:44:08,427 - #8 ;
INFO  13:44:08,428 - #22 print
INFO  13:44:08,428 - #20 (
INFO  13:44:08,428 - #49 nizch
INFO  13:44:08,428 - #10 [
INFO  13:44:08,429 - #49 jedan
INFO  13:44:08,429 - #38 *
INFO  13:44:08,429 - #48 2
INFO  13:44:08,430 - #11 ]
INFO  13:44:08,430 - #21 )
INFO  13:44:08,431 - #8 ;
INFO  13:44:08,431 - #5 }
INFO  13:44:08,431 - #5 }
INFO  13:44:08,441 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       jedan
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorNum(
                                   2
                                  ) [FactorNum]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:44:08,442 - ===================================
INFO  13:44:08,442 - Pocetak programa test301.
INFO  13:44:08,442 - Deklarisana je konstanta nula na liniji 5
INFO  13:44:08,442 - Deklarisana je konstanta jedan na liniji 6
INFO  13:44:08,442 - Deklarisana je konstanta pet na liniji 7
INFO  13:44:08,442 - Deklarisan je niz niz na liniji 9
INFO  13:44:08,442 - Deklarisan je niz niz2 na liniji 9
INFO  13:44:08,443 - Deklarisan je niz nizch na liniji 10
INFO  13:44:08,443 - Deklarisan je niz c na liniji 11
INFO  13:44:08,443 - Obradjuje se funkcija main na liniji 14
INFO  13:44:08,443 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:44:08,443 - Deklarisana je promenljiva bt na liniji 16
INFO  13:44:08,443 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  13:44:08,443 - Designator i expr su odgovarajuceg tipa na liniji 19
INFO  13:44:08,443 - Kreiran/promenjen element niza nizch
INFO  13:44:08,444 - Obradjena funkcija PRINT na liniji 20
INFO  13:44:08,444 - ===================================
INFO  13:44:08,444 - Parsiranje uspesno zavrseno!
INFO  13:44:47,920 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:44:47,980 - #2 program
INFO  13:44:47,980 - #49 test301
INFO  13:44:47,980 - #6 const
INFO  13:44:47,981 - #49 int
INFO  13:44:47,981 - #49 nula
INFO  13:44:47,981 - #7 =
INFO  13:44:47,981 - #48 0
INFO  13:44:47,982 - #8 ;
INFO  13:44:47,982 - #6 const
INFO  13:44:47,983 - #49 int
INFO  13:44:47,983 - #49 jedan
INFO  13:44:47,983 - #7 =
INFO  13:44:47,983 - #48 1
INFO  13:44:47,983 - #8 ;
INFO  13:44:47,983 - #6 const
INFO  13:44:47,983 - #49 int
INFO  13:44:47,983 - #49 pet
INFO  13:44:47,983 - #7 =
INFO  13:44:47,983 - #48 5
INFO  13:44:47,983 - #8 ;
INFO  13:44:47,984 - #49 int
INFO  13:44:47,984 - #49 niz
INFO  13:44:47,984 - #10 [
INFO  13:44:47,984 - #11 ]
INFO  13:44:47,984 - #9 ,
INFO  13:44:47,984 - #49 niz2
INFO  13:44:47,984 - #10 [
INFO  13:44:47,984 - #11 ]
INFO  13:44:47,984 - #8 ;
INFO  13:44:47,985 - #49 char
INFO  13:44:47,985 - #49 nizch
INFO  13:44:47,985 - #10 [
INFO  13:44:47,985 - #11 ]
INFO  13:44:47,986 - #8 ;
INFO  13:44:47,986 - #49 char
INFO  13:44:47,986 - #49 c
INFO  13:44:47,986 - #10 [
INFO  13:44:47,986 - #11 ]
INFO  13:44:47,986 - #8 ;
INFO  13:44:47,986 - #4 {
INFO  13:44:47,986 - #41 void
INFO  13:44:47,987 - #49 main
INFO  13:44:47,988 - #20 (
INFO  13:44:47,988 - #21 )
INFO  13:44:47,989 - #49 int
INFO  13:44:47,989 - #49 bodovi
INFO  13:44:47,990 - #8 ;
INFO  13:44:47,990 - #49 bool
INFO  13:44:47,990 - #49 bt
INFO  13:44:47,990 - #8 ;
INFO  13:44:47,990 - #4 {
INFO  13:44:47,991 - #49 bodovi
INFO  13:44:47,991 - #7 =
INFO  13:44:47,991 - #48 0
INFO  13:44:47,993 - #8 ;
INFO  13:44:47,995 - #49 nizch
INFO  13:44:47,995 - #7 =
INFO  13:44:47,995 - #29 new
INFO  13:44:47,995 - #49 char
INFO  13:44:47,995 - #10 [
INFO  13:44:47,995 - #48 3
INFO  13:44:47,995 - #11 ]
INFO  13:44:47,995 - #8 ;
INFO  13:44:47,995 - #22 print
INFO  13:44:47,995 - #20 (
INFO  13:44:47,995 - #49 nizch
INFO  13:44:47,996 - #10 [
INFO  13:44:47,996 - #49 jedan
INFO  13:44:47,996 - #38 *
INFO  13:44:47,997 - #50 a
INFO  13:44:47,998 - #11 ]
INFO  13:44:47,998 - #21 )
INFO  13:44:47,998 - #8 ;
INFO  13:44:47,998 - #5 }
INFO  13:44:47,999 - #5 }
INFO  13:44:48,009 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       jedan
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   a
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:44:48,010 - ===================================
INFO  13:44:48,011 - Pocetak programa test301.
INFO  13:44:48,011 - Deklarisana je konstanta nula na liniji 5
INFO  13:44:48,011 - Deklarisana je konstanta jedan na liniji 6
INFO  13:44:48,011 - Deklarisana je konstanta pet na liniji 7
INFO  13:44:48,012 - Deklarisan je niz niz na liniji 9
INFO  13:44:48,012 - Deklarisan je niz niz2 na liniji 9
INFO  13:44:48,012 - Deklarisan je niz nizch na liniji 10
INFO  13:44:48,012 - Deklarisan je niz c na liniji 11
INFO  13:44:48,013 - Obradjuje se funkcija main na liniji 14
INFO  13:44:48,013 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:44:48,013 - Deklarisana je promenljiva bt na liniji 16
INFO  13:44:48,013 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  13:44:48,014 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 13:44:48,014 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 13:44:48,014 - Greska na liniji 20. Ime nizch nije int! rs.etf.pp1.symboltable.concepts.Struct@120d6fe6
INFO  13:45:20,126 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:45:20,186 - #2 program
INFO  13:45:20,186 - #49 test301
INFO  13:45:20,186 - #6 const
INFO  13:45:20,187 - #49 int
INFO  13:45:20,187 - #49 nula
INFO  13:45:20,188 - #7 =
INFO  13:45:20,188 - #48 0
INFO  13:45:20,188 - #8 ;
INFO  13:45:20,189 - #6 const
INFO  13:45:20,189 - #49 int
INFO  13:45:20,189 - #49 jedan
INFO  13:45:20,189 - #7 =
INFO  13:45:20,189 - #48 1
INFO  13:45:20,189 - #8 ;
INFO  13:45:20,190 - #6 const
INFO  13:45:20,190 - #49 int
INFO  13:45:20,190 - #49 pet
INFO  13:45:20,190 - #7 =
INFO  13:45:20,190 - #48 5
INFO  13:45:20,190 - #8 ;
INFO  13:45:20,190 - #49 int
INFO  13:45:20,190 - #49 niz
INFO  13:45:20,190 - #10 [
INFO  13:45:20,190 - #11 ]
INFO  13:45:20,190 - #9 ,
INFO  13:45:20,191 - #49 niz2
INFO  13:45:20,191 - #10 [
INFO  13:45:20,191 - #11 ]
INFO  13:45:20,191 - #8 ;
INFO  13:45:20,191 - #49 char
INFO  13:45:20,191 - #49 nizch
INFO  13:45:20,191 - #10 [
INFO  13:45:20,191 - #11 ]
INFO  13:45:20,192 - #8 ;
INFO  13:45:20,192 - #49 char
INFO  13:45:20,192 - #49 c
INFO  13:45:20,192 - #10 [
INFO  13:45:20,192 - #11 ]
INFO  13:45:20,192 - #8 ;
INFO  13:45:20,192 - #4 {
INFO  13:45:20,192 - #41 void
INFO  13:45:20,193 - #49 main
INFO  13:45:20,193 - #20 (
INFO  13:45:20,193 - #21 )
INFO  13:45:20,194 - #49 int
INFO  13:45:20,195 - #49 bodovi
INFO  13:45:20,195 - #8 ;
INFO  13:45:20,195 - #49 bool
INFO  13:45:20,195 - #49 bt
INFO  13:45:20,195 - #8 ;
INFO  13:45:20,195 - #4 {
INFO  13:45:20,195 - #49 bodovi
INFO  13:45:20,195 - #7 =
INFO  13:45:20,195 - #48 0
INFO  13:45:20,196 - #8 ;
INFO  13:45:20,198 - #49 nizch
INFO  13:45:20,198 - #7 =
INFO  13:45:20,198 - #29 new
INFO  13:45:20,198 - #49 char
INFO  13:45:20,198 - #10 [
INFO  13:45:20,198 - #48 3
INFO  13:45:20,198 - #11 ]
INFO  13:45:20,198 - #8 ;
INFO  13:45:20,198 - #22 print
INFO  13:45:20,198 - #20 (
INFO  13:45:20,198 - #49 nizch
INFO  13:45:20,199 - #10 [
INFO  13:45:20,199 - #49 jedan
INFO  13:45:20,199 - #38 *
INFO  13:45:20,200 - #48 2
INFO  13:45:20,201 - #11 ]
INFO  13:45:20,201 - #21 )
INFO  13:45:20,201 - #8 ;
INFO  13:45:20,201 - #5 }
INFO  13:45:20,202 - #5 }
INFO  13:45:20,212 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       jedan
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorNum(
                                   2
                                  ) [FactorNum]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:45:20,213 - ===================================
INFO  13:45:20,213 - Pocetak programa test301.
INFO  13:45:20,213 - Deklarisana je konstanta nula na liniji 5
INFO  13:45:20,213 - Deklarisana je konstanta jedan na liniji 6
INFO  13:45:20,213 - Deklarisana je konstanta pet na liniji 7
INFO  13:45:20,214 - Deklarisan je niz niz na liniji 9
INFO  13:45:20,214 - Deklarisan je niz niz2 na liniji 9
INFO  13:45:20,214 - Deklarisan je niz nizch na liniji 10
INFO  13:45:20,214 - Deklarisan je niz c na liniji 11
INFO  13:45:20,214 - Obradjuje se funkcija main na liniji 14
INFO  13:45:20,214 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:45:20,214 - Deklarisana je promenljiva bt na liniji 16
INFO  13:45:20,214 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  13:45:20,215 - Designator i expr su odgovarajuceg tipa na liniji 19
INFO  13:45:20,215 - Kreiran/promenjen element niza nizch
INFO  13:45:20,215 - Obradjena funkcija PRINT na liniji 20
INFO  13:45:20,215 - ===================================
INFO  13:45:20,216 - Parsiranje uspesno zavrseno!
INFO  13:45:34,191 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:45:34,255 - #2 program
INFO  13:45:34,255 - #49 test301
INFO  13:45:34,255 - #6 const
INFO  13:45:34,256 - #49 int
INFO  13:45:34,257 - #49 nula
INFO  13:45:34,257 - #7 =
INFO  13:45:34,257 - #48 0
INFO  13:45:34,257 - #8 ;
INFO  13:45:34,258 - #6 const
INFO  13:45:34,258 - #49 int
INFO  13:45:34,258 - #49 jedan
INFO  13:45:34,258 - #7 =
INFO  13:45:34,258 - #48 1
INFO  13:45:34,258 - #8 ;
INFO  13:45:34,259 - #6 const
INFO  13:45:34,259 - #49 int
INFO  13:45:34,259 - #49 pet
INFO  13:45:34,259 - #7 =
INFO  13:45:34,259 - #48 5
INFO  13:45:34,259 - #8 ;
INFO  13:45:34,259 - #49 int
INFO  13:45:34,259 - #49 niz
INFO  13:45:34,259 - #10 [
INFO  13:45:34,259 - #11 ]
INFO  13:45:34,259 - #9 ,
INFO  13:45:34,259 - #49 niz2
INFO  13:45:34,260 - #10 [
INFO  13:45:34,260 - #11 ]
INFO  13:45:34,260 - #8 ;
INFO  13:45:34,260 - #49 char
INFO  13:45:34,260 - #49 nizch
INFO  13:45:34,260 - #10 [
INFO  13:45:34,260 - #11 ]
INFO  13:45:34,260 - #8 ;
INFO  13:45:34,260 - #49 char
INFO  13:45:34,260 - #49 c
INFO  13:45:34,261 - #10 [
INFO  13:45:34,261 - #11 ]
INFO  13:45:34,261 - #8 ;
INFO  13:45:34,261 - #4 {
INFO  13:45:34,261 - #41 void
INFO  13:45:34,262 - #49 main
INFO  13:45:34,262 - #20 (
INFO  13:45:34,262 - #21 )
INFO  13:45:34,264 - #49 int
INFO  13:45:34,264 - #49 bodovi
INFO  13:45:34,264 - #8 ;
INFO  13:45:34,265 - #49 bool
INFO  13:45:34,265 - #49 bt
INFO  13:45:34,265 - #8 ;
INFO  13:45:34,265 - #4 {
INFO  13:45:34,265 - #49 bodovi
INFO  13:45:34,265 - #7 =
INFO  13:45:34,265 - #48 0
INFO  13:45:34,266 - #8 ;
INFO  13:45:34,267 - #49 nizch
INFO  13:45:34,268 - #7 =
INFO  13:45:34,268 - #29 new
INFO  13:45:34,268 - #49 char
INFO  13:45:34,268 - #10 [
INFO  13:45:34,268 - #48 3
INFO  13:45:34,268 - #11 ]
INFO  13:45:34,268 - #8 ;
INFO  13:45:34,268 - #49 bodovi
INFO  13:45:34,269 - #7 =
INFO  13:45:34,269 - #49 jedan
INFO  13:45:34,269 - #38 *
INFO  13:45:34,269 - #50 a
INFO  13:45:34,271 - #8 ;
INFO  13:45:34,271 - #22 print
INFO  13:45:34,271 - #20 (
INFO  13:45:34,271 - #49 nizch
INFO  13:45:34,271 - #10 [
INFO  13:45:34,272 - #49 jedan
INFO  13:45:34,272 - #38 *
INFO  13:45:34,272 - #48 2
INFO  13:45:34,272 - #11 ]
INFO  13:45:34,272 - #21 )
INFO  13:45:34,272 - #8 ;
INFO  13:45:34,272 - #5 }
INFO  13:45:34,273 - #5 }
INFO  13:45:34,283 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementDesignator(
              DesignatorStatementMatched(
                DesignatorStatementAssignop(
                  DesignatorIdent(
                   bodovi
                  ) [DesignatorIdent]
                  Assignop(
                  ) [Assignop]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopList(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               jedan
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                          Star(
                          ) [Star]
                          FactorChar(
                           a
                          ) [FactorChar]
                        ) [MulopList]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementMatched]
            ) [StatementDesignator]
            Statements(
              StatementPrint(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorExpr(
                            DesignatorName(
                             nizch
                            ) [DesignatorName]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         jedan
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorExpr]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementPrint]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:45:34,283 - ===================================
INFO  13:45:34,284 - Pocetak programa test301.
INFO  13:45:34,284 - Deklarisana je konstanta nula na liniji 5
INFO  13:45:34,284 - Deklarisana je konstanta jedan na liniji 6
INFO  13:45:34,284 - Deklarisana je konstanta pet na liniji 7
INFO  13:45:34,284 - Deklarisan je niz niz na liniji 9
INFO  13:45:34,285 - Deklarisan je niz niz2 na liniji 9
INFO  13:45:34,285 - Deklarisan je niz nizch na liniji 10
INFO  13:45:34,285 - Deklarisan je niz c na liniji 11
INFO  13:45:34,285 - Obradjuje se funkcija main na liniji 14
INFO  13:45:34,285 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:45:34,285 - Deklarisana je promenljiva bt na liniji 16
INFO  13:45:34,285 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  13:45:34,286 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 13:45:34,286 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 13:45:34,286 - Greska na liniji 20 designator i expr nisu istog tipa
INFO  13:45:34,286 - Kreiran/promenjen element niza nizch
INFO  13:45:34,286 - Obradjena funkcija PRINT na liniji 21
INFO  13:45:34,286 - ===================================
ERROR 13:45:34,287 - Parsiranje NIJE uspesno zavrseno!
INFO  13:45:53,130 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:45:53,191 - #2 program
INFO  13:45:53,191 - #49 test301
INFO  13:45:53,191 - #6 const
INFO  13:45:53,192 - #49 int
INFO  13:45:53,192 - #49 nula
INFO  13:45:53,193 - #7 =
INFO  13:45:53,193 - #48 0
INFO  13:45:53,193 - #8 ;
INFO  13:45:53,194 - #6 const
INFO  13:45:53,194 - #49 int
INFO  13:45:53,194 - #49 jedan
INFO  13:45:53,194 - #7 =
INFO  13:45:53,194 - #48 1
INFO  13:45:53,194 - #8 ;
INFO  13:45:53,194 - #6 const
INFO  13:45:53,195 - #49 int
INFO  13:45:53,195 - #49 pet
INFO  13:45:53,195 - #7 =
INFO  13:45:53,195 - #48 5
INFO  13:45:53,195 - #8 ;
INFO  13:45:53,195 - #49 int
INFO  13:45:53,195 - #49 niz
INFO  13:45:53,195 - #10 [
INFO  13:45:53,195 - #11 ]
INFO  13:45:53,195 - #9 ,
INFO  13:45:53,195 - #49 niz2
INFO  13:45:53,195 - #10 [
INFO  13:45:53,196 - #11 ]
INFO  13:45:53,196 - #8 ;
INFO  13:45:53,196 - #49 char
INFO  13:45:53,196 - #49 nizch
INFO  13:45:53,196 - #10 [
INFO  13:45:53,196 - #11 ]
INFO  13:45:53,196 - #8 ;
INFO  13:45:53,196 - #49 char
INFO  13:45:53,196 - #49 c
INFO  13:45:53,196 - #10 [
INFO  13:45:53,196 - #11 ]
INFO  13:45:53,197 - #8 ;
INFO  13:45:53,197 - #4 {
INFO  13:45:53,197 - #41 void
INFO  13:45:53,198 - #49 main
INFO  13:45:53,198 - #20 (
INFO  13:45:53,198 - #21 )
INFO  13:45:53,199 - #49 int
INFO  13:45:53,199 - #49 bodovi
INFO  13:45:53,199 - #8 ;
INFO  13:45:53,200 - #49 bool
INFO  13:45:53,200 - #49 bt
INFO  13:45:53,200 - #8 ;
INFO  13:45:53,200 - #4 {
INFO  13:45:53,200 - #49 bodovi
INFO  13:45:53,200 - #7 =
INFO  13:45:53,201 - #48 0
INFO  13:45:53,202 - #8 ;
INFO  13:45:53,203 - #49 nizch
INFO  13:45:53,203 - #7 =
INFO  13:45:53,203 - #29 new
INFO  13:45:53,204 - #49 char
INFO  13:45:53,204 - #10 [
INFO  13:45:53,204 - #48 3
INFO  13:45:53,204 - #11 ]
INFO  13:45:53,204 - #8 ;
INFO  13:45:53,204 - #49 bodovi
INFO  13:45:53,204 - #7 =
INFO  13:45:53,204 - #49 jedan
INFO  13:45:53,204 - #38 *
INFO  13:45:53,204 - #48 2
INFO  13:45:53,206 - #8 ;
INFO  13:45:53,206 - #22 print
INFO  13:45:53,206 - #20 (
INFO  13:45:53,206 - #49 nizch
INFO  13:45:53,206 - #10 [
INFO  13:45:53,207 - #49 jedan
INFO  13:45:53,207 - #38 *
INFO  13:45:53,207 - #50 b
INFO  13:45:53,207 - #11 ]
INFO  13:45:53,207 - #21 )
INFO  13:45:53,208 - #8 ;
INFO  13:45:53,208 - #5 }
INFO  13:45:53,209 - #5 }
INFO  13:45:53,218 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementDesignator(
              DesignatorStatementMatched(
                DesignatorStatementAssignop(
                  DesignatorIdent(
                   bodovi
                  ) [DesignatorIdent]
                  Assignop(
                  ) [Assignop]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopList(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               jedan
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                          Star(
                          ) [Star]
                          FactorNum(
                           2
                          ) [FactorNum]
                        ) [MulopList]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementMatched]
            ) [StatementDesignator]
            Statements(
              StatementPrint(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorExpr(
                            DesignatorName(
                             nizch
                            ) [DesignatorName]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         jedan
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorChar(
                                     b
                                    ) [FactorChar]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorExpr]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementPrint]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:45:53,219 - ===================================
INFO  13:45:53,219 - Pocetak programa test301.
INFO  13:45:53,219 - Deklarisana je konstanta nula na liniji 5
INFO  13:45:53,219 - Deklarisana je konstanta jedan na liniji 6
INFO  13:45:53,219 - Deklarisana je konstanta pet na liniji 7
INFO  13:45:53,220 - Deklarisan je niz niz na liniji 9
INFO  13:45:53,220 - Deklarisan je niz niz2 na liniji 9
INFO  13:45:53,220 - Deklarisan je niz nizch na liniji 10
INFO  13:45:53,220 - Deklarisan je niz c na liniji 11
INFO  13:45:53,220 - Obradjuje se funkcija main na liniji 14
INFO  13:45:53,220 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:45:53,220 - Deklarisana je promenljiva bt na liniji 16
INFO  13:45:53,220 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  13:45:53,220 - Designator i expr su odgovarajuceg tipa na liniji 19
INFO  13:45:53,221 - Designator i expr su odgovarajuceg tipa na liniji 20
ERROR 13:45:53,221 - Greska na liniji 21, operandi nisu odgovarajuci tipovi
ERROR 13:45:53,221 - Greska na liniji 21. Ime nizch nije int! rs.etf.pp1.symboltable.concepts.Struct@120d6fe6
INFO  13:46:59,135 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:46:59,275 - #2 program
INFO  13:46:59,275 - #49 test301
INFO  13:46:59,276 - #6 const
INFO  13:46:59,281 - #49 int
INFO  13:46:59,281 - #49 nula
INFO  13:46:59,286 - #7 =
INFO  13:46:59,287 - #48 0
INFO  13:46:59,287 - #8 ;
INFO  13:46:59,288 - #6 const
INFO  13:46:59,289 - #49 int
INFO  13:46:59,289 - #49 jedan
INFO  13:46:59,289 - #7 =
INFO  13:46:59,289 - #48 1
INFO  13:46:59,290 - #8 ;
INFO  13:46:59,290 - #6 const
INFO  13:46:59,290 - #49 int
INFO  13:46:59,290 - #49 pet
INFO  13:46:59,290 - #7 =
INFO  13:46:59,290 - #48 5
INFO  13:46:59,291 - #8 ;
INFO  13:46:59,291 - #49 int
INFO  13:46:59,291 - #49 niz
INFO  13:46:59,291 - #10 [
INFO  13:46:59,292 - #11 ]
INFO  13:46:59,292 - #9 ,
INFO  13:46:59,292 - #49 niz2
INFO  13:46:59,292 - #10 [
INFO  13:46:59,292 - #11 ]
INFO  13:46:59,293 - #8 ;
INFO  13:46:59,293 - #49 char
INFO  13:46:59,294 - #49 nizch
INFO  13:46:59,294 - #10 [
INFO  13:46:59,294 - #11 ]
INFO  13:46:59,294 - #8 ;
INFO  13:46:59,294 - #49 char
INFO  13:46:59,294 - #49 c
INFO  13:46:59,294 - #10 [
INFO  13:46:59,295 - #11 ]
INFO  13:46:59,295 - #8 ;
INFO  13:46:59,295 - #4 {
INFO  13:46:59,295 - #41 void
INFO  13:46:59,296 - #49 main
INFO  13:46:59,296 - #20 (
INFO  13:46:59,296 - #21 )
INFO  13:46:59,297 - #49 int
INFO  13:46:59,297 - #49 bodovi
INFO  13:46:59,298 - #8 ;
INFO  13:46:59,298 - #49 bool
INFO  13:46:59,298 - #49 bt
INFO  13:46:59,298 - #8 ;
INFO  13:46:59,298 - #4 {
INFO  13:46:59,298 - #49 bodovi
INFO  13:46:59,298 - #7 =
INFO  13:46:59,299 - #48 0
INFO  13:46:59,300 - #8 ;
INFO  13:46:59,302 - #49 nizch
INFO  13:46:59,302 - #7 =
INFO  13:46:59,302 - #29 new
INFO  13:46:59,302 - #49 char
INFO  13:46:59,302 - #10 [
INFO  13:46:59,302 - #48 3
INFO  13:46:59,302 - #11 ]
INFO  13:46:59,302 - #8 ;
INFO  13:46:59,303 - #22 print
INFO  13:46:59,303 - #20 (
INFO  13:46:59,303 - #49 nizch
INFO  13:46:59,303 - #10 [
INFO  13:46:59,304 - #49 jedan
INFO  13:46:59,305 - #38 *
INFO  13:46:59,305 - #50 b
INFO  13:46:59,307 - #11 ]
INFO  13:46:59,307 - #21 )
INFO  13:46:59,308 - #8 ;
INFO  13:46:59,308 - #5 }
INFO  13:46:59,309 - #5 }
INFO  13:46:59,338 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       jedan
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:46:59,340 - ===================================
INFO  13:46:59,340 - Pocetak programa test301.
INFO  13:46:59,342 - Deklarisana je konstanta nula na liniji 5
INFO  13:46:59,346 - Deklarisana je konstanta jedan na liniji 6
INFO  13:46:59,348 - Deklarisana je konstanta pet na liniji 7
INFO  13:46:59,348 - Deklarisan je niz niz na liniji 9
INFO  13:46:59,349 - Deklarisan je niz niz2 na liniji 9
INFO  13:46:59,349 - Deklarisan je niz nizch na liniji 10
INFO  13:46:59,349 - Deklarisan je niz c na liniji 11
INFO  13:46:59,349 - Obradjuje se funkcija main na liniji 14
INFO  13:46:59,349 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:46:59,349 - Deklarisana je promenljiva bt na liniji 16
INFO  13:46:59,561 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:46:59,645 - #2 program
INFO  13:46:59,645 - #49 test301
INFO  13:46:59,645 - #6 const
INFO  13:46:59,646 - #49 int
INFO  13:46:59,646 - #49 nula
INFO  13:46:59,647 - #7 =
INFO  13:46:59,647 - #48 0
INFO  13:46:59,648 - #8 ;
INFO  13:46:59,649 - #6 const
INFO  13:46:59,649 - #49 int
INFO  13:46:59,649 - #49 jedan
INFO  13:46:59,649 - #7 =
INFO  13:46:59,649 - #48 1
INFO  13:46:59,649 - #8 ;
INFO  13:46:59,650 - #6 const
INFO  13:46:59,650 - #49 int
INFO  13:46:59,650 - #49 pet
INFO  13:46:59,650 - #7 =
INFO  13:46:59,650 - #48 5
INFO  13:46:59,650 - #8 ;
INFO  13:46:59,650 - #49 int
INFO  13:46:59,650 - #49 niz
INFO  13:46:59,650 - #10 [
INFO  13:46:59,650 - #11 ]
INFO  13:46:59,651 - #9 ,
INFO  13:46:59,651 - #49 niz2
INFO  13:46:59,651 - #10 [
INFO  13:46:59,651 - #11 ]
INFO  13:46:59,651 - #8 ;
INFO  13:46:59,651 - #49 char
INFO  13:46:59,652 - #49 nizch
INFO  13:46:59,652 - #10 [
INFO  13:46:59,652 - #11 ]
INFO  13:46:59,652 - #8 ;
INFO  13:46:59,652 - #49 char
INFO  13:46:59,652 - #49 c
INFO  13:46:59,652 - #10 [
INFO  13:46:59,652 - #11 ]
INFO  13:46:59,652 - #8 ;
INFO  13:46:59,652 - #4 {
INFO  13:46:59,652 - #41 void
INFO  13:46:59,653 - #49 main
INFO  13:46:59,653 - #20 (
INFO  13:46:59,654 - #21 )
INFO  13:46:59,655 - #49 int
INFO  13:46:59,655 - #49 bodovi
INFO  13:46:59,655 - #8 ;
INFO  13:46:59,655 - #49 bool
INFO  13:46:59,655 - #49 bt
INFO  13:46:59,655 - #8 ;
INFO  13:46:59,655 - #4 {
INFO  13:46:59,655 - #49 bodovi
INFO  13:46:59,655 - #7 =
INFO  13:46:59,656 - #48 0
INFO  13:46:59,657 - #8 ;
INFO  13:46:59,658 - #49 nizch
INFO  13:46:59,658 - #7 =
INFO  13:46:59,658 - #29 new
INFO  13:46:59,659 - #49 char
INFO  13:46:59,659 - #10 [
INFO  13:46:59,659 - #48 3
INFO  13:46:59,659 - #11 ]
INFO  13:46:59,659 - #8 ;
INFO  13:46:59,659 - #22 print
INFO  13:46:59,659 - #20 (
INFO  13:46:59,659 - #49 nizch
INFO  13:46:59,659 - #10 [
INFO  13:46:59,660 - #49 jedan
INFO  13:46:59,661 - #38 *
INFO  13:46:59,661 - #50 b
INFO  13:46:59,662 - #11 ]
INFO  13:46:59,663 - #21 )
INFO  13:46:59,663 - #8 ;
INFO  13:46:59,663 - #5 }
INFO  13:46:59,664 - #5 }
INFO  13:46:59,689 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       jedan
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:46:59,689 - ===================================
INFO  13:46:59,689 - Pocetak programa test301.
INFO  13:46:59,690 - Deklarisana je konstanta nula na liniji 5
INFO  13:46:59,690 - Deklarisana je konstanta jedan na liniji 6
INFO  13:46:59,691 - Deklarisana je konstanta pet na liniji 7
INFO  13:46:59,692 - Deklarisan je niz niz na liniji 9
INFO  13:46:59,692 - Deklarisan je niz niz2 na liniji 9
INFO  13:46:59,692 - Deklarisan je niz nizch na liniji 10
INFO  13:46:59,692 - Deklarisan je niz c na liniji 11
INFO  13:46:59,692 - Obradjuje se funkcija main na liniji 14
INFO  13:46:59,693 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:46:59,693 - Deklarisana je promenljiva bt na liniji 16
INFO  13:47:11,416 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  13:47:23,108 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 13:47:53,763 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 13:47:55,434 - Greska na liniji 20. Ime nizch nije int! rs.etf.pp1.symboltable.concepts.Struct@188715b5
INFO  13:48:12,139 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:48:12,220 - #2 program
INFO  13:48:12,220 - #49 test301
INFO  13:48:12,220 - #6 const
INFO  13:48:12,222 - #49 int
INFO  13:48:12,222 - #49 nula
INFO  13:48:12,223 - #7 =
INFO  13:48:12,223 - #48 0
INFO  13:48:12,223 - #8 ;
INFO  13:48:12,224 - #6 const
INFO  13:48:12,225 - #49 int
INFO  13:48:12,225 - #49 jedan
INFO  13:48:12,225 - #7 =
INFO  13:48:12,225 - #48 1
INFO  13:48:12,225 - #8 ;
INFO  13:48:12,225 - #6 const
INFO  13:48:12,225 - #49 int
INFO  13:48:12,225 - #49 pet
INFO  13:48:12,226 - #7 =
INFO  13:48:12,226 - #48 5
INFO  13:48:12,226 - #8 ;
INFO  13:48:12,226 - #49 int
INFO  13:48:12,226 - #49 niz
INFO  13:48:12,226 - #10 [
INFO  13:48:12,226 - #11 ]
INFO  13:48:12,226 - #9 ,
INFO  13:48:12,226 - #49 niz2
INFO  13:48:12,227 - #10 [
INFO  13:48:12,227 - #11 ]
INFO  13:48:12,227 - #8 ;
INFO  13:48:12,227 - #49 char
INFO  13:48:12,227 - #49 nizch
INFO  13:48:12,227 - #10 [
INFO  13:48:12,227 - #11 ]
INFO  13:48:12,228 - #8 ;
INFO  13:48:12,228 - #49 char
INFO  13:48:12,228 - #49 c
INFO  13:48:12,228 - #10 [
INFO  13:48:12,228 - #11 ]
INFO  13:48:12,228 - #8 ;
INFO  13:48:12,228 - #4 {
INFO  13:48:12,228 - #41 void
INFO  13:48:12,229 - #49 main
INFO  13:48:12,229 - #20 (
INFO  13:48:12,230 - #21 )
INFO  13:48:12,231 - #49 int
INFO  13:48:12,231 - #49 bodovi
INFO  13:48:12,231 - #8 ;
INFO  13:48:12,231 - #49 bool
INFO  13:48:12,231 - #49 bt
INFO  13:48:12,232 - #8 ;
INFO  13:48:12,232 - #4 {
INFO  13:48:12,232 - #49 bodovi
INFO  13:48:12,232 - #7 =
INFO  13:48:12,232 - #48 0
INFO  13:48:12,233 - #8 ;
INFO  13:48:12,234 - #49 nizch
INFO  13:48:12,235 - #7 =
INFO  13:48:12,235 - #29 new
INFO  13:48:12,235 - #49 char
INFO  13:48:12,235 - #10 [
INFO  13:48:12,235 - #48 3
INFO  13:48:12,235 - #11 ]
INFO  13:48:12,235 - #8 ;
INFO  13:48:12,235 - #22 print
INFO  13:48:12,235 - #20 (
INFO  13:48:12,235 - #49 nizch
INFO  13:48:12,236 - #10 [
INFO  13:48:12,236 - #49 jedan
INFO  13:48:12,237 - #38 *
INFO  13:48:12,237 - #50 b
INFO  13:48:12,238 - #11 ]
INFO  13:48:12,238 - #21 )
INFO  13:48:12,238 - #8 ;
INFO  13:48:12,238 - #5 }
INFO  13:48:12,240 - #5 }
INFO  13:48:12,263 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       jedan
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:48:12,264 - ===================================
INFO  13:48:12,264 - Pocetak programa test301.
INFO  13:48:12,265 - Deklarisana je konstanta nula na liniji 5
INFO  13:48:12,265 - Deklarisana je konstanta jedan na liniji 6
INFO  13:48:12,265 - Deklarisana je konstanta pet na liniji 7
INFO  13:48:12,265 - Deklarisan je niz niz na liniji 9
INFO  13:48:12,265 - Deklarisan je niz niz2 na liniji 9
INFO  13:48:12,265 - Deklarisan je niz nizch na liniji 10
INFO  13:48:12,265 - Deklarisan je niz c na liniji 11
INFO  13:48:12,265 - Obradjuje se funkcija main na liniji 14
INFO  13:48:12,266 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:48:12,266 - Deklarisana je promenljiva bt na liniji 16
INFO  13:48:14,814 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  13:48:16,142 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 13:48:26,402 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 13:48:47,960 - Greska na liniji 20. Ime nizch nije int! rs.etf.pp1.symboltable.concepts.Struct@188715b5
INFO  13:57:29,152 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:57:29,207 - #2 program
INFO  13:57:29,207 - #49 test301
INFO  13:57:29,207 - #6 const
INFO  13:57:29,208 - #49 int
INFO  13:57:29,208 - #49 nula
INFO  13:57:29,208 - #7 =
INFO  13:57:29,208 - #48 0
INFO  13:57:29,209 - #8 ;
INFO  13:57:29,209 - #6 const
INFO  13:57:29,210 - #49 int
INFO  13:57:29,210 - #49 jedan
INFO  13:57:29,210 - #7 =
INFO  13:57:29,210 - #48 1
INFO  13:57:29,210 - #8 ;
INFO  13:57:29,210 - #6 const
INFO  13:57:29,210 - #49 int
INFO  13:57:29,210 - #49 pet
INFO  13:57:29,210 - #7 =
INFO  13:57:29,210 - #48 5
INFO  13:57:29,210 - #8 ;
INFO  13:57:29,210 - #49 int
INFO  13:57:29,210 - #49 niz
INFO  13:57:29,211 - #10 [
INFO  13:57:29,211 - #11 ]
INFO  13:57:29,211 - #9 ,
INFO  13:57:29,211 - #49 niz2
INFO  13:57:29,211 - #10 [
INFO  13:57:29,211 - #11 ]
INFO  13:57:29,211 - #8 ;
INFO  13:57:29,211 - #49 char
INFO  13:57:29,211 - #49 nizch
INFO  13:57:29,212 - #10 [
INFO  13:57:29,212 - #11 ]
INFO  13:57:29,212 - #8 ;
INFO  13:57:29,212 - #49 char
INFO  13:57:29,212 - #49 c
INFO  13:57:29,212 - #10 [
INFO  13:57:29,212 - #11 ]
INFO  13:57:29,212 - #8 ;
INFO  13:57:29,212 - #4 {
INFO  13:57:29,213 - #41 void
INFO  13:57:29,213 - #49 main
INFO  13:57:29,213 - #20 (
INFO  13:57:29,214 - #21 )
INFO  13:57:29,214 - #49 int
INFO  13:57:29,214 - #49 bodovi
INFO  13:57:29,215 - #8 ;
INFO  13:57:29,215 - #49 bool
INFO  13:57:29,215 - #49 bt
INFO  13:57:29,215 - #8 ;
INFO  13:57:29,215 - #4 {
INFO  13:57:29,215 - #49 bodovi
INFO  13:57:29,215 - #7 =
INFO  13:57:29,215 - #48 0
INFO  13:57:29,216 - #8 ;
INFO  13:57:29,217 - #49 nizch
INFO  13:57:29,217 - #7 =
INFO  13:57:29,218 - #29 new
INFO  13:57:29,218 - #49 char
INFO  13:57:29,218 - #10 [
INFO  13:57:29,218 - #48 3
INFO  13:57:29,218 - #11 ]
INFO  13:57:29,218 - #8 ;
INFO  13:57:29,218 - #22 print
INFO  13:57:29,218 - #20 (
INFO  13:57:29,218 - #49 nizch
INFO  13:57:29,218 - #10 [
INFO  13:57:29,219 - #48 1
INFO  13:57:29,219 - #38 *
INFO  13:57:29,219 - #50 b
INFO  13:57:29,221 - #11 ]
INFO  13:57:29,221 - #21 )
INFO  13:57:29,221 - #8 ;
INFO  13:57:29,221 - #5 }
INFO  13:57:29,222 - #5 }
INFO  13:57:29,232 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorNum(
                                     1
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:57:29,232 - ===================================
INFO  13:57:29,232 - Pocetak programa test301.
INFO  13:57:29,232 - Deklarisana je konstanta nula na liniji 5
INFO  13:57:29,233 - Deklarisana je konstanta jedan na liniji 6
INFO  13:57:29,233 - Deklarisana je konstanta pet na liniji 7
INFO  13:57:29,233 - Deklarisan je niz niz na liniji 9
INFO  13:57:29,233 - Deklarisan je niz niz2 na liniji 9
INFO  13:57:29,233 - Deklarisan je niz nizch na liniji 10
INFO  13:57:29,233 - Deklarisan je niz c na liniji 11
INFO  13:57:29,233 - Obradjuje se funkcija main na liniji 14
INFO  13:57:29,233 - Deklarisana je promenljiva bodovi na liniji 15
INFO  13:57:29,233 - Deklarisana je promenljiva bt na liniji 16
INFO  13:57:29,234 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  13:57:29,234 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 13:57:29,234 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 13:57:29,234 - Greska na liniji 20. Ime nizch nije int! rs.etf.pp1.symboltable.concepts.Struct@120d6fe6
INFO  14:00:28,365 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  14:00:28,472 - #2 program
INFO  14:00:28,472 - #49 test301
INFO  14:00:28,472 - #6 const
INFO  14:00:28,474 - #49 int
INFO  14:00:28,474 - #49 nula
INFO  14:00:28,475 - #7 =
INFO  14:00:28,475 - #48 0
INFO  14:00:28,475 - #8 ;
INFO  14:00:28,476 - #6 const
INFO  14:00:28,477 - #49 int
INFO  14:00:28,477 - #49 jedan
INFO  14:00:28,477 - #7 =
INFO  14:00:28,477 - #48 1
INFO  14:00:28,477 - #8 ;
INFO  14:00:28,477 - #6 const
INFO  14:00:28,477 - #49 int
INFO  14:00:28,477 - #49 pet
INFO  14:00:28,477 - #7 =
INFO  14:00:28,478 - #48 5
INFO  14:00:28,478 - #8 ;
INFO  14:00:28,478 - #49 int
INFO  14:00:28,478 - #49 niz
INFO  14:00:28,478 - #10 [
INFO  14:00:28,478 - #11 ]
INFO  14:00:28,478 - #9 ,
INFO  14:00:28,478 - #49 niz2
INFO  14:00:28,478 - #10 [
INFO  14:00:28,479 - #11 ]
INFO  14:00:28,479 - #8 ;
INFO  14:00:28,479 - #49 char
INFO  14:00:28,479 - #49 nizch
INFO  14:00:28,479 - #10 [
INFO  14:00:28,479 - #11 ]
INFO  14:00:28,479 - #8 ;
INFO  14:00:28,480 - #49 char
INFO  14:00:28,480 - #49 c
INFO  14:00:28,480 - #10 [
INFO  14:00:28,480 - #11 ]
INFO  14:00:28,480 - #8 ;
INFO  14:00:28,480 - #4 {
INFO  14:00:28,480 - #41 void
INFO  14:00:28,481 - #49 main
INFO  14:00:28,481 - #20 (
INFO  14:00:28,481 - #21 )
INFO  14:00:28,482 - #49 int
INFO  14:00:28,483 - #49 bodovi
INFO  14:00:28,483 - #8 ;
INFO  14:00:28,483 - #49 bool
INFO  14:00:28,483 - #49 bt
INFO  14:00:28,483 - #8 ;
INFO  14:00:28,483 - #4 {
INFO  14:00:28,483 - #49 bodovi
INFO  14:00:28,483 - #7 =
INFO  14:00:28,483 - #48 0
INFO  14:00:28,485 - #8 ;
INFO  14:00:28,487 - #49 nizch
INFO  14:00:28,487 - #7 =
INFO  14:00:28,487 - #29 new
INFO  14:00:28,487 - #49 char
INFO  14:00:28,488 - #10 [
INFO  14:00:28,488 - #48 3
INFO  14:00:28,488 - #11 ]
INFO  14:00:28,488 - #8 ;
INFO  14:00:28,488 - #22 print
INFO  14:00:28,488 - #20 (
INFO  14:00:28,488 - #49 nizch
INFO  14:00:28,489 - #10 [
INFO  14:00:28,490 - #48 1
INFO  14:00:28,490 - #38 *
INFO  14:00:28,490 - #50 b
INFO  14:00:28,492 - #11 ]
INFO  14:00:28,493 - #21 )
INFO  14:00:28,493 - #8 ;
INFO  14:00:28,493 - #5 }
INFO  14:00:28,494 - #5 }
INFO  14:00:28,531 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorNum(
                                     1
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  14:00:28,532 - ===================================
INFO  14:00:28,533 - Pocetak programa test301.
INFO  14:00:28,533 - Deklarisana je konstanta nula na liniji 5
INFO  14:00:28,533 - Deklarisana je konstanta jedan na liniji 6
INFO  14:00:28,533 - Deklarisana je konstanta pet na liniji 7
INFO  14:00:28,533 - Deklarisan je niz niz na liniji 9
INFO  14:00:28,533 - Deklarisan je niz niz2 na liniji 9
INFO  14:00:28,534 - Deklarisan je niz nizch na liniji 10
INFO  14:00:28,534 - Deklarisan je niz c na liniji 11
INFO  14:00:28,534 - Obradjuje se funkcija main na liniji 14
INFO  14:00:28,534 - Deklarisana je promenljiva bodovi na liniji 15
INFO  14:00:28,534 - Deklarisana je promenljiva bt na liniji 16
INFO  14:00:32,255 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  14:00:35,780 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 14:02:05,214 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 14:03:44,704 - Greska na liniji 20. Ime nizch nije int! rs.etf.pp1.symboltable.concepts.Struct@1ea9f6af
INFO  14:05:59,856 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  14:05:59,912 - #2 program
INFO  14:05:59,912 - #49 test301
INFO  14:05:59,912 - #6 const
INFO  14:05:59,913 - #49 int
INFO  14:05:59,913 - #49 nula
INFO  14:05:59,914 - #7 =
INFO  14:05:59,914 - #48 0
INFO  14:05:59,914 - #8 ;
INFO  14:05:59,915 - #6 const
INFO  14:05:59,915 - #49 int
INFO  14:05:59,915 - #49 jedan
INFO  14:05:59,916 - #7 =
INFO  14:05:59,916 - #48 1
INFO  14:05:59,916 - #8 ;
INFO  14:05:59,916 - #6 const
INFO  14:05:59,916 - #49 int
INFO  14:05:59,916 - #49 pet
INFO  14:05:59,916 - #7 =
INFO  14:05:59,917 - #48 5
INFO  14:05:59,917 - #8 ;
INFO  14:05:59,917 - #49 int
INFO  14:05:59,917 - #49 niz
INFO  14:05:59,917 - #10 [
INFO  14:05:59,917 - #11 ]
INFO  14:05:59,917 - #9 ,
INFO  14:05:59,918 - #49 niz2
INFO  14:05:59,918 - #10 [
INFO  14:05:59,918 - #11 ]
INFO  14:05:59,918 - #8 ;
INFO  14:05:59,918 - #49 char
INFO  14:05:59,918 - #49 nizch
INFO  14:05:59,919 - #10 [
INFO  14:05:59,919 - #11 ]
INFO  14:05:59,919 - #8 ;
INFO  14:05:59,919 - #49 char
INFO  14:05:59,919 - #49 c
INFO  14:05:59,919 - #10 [
INFO  14:05:59,919 - #11 ]
INFO  14:05:59,919 - #8 ;
INFO  14:05:59,919 - #4 {
INFO  14:05:59,919 - #41 void
INFO  14:05:59,920 - #49 main
INFO  14:05:59,920 - #20 (
INFO  14:05:59,920 - #21 )
INFO  14:05:59,921 - #49 int
INFO  14:05:59,921 - #49 bodovi
INFO  14:05:59,921 - #8 ;
INFO  14:05:59,921 - #49 bool
INFO  14:05:59,922 - #49 bt
INFO  14:05:59,922 - #8 ;
INFO  14:05:59,922 - #4 {
INFO  14:05:59,922 - #49 bodovi
INFO  14:05:59,922 - #7 =
INFO  14:05:59,922 - #48 0
INFO  14:05:59,923 - #8 ;
INFO  14:05:59,924 - #49 nizch
INFO  14:05:59,924 - #7 =
INFO  14:05:59,924 - #29 new
INFO  14:05:59,924 - #49 char
INFO  14:05:59,924 - #10 [
INFO  14:05:59,924 - #48 3
INFO  14:05:59,925 - #11 ]
INFO  14:05:59,925 - #8 ;
INFO  14:05:59,925 - #22 print
INFO  14:05:59,925 - #20 (
INFO  14:05:59,925 - #49 nizch
INFO  14:05:59,925 - #10 [
INFO  14:05:59,926 - #48 1
INFO  14:05:59,926 - #38 *
INFO  14:05:59,926 - #50 b
INFO  14:05:59,927 - #11 ]
INFO  14:05:59,928 - #21 )
INFO  14:05:59,928 - #8 ;
INFO  14:05:59,928 - #5 }
INFO  14:05:59,929 - #5 }
INFO  14:05:59,937 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorNum(
                                     1
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  14:05:59,938 - ===================================
INFO  14:05:59,938 - Pocetak programa test301.
INFO  14:05:59,938 - Deklarisana je konstanta nula na liniji 5
INFO  14:05:59,938 - Deklarisana je konstanta jedan na liniji 6
INFO  14:05:59,939 - Deklarisana je konstanta pet na liniji 7
INFO  14:05:59,939 - Deklarisan je niz niz na liniji 9
INFO  14:05:59,939 - Deklarisan je niz niz2 na liniji 9
INFO  14:05:59,939 - Deklarisan je niz nizch na liniji 10
INFO  14:05:59,939 - Deklarisan je niz c na liniji 11
INFO  14:05:59,939 - Obradjuje se funkcija main na liniji 14
INFO  14:05:59,939 - Deklarisana je promenljiva bodovi na liniji 15
INFO  14:05:59,939 - Deklarisana je promenljiva bt na liniji 16
INFO  14:05:59,939 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  14:05:59,939 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 14:05:59,940 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 14:05:59,940 - Greska na liniji 20. Ime nizch nije int! rs.etf.pp1.symboltable.concepts.Struct@120d6fe6
INFO  14:06:33,389 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  14:06:33,443 - #2 program
INFO  14:06:33,443 - #49 test301
INFO  14:06:33,443 - #6 const
INFO  14:06:33,444 - #49 int
INFO  14:06:33,444 - #49 nula
INFO  14:06:33,445 - #7 =
INFO  14:06:33,445 - #48 0
INFO  14:06:33,445 - #8 ;
INFO  14:06:33,446 - #6 const
INFO  14:06:33,447 - #49 int
INFO  14:06:33,447 - #49 jedan
INFO  14:06:33,447 - #7 =
INFO  14:06:33,447 - #48 1
INFO  14:06:33,447 - #8 ;
INFO  14:06:33,447 - #6 const
INFO  14:06:33,447 - #49 int
INFO  14:06:33,447 - #49 pet
INFO  14:06:33,448 - #7 =
INFO  14:06:33,448 - #48 5
INFO  14:06:33,448 - #8 ;
INFO  14:06:33,448 - #49 int
INFO  14:06:33,448 - #49 niz
INFO  14:06:33,448 - #10 [
INFO  14:06:33,448 - #11 ]
INFO  14:06:33,448 - #9 ,
INFO  14:06:33,449 - #49 niz2
INFO  14:06:33,449 - #10 [
INFO  14:06:33,449 - #11 ]
INFO  14:06:33,449 - #8 ;
INFO  14:06:33,449 - #49 char
INFO  14:06:33,450 - #49 nizch
INFO  14:06:33,450 - #10 [
INFO  14:06:33,450 - #11 ]
INFO  14:06:33,450 - #8 ;
INFO  14:06:33,450 - #49 char
INFO  14:06:33,450 - #49 c
INFO  14:06:33,450 - #10 [
INFO  14:06:33,450 - #11 ]
INFO  14:06:33,450 - #8 ;
INFO  14:06:33,451 - #4 {
INFO  14:06:33,451 - #41 void
INFO  14:06:33,452 - #49 main
INFO  14:06:33,453 - #20 (
INFO  14:06:33,453 - #21 )
INFO  14:06:33,454 - #49 int
INFO  14:06:33,454 - #49 bodovi
INFO  14:06:33,455 - #8 ;
INFO  14:06:33,455 - #49 bool
INFO  14:06:33,455 - #49 bt
INFO  14:06:33,455 - #8 ;
INFO  14:06:33,455 - #4 {
INFO  14:06:33,456 - #49 bodovi
INFO  14:06:33,456 - #7 =
INFO  14:06:33,456 - #48 0
INFO  14:06:33,457 - #8 ;
INFO  14:06:33,460 - #49 nizch
INFO  14:06:33,460 - #7 =
INFO  14:06:33,460 - #29 new
INFO  14:06:33,460 - #49 char
INFO  14:06:33,461 - #10 [
INFO  14:06:33,461 - #48 3
INFO  14:06:33,461 - #11 ]
INFO  14:06:33,461 - #8 ;
INFO  14:06:33,461 - #22 print
INFO  14:06:33,461 - #20 (
INFO  14:06:33,461 - #49 nizch
INFO  14:06:33,461 - #10 [
INFO  14:06:33,462 - #48 1
INFO  14:06:33,463 - #38 *
INFO  14:06:33,463 - #50 b
INFO  14:06:33,464 - #11 ]
INFO  14:06:33,464 - #21 )
INFO  14:06:33,465 - #8 ;
INFO  14:06:33,465 - #5 }
INFO  14:06:33,465 - #5 }
INFO  14:06:33,473 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           nizch
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorNum(
                                     1
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  14:06:33,474 - ===================================
INFO  14:06:33,474 - Pocetak programa test301.
INFO  14:06:33,474 - Deklarisana je konstanta nula na liniji 5
INFO  14:06:33,475 - Deklarisana je konstanta jedan na liniji 6
INFO  14:06:33,475 - Deklarisana je konstanta pet na liniji 7
INFO  14:06:33,475 - Deklarisan je niz niz na liniji 9
INFO  14:06:33,475 - Deklarisan je niz niz2 na liniji 9
INFO  14:06:33,475 - Deklarisan je niz nizch na liniji 10
INFO  14:06:33,475 - Deklarisan je niz c na liniji 11
INFO  14:06:33,475 - Obradjuje se funkcija main na liniji 14
INFO  14:06:33,476 - Deklarisana je promenljiva bodovi na liniji 15
INFO  14:06:33,476 - Deklarisana je promenljiva bt na liniji 16
INFO  14:06:33,476 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  14:06:33,476 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 14:06:33,476 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 14:06:33,476 - Greska na liniji 20. Ime nizch nije int! rs.etf.pp1.symboltable.concepts.Struct@120d6fe6
INFO  14:07:01,658 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  14:07:01,715 - #2 program
INFO  14:07:01,715 - #49 test301
INFO  14:07:01,716 - #6 const
INFO  14:07:01,716 - #49 int
INFO  14:07:01,717 - #49 nula
INFO  14:07:01,717 - #7 =
INFO  14:07:01,717 - #48 0
INFO  14:07:01,717 - #8 ;
INFO  14:07:01,718 - #6 const
INFO  14:07:01,718 - #49 int
INFO  14:07:01,719 - #49 jedan
INFO  14:07:01,719 - #7 =
INFO  14:07:01,719 - #48 1
INFO  14:07:01,719 - #8 ;
INFO  14:07:01,719 - #6 const
INFO  14:07:01,719 - #49 int
INFO  14:07:01,719 - #49 pet
INFO  14:07:01,719 - #7 =
INFO  14:07:01,719 - #48 5
INFO  14:07:01,719 - #8 ;
INFO  14:07:01,719 - #49 int
INFO  14:07:01,719 - #49 niz
INFO  14:07:01,719 - #10 [
INFO  14:07:01,720 - #11 ]
INFO  14:07:01,720 - #9 ,
INFO  14:07:01,720 - #49 niz2
INFO  14:07:01,720 - #10 [
INFO  14:07:01,720 - #11 ]
INFO  14:07:01,720 - #8 ;
INFO  14:07:01,720 - #49 char
INFO  14:07:01,720 - #49 nizch
INFO  14:07:01,721 - #10 [
INFO  14:07:01,721 - #11 ]
INFO  14:07:01,721 - #8 ;
INFO  14:07:01,721 - #49 char
INFO  14:07:01,721 - #49 c
INFO  14:07:01,721 - #10 [
INFO  14:07:01,721 - #11 ]
INFO  14:07:01,721 - #8 ;
INFO  14:07:01,721 - #4 {
INFO  14:07:01,721 - #41 void
INFO  14:07:01,722 - #49 main
INFO  14:07:01,722 - #20 (
INFO  14:07:01,722 - #21 )
INFO  14:07:01,723 - #49 int
INFO  14:07:01,723 - #49 bodovi
INFO  14:07:01,723 - #8 ;
INFO  14:07:01,723 - #49 bool
INFO  14:07:01,723 - #49 bt
INFO  14:07:01,724 - #8 ;
INFO  14:07:01,724 - #4 {
INFO  14:07:01,724 - #49 bodovi
INFO  14:07:01,724 - #7 =
INFO  14:07:01,724 - #48 0
INFO  14:07:01,725 - #8 ;
INFO  14:07:01,727 - #49 nizch
INFO  14:07:01,727 - #7 =
INFO  14:07:01,727 - #29 new
INFO  14:07:01,727 - #49 char
INFO  14:07:01,727 - #10 [
INFO  14:07:01,727 - #48 3
INFO  14:07:01,727 - #11 ]
INFO  14:07:01,727 - #8 ;
INFO  14:07:01,728 - #22 print
INFO  14:07:01,728 - #20 (
INFO  14:07:01,728 - #49 niz
INFO  14:07:01,728 - #10 [
INFO  14:07:01,729 - #48 1
INFO  14:07:01,729 - #38 *
INFO  14:07:01,729 - #50 b
INFO  14:07:01,730 - #11 ]
INFO  14:07:01,731 - #21 )
INFO  14:07:01,731 - #8 ;
INFO  14:07:01,731 - #5 }
INFO  14:07:01,732 - #5 }
INFO  14:07:01,744 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 nizch
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           char
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           niz
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorNum(
                                     1
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  14:07:01,744 - ===================================
INFO  14:07:01,744 - Pocetak programa test301.
INFO  14:07:01,745 - Deklarisana je konstanta nula na liniji 5
INFO  14:07:01,745 - Deklarisana je konstanta jedan na liniji 6
INFO  14:07:01,745 - Deklarisana je konstanta pet na liniji 7
INFO  14:07:01,745 - Deklarisan je niz niz na liniji 9
INFO  14:07:01,745 - Deklarisan je niz niz2 na liniji 9
INFO  14:07:01,745 - Deklarisan je niz nizch na liniji 10
INFO  14:07:01,745 - Deklarisan je niz c na liniji 11
INFO  14:07:01,745 - Obradjuje se funkcija main na liniji 14
INFO  14:07:01,745 - Deklarisana je promenljiva bodovi na liniji 15
INFO  14:07:01,745 - Deklarisana je promenljiva bt na liniji 16
INFO  14:07:01,746 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  14:07:01,746 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 14:07:01,746 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 14:07:01,746 - Greska na liniji 20. Ime niz nije int! rs.etf.pp1.symboltable.concepts.Struct@120d6fe6
INFO  14:09:37,856 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  14:09:37,912 - #2 program
INFO  14:09:37,912 - #49 test301
INFO  14:09:37,912 - #6 const
INFO  14:09:37,913 - #49 int
INFO  14:09:37,913 - #49 nula
INFO  14:09:37,913 - #7 =
INFO  14:09:37,913 - #48 0
INFO  14:09:37,913 - #8 ;
INFO  14:09:37,914 - #6 const
INFO  14:09:37,915 - #49 int
INFO  14:09:37,915 - #49 jedan
INFO  14:09:37,915 - #7 =
INFO  14:09:37,915 - #48 1
INFO  14:09:37,915 - #8 ;
INFO  14:09:37,915 - #6 const
INFO  14:09:37,915 - #49 int
INFO  14:09:37,915 - #49 pet
INFO  14:09:37,915 - #7 =
INFO  14:09:37,915 - #48 5
INFO  14:09:37,915 - #8 ;
INFO  14:09:37,915 - #49 int
INFO  14:09:37,916 - #49 niz
INFO  14:09:37,916 - #10 [
INFO  14:09:37,916 - #11 ]
INFO  14:09:37,916 - #9 ,
INFO  14:09:37,916 - #49 niz2
INFO  14:09:37,916 - #10 [
INFO  14:09:37,916 - #11 ]
INFO  14:09:37,916 - #8 ;
INFO  14:09:37,916 - #49 char
INFO  14:09:37,917 - #49 nizch
INFO  14:09:37,917 - #10 [
INFO  14:09:37,917 - #11 ]
INFO  14:09:37,917 - #8 ;
INFO  14:09:37,917 - #49 char
INFO  14:09:37,917 - #49 c
INFO  14:09:37,917 - #10 [
INFO  14:09:37,917 - #11 ]
INFO  14:09:37,917 - #8 ;
INFO  14:09:37,917 - #4 {
INFO  14:09:37,917 - #41 void
INFO  14:09:37,918 - #49 main
INFO  14:09:37,918 - #20 (
INFO  14:09:37,918 - #21 )
INFO  14:09:37,919 - #49 int
INFO  14:09:37,919 - #49 bodovi
INFO  14:09:37,919 - #8 ;
INFO  14:09:37,919 - #49 bool
INFO  14:09:37,919 - #49 bt
INFO  14:09:37,920 - #8 ;
INFO  14:09:37,920 - #4 {
INFO  14:09:37,920 - #49 bodovi
INFO  14:09:37,920 - #7 =
INFO  14:09:37,920 - #48 0
INFO  14:09:37,921 - #8 ;
INFO  14:09:37,922 - #49 niz
INFO  14:09:37,923 - #7 =
INFO  14:09:37,923 - #29 new
INFO  14:09:37,923 - #49 int
INFO  14:09:37,923 - #10 [
INFO  14:09:37,923 - #48 3
INFO  14:09:37,923 - #11 ]
INFO  14:09:37,923 - #8 ;
INFO  14:09:37,923 - #22 print
INFO  14:09:37,923 - #20 (
INFO  14:09:37,923 - #49 niz
INFO  14:09:37,924 - #10 [
INFO  14:09:37,924 - #48 1
INFO  14:09:37,924 - #38 *
INFO  14:09:37,925 - #50 b
INFO  14:09:37,926 - #11 ]
INFO  14:09:37,926 - #21 )
INFO  14:09:37,926 - #8 ;
INFO  14:09:37,926 - #5 }
INFO  14:09:37,927 - #5 }
INFO  14:09:37,937 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 niz
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           int
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           niz
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorNum(
                                     1
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  14:09:37,937 - ===================================
INFO  14:09:37,937 - Pocetak programa test301.
INFO  14:09:37,938 - Deklarisana je konstanta nula na liniji 5
INFO  14:09:37,938 - Deklarisana je konstanta jedan na liniji 6
INFO  14:09:37,938 - Deklarisana je konstanta pet na liniji 7
INFO  14:09:37,938 - Deklarisan je niz niz na liniji 9
INFO  14:09:37,938 - Deklarisan je niz niz2 na liniji 9
INFO  14:09:37,938 - Deklarisan je niz nizch na liniji 10
INFO  14:09:37,938 - Deklarisan je niz c na liniji 11
INFO  14:09:37,938 - Obradjuje se funkcija main na liniji 14
INFO  14:09:37,938 - Deklarisana je promenljiva bodovi na liniji 15
INFO  14:09:37,938 - Deklarisana je promenljiva bt na liniji 16
INFO  14:09:37,939 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  14:09:37,939 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 14:09:37,939 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 14:09:37,939 - Greska na liniji 20. Ime niz nije int! rs.etf.pp1.symboltable.concepts.Struct@120d6fe6
INFO  14:10:03,403 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  14:10:03,504 - #2 program
INFO  14:10:03,504 - #49 test301
INFO  14:10:03,504 - #6 const
INFO  14:10:03,506 - #49 int
INFO  14:10:03,506 - #49 nula
INFO  14:10:03,507 - #7 =
INFO  14:10:03,507 - #48 0
INFO  14:10:03,507 - #8 ;
INFO  14:10:03,508 - #6 const
INFO  14:10:03,509 - #49 int
INFO  14:10:03,509 - #49 jedan
INFO  14:10:03,509 - #7 =
INFO  14:10:03,509 - #48 1
INFO  14:10:03,509 - #8 ;
INFO  14:10:03,509 - #6 const
INFO  14:10:03,509 - #49 int
INFO  14:10:03,509 - #49 pet
INFO  14:10:03,509 - #7 =
INFO  14:10:03,509 - #48 5
INFO  14:10:03,509 - #8 ;
INFO  14:10:03,510 - #49 int
INFO  14:10:03,510 - #49 niz
INFO  14:10:03,510 - #10 [
INFO  14:10:03,510 - #11 ]
INFO  14:10:03,510 - #9 ,
INFO  14:10:03,510 - #49 niz2
INFO  14:10:03,510 - #10 [
INFO  14:10:03,510 - #11 ]
INFO  14:10:03,510 - #8 ;
INFO  14:10:03,511 - #49 char
INFO  14:10:03,511 - #49 nizch
INFO  14:10:03,511 - #10 [
INFO  14:10:03,511 - #11 ]
INFO  14:10:03,511 - #8 ;
INFO  14:10:03,511 - #49 char
INFO  14:10:03,511 - #49 c
INFO  14:10:03,511 - #10 [
INFO  14:10:03,511 - #11 ]
INFO  14:10:03,511 - #8 ;
INFO  14:10:03,512 - #4 {
INFO  14:10:03,512 - #41 void
INFO  14:10:03,512 - #49 main
INFO  14:10:03,513 - #20 (
INFO  14:10:03,513 - #21 )
INFO  14:10:03,514 - #49 int
INFO  14:10:03,514 - #49 bodovi
INFO  14:10:03,514 - #8 ;
INFO  14:10:03,514 - #49 bool
INFO  14:10:03,514 - #49 bt
INFO  14:10:03,514 - #8 ;
INFO  14:10:03,514 - #4 {
INFO  14:10:03,514 - #49 bodovi
INFO  14:10:03,515 - #7 =
INFO  14:10:03,515 - #48 0
INFO  14:10:03,516 - #8 ;
INFO  14:10:03,518 - #49 niz
INFO  14:10:03,518 - #7 =
INFO  14:10:03,518 - #29 new
INFO  14:10:03,518 - #49 int
INFO  14:10:03,518 - #10 [
INFO  14:10:03,518 - #48 3
INFO  14:10:03,518 - #11 ]
INFO  14:10:03,518 - #8 ;
INFO  14:10:03,519 - #22 print
INFO  14:10:03,519 - #20 (
INFO  14:10:03,519 - #49 niz
INFO  14:10:03,519 - #10 [
INFO  14:10:03,520 - #48 1
INFO  14:10:03,520 - #38 *
INFO  14:10:03,520 - #50 b
INFO  14:10:03,521 - #11 ]
INFO  14:10:03,522 - #21 )
INFO  14:10:03,522 - #8 ;
INFO  14:10:03,522 - #5 }
INFO  14:10:03,523 - #5 }
INFO  14:10:03,541 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 niz
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           int
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           niz
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorNum(
                                     1
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  14:10:03,542 - ===================================
INFO  14:10:03,542 - Pocetak programa test301.
INFO  14:10:03,542 - Deklarisana je konstanta nula na liniji 5
INFO  14:10:03,542 - Deklarisana je konstanta jedan na liniji 6
INFO  14:10:03,542 - Deklarisana je konstanta pet na liniji 7
INFO  14:10:03,543 - Deklarisan je niz niz na liniji 9
INFO  14:10:03,543 - Deklarisan je niz niz2 na liniji 9
INFO  14:10:03,543 - Deklarisan je niz nizch na liniji 10
INFO  14:10:03,543 - Deklarisan je niz c na liniji 11
INFO  14:10:03,543 - Obradjuje se funkcija main na liniji 14
INFO  14:10:03,543 - Deklarisana je promenljiva bodovi na liniji 15
INFO  14:10:03,543 - Deklarisana je promenljiva bt na liniji 16
INFO  14:10:03,544 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  14:10:03,544 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 14:10:03,544 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 14:10:47,169 - Greska na liniji 20. Ime niz nije int! rs.etf.pp1.symboltable.concepts.Struct@1ea9f6af
INFO  14:12:33,976 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  14:12:34,082 - #2 program
INFO  14:12:34,083 - #49 test301
INFO  14:12:34,083 - #6 const
INFO  14:12:34,085 - #49 int
INFO  14:12:34,085 - #49 nula
INFO  14:12:34,086 - #7 =
INFO  14:12:34,086 - #48 0
INFO  14:12:34,086 - #8 ;
INFO  14:12:34,087 - #6 const
INFO  14:12:34,087 - #49 int
INFO  14:12:34,088 - #49 jedan
INFO  14:12:34,088 - #7 =
INFO  14:12:34,088 - #48 1
INFO  14:12:34,088 - #8 ;
INFO  14:12:34,088 - #6 const
INFO  14:12:34,088 - #49 int
INFO  14:12:34,088 - #49 pet
INFO  14:12:34,088 - #7 =
INFO  14:12:34,088 - #48 5
INFO  14:12:34,088 - #8 ;
INFO  14:12:34,088 - #49 int
INFO  14:12:34,088 - #49 niz
INFO  14:12:34,089 - #10 [
INFO  14:12:34,089 - #11 ]
INFO  14:12:34,089 - #9 ,
INFO  14:12:34,089 - #49 niz2
INFO  14:12:34,089 - #10 [
INFO  14:12:34,089 - #11 ]
INFO  14:12:34,089 - #8 ;
INFO  14:12:34,090 - #49 char
INFO  14:12:34,090 - #49 nizch
INFO  14:12:34,090 - #10 [
INFO  14:12:34,090 - #11 ]
INFO  14:12:34,090 - #8 ;
INFO  14:12:34,090 - #49 char
INFO  14:12:34,090 - #49 c
INFO  14:12:34,090 - #10 [
INFO  14:12:34,090 - #11 ]
INFO  14:12:34,090 - #8 ;
INFO  14:12:34,091 - #4 {
INFO  14:12:34,091 - #41 void
INFO  14:12:34,092 - #49 main
INFO  14:12:34,092 - #20 (
INFO  14:12:34,092 - #21 )
INFO  14:12:34,093 - #49 int
INFO  14:12:34,093 - #49 bodovi
INFO  14:12:34,093 - #8 ;
INFO  14:12:34,094 - #49 bool
INFO  14:12:34,094 - #49 bt
INFO  14:12:34,094 - #8 ;
INFO  14:12:34,094 - #4 {
INFO  14:12:34,094 - #49 bodovi
INFO  14:12:34,094 - #7 =
INFO  14:12:34,094 - #48 0
INFO  14:12:34,095 - #8 ;
INFO  14:12:34,097 - #49 niz
INFO  14:12:34,097 - #7 =
INFO  14:12:34,097 - #29 new
INFO  14:12:34,097 - #49 int
INFO  14:12:34,097 - #10 [
INFO  14:12:34,097 - #48 3
INFO  14:12:34,097 - #11 ]
INFO  14:12:34,097 - #8 ;
INFO  14:12:34,097 - #22 print
INFO  14:12:34,098 - #20 (
INFO  14:12:34,098 - #49 niz
INFO  14:12:34,098 - #10 [
INFO  14:12:34,098 - #48 1
INFO  14:12:34,098 - #38 *
INFO  14:12:34,099 - #50 b
INFO  14:12:34,100 - #11 ]
INFO  14:12:34,100 - #21 )
INFO  14:12:34,100 - #8 ;
INFO  14:12:34,100 - #5 }
INFO  14:12:34,101 - #5 }
INFO  14:12:34,119 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 niz
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           int
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           niz
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorNum(
                                     1
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  14:12:34,120 - ===================================
INFO  14:12:34,121 - Pocetak programa test301.
INFO  14:12:34,121 - Deklarisana je konstanta nula na liniji 5
INFO  14:12:34,121 - Deklarisana je konstanta jedan na liniji 6
INFO  14:12:34,121 - Deklarisana je konstanta pet na liniji 7
INFO  14:12:34,121 - Deklarisan je niz niz na liniji 9
INFO  14:12:34,122 - Deklarisan je niz niz2 na liniji 9
INFO  14:12:34,122 - Deklarisan je niz nizch na liniji 10
INFO  14:12:34,122 - Deklarisan je niz c na liniji 11
INFO  14:12:34,122 - Obradjuje se funkcija main na liniji 14
INFO  14:12:34,122 - Deklarisana je promenljiva bodovi na liniji 15
INFO  14:12:34,122 - Deklarisana je promenljiva bt na liniji 16
INFO  14:12:34,122 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  14:12:34,123 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 14:12:34,123 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 14:12:40,703 - Greska na liniji 20. Ime niz nije int! rs.etf.pp1.symboltable.concepts.Struct@188715b5
INFO  14:13:21,075 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  14:13:21,125 - #2 program
INFO  14:13:21,125 - #49 test301
INFO  14:13:21,125 - #6 const
INFO  14:13:21,126 - #49 int
INFO  14:13:21,126 - #49 nula
INFO  14:13:21,127 - #7 =
INFO  14:13:21,127 - #48 0
INFO  14:13:21,127 - #8 ;
INFO  14:13:21,128 - #6 const
INFO  14:13:21,128 - #49 int
INFO  14:13:21,128 - #49 jedan
INFO  14:13:21,128 - #7 =
INFO  14:13:21,128 - #48 1
INFO  14:13:21,128 - #8 ;
INFO  14:13:21,128 - #6 const
INFO  14:13:21,128 - #49 int
INFO  14:13:21,128 - #49 pet
INFO  14:13:21,129 - #7 =
INFO  14:13:21,129 - #48 5
INFO  14:13:21,129 - #8 ;
INFO  14:13:21,129 - #49 int
INFO  14:13:21,129 - #49 niz
INFO  14:13:21,129 - #10 [
INFO  14:13:21,129 - #11 ]
INFO  14:13:21,129 - #9 ,
INFO  14:13:21,129 - #49 niz2
INFO  14:13:21,129 - #10 [
INFO  14:13:21,129 - #11 ]
INFO  14:13:21,129 - #8 ;
INFO  14:13:21,130 - #49 char
INFO  14:13:21,130 - #49 nizch
INFO  14:13:21,130 - #10 [
INFO  14:13:21,130 - #11 ]
INFO  14:13:21,130 - #8 ;
INFO  14:13:21,130 - #49 char
INFO  14:13:21,130 - #49 c
INFO  14:13:21,130 - #10 [
INFO  14:13:21,130 - #11 ]
INFO  14:13:21,130 - #8 ;
INFO  14:13:21,130 - #4 {
INFO  14:13:21,131 - #41 void
INFO  14:13:21,131 - #49 main
INFO  14:13:21,131 - #20 (
INFO  14:13:21,132 - #21 )
INFO  14:13:21,132 - #49 int
INFO  14:13:21,133 - #49 bodovi
INFO  14:13:21,133 - #8 ;
INFO  14:13:21,133 - #49 bool
INFO  14:13:21,133 - #49 bt
INFO  14:13:21,133 - #8 ;
INFO  14:13:21,133 - #4 {
INFO  14:13:21,133 - #49 bodovi
INFO  14:13:21,133 - #7 =
INFO  14:13:21,133 - #48 0
INFO  14:13:21,134 - #8 ;
INFO  14:13:21,135 - #49 niz
INFO  14:13:21,135 - #7 =
INFO  14:13:21,135 - #29 new
INFO  14:13:21,135 - #49 int
INFO  14:13:21,136 - #10 [
INFO  14:13:21,136 - #48 3
INFO  14:13:21,136 - #11 ]
INFO  14:13:21,136 - #8 ;
INFO  14:13:21,136 - #22 print
INFO  14:13:21,136 - #20 (
INFO  14:13:21,136 - #49 niz
INFO  14:13:21,137 - #10 [
INFO  14:13:21,138 - #48 1
INFO  14:13:21,138 - #38 *
INFO  14:13:21,138 - #50 b
INFO  14:13:21,139 - #11 ]
INFO  14:13:21,139 - #21 )
INFO  14:13:21,139 - #8 ;
INFO  14:13:21,139 - #5 }
INFO  14:13:21,140 - #5 }
INFO  14:13:21,148 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 niz
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           int
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           niz
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorNum(
                                     1
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  14:13:21,149 - ===================================
INFO  14:13:21,149 - Pocetak programa test301.
INFO  14:13:21,149 - Deklarisana je konstanta nula na liniji 5
INFO  14:13:21,149 - Deklarisana je konstanta jedan na liniji 6
INFO  14:13:21,149 - Deklarisana je konstanta pet na liniji 7
INFO  14:13:21,149 - Deklarisan je niz niz na liniji 9
INFO  14:13:21,149 - Deklarisan je niz niz2 na liniji 9
INFO  14:13:21,150 - Deklarisan je niz nizch na liniji 10
INFO  14:13:21,150 - Deklarisan je niz c na liniji 11
INFO  14:13:21,150 - Obradjuje se funkcija main na liniji 14
INFO  14:13:21,150 - Deklarisana je promenljiva bodovi na liniji 15
INFO  14:13:21,150 - Deklarisana je promenljiva bt na liniji 16
INFO  14:13:21,150 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  14:13:21,150 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 14:13:21,150 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 14:13:21,150 - Greska na liniji 20. Ime niz nije int! rs.etf.pp1.symboltable.concepts.Struct@120d6fe6
INFO  14:14:39,767 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  14:14:39,823 - #2 program
INFO  14:14:39,823 - #49 test301
INFO  14:14:39,823 - #6 const
INFO  14:14:39,825 - #49 int
INFO  14:14:39,825 - #49 nula
INFO  14:14:39,826 - #7 =
INFO  14:14:39,826 - #48 0
INFO  14:14:39,826 - #8 ;
INFO  14:14:39,827 - #6 const
INFO  14:14:39,828 - #49 int
INFO  14:14:39,828 - #49 jedan
INFO  14:14:39,828 - #7 =
INFO  14:14:39,828 - #48 1
INFO  14:14:39,828 - #8 ;
INFO  14:14:39,828 - #6 const
INFO  14:14:39,828 - #49 int
INFO  14:14:39,828 - #49 pet
INFO  14:14:39,829 - #7 =
INFO  14:14:39,829 - #48 5
INFO  14:14:39,829 - #8 ;
INFO  14:14:39,829 - #49 int
INFO  14:14:39,829 - #49 niz
INFO  14:14:39,829 - #10 [
INFO  14:14:39,829 - #11 ]
INFO  14:14:39,829 - #9 ,
INFO  14:14:39,830 - #49 niz2
INFO  14:14:39,830 - #10 [
INFO  14:14:39,830 - #11 ]
INFO  14:14:39,830 - #8 ;
INFO  14:14:39,830 - #49 char
INFO  14:14:39,831 - #49 nizch
INFO  14:14:39,831 - #10 [
INFO  14:14:39,831 - #11 ]
INFO  14:14:39,831 - #8 ;
INFO  14:14:39,831 - #49 char
INFO  14:14:39,831 - #49 c
INFO  14:14:39,831 - #10 [
INFO  14:14:39,831 - #11 ]
INFO  14:14:39,831 - #8 ;
INFO  14:14:39,832 - #4 {
INFO  14:14:39,832 - #41 void
INFO  14:14:39,833 - #49 main
INFO  14:14:39,833 - #20 (
INFO  14:14:39,833 - #21 )
INFO  14:14:39,834 - #49 int
INFO  14:14:39,834 - #49 bodovi
INFO  14:14:39,834 - #8 ;
INFO  14:14:39,835 - #49 bool
INFO  14:14:39,835 - #49 bt
INFO  14:14:39,835 - #8 ;
INFO  14:14:39,835 - #4 {
INFO  14:14:39,835 - #49 bodovi
INFO  14:14:39,835 - #7 =
INFO  14:14:39,835 - #48 0
INFO  14:14:39,837 - #8 ;
INFO  14:14:39,838 - #49 niz
INFO  14:14:39,839 - #7 =
INFO  14:14:39,839 - #29 new
INFO  14:14:39,839 - #49 int
INFO  14:14:39,839 - #10 [
INFO  14:14:39,839 - #48 3
INFO  14:14:39,839 - #11 ]
INFO  14:14:39,839 - #8 ;
INFO  14:14:39,840 - #22 print
INFO  14:14:39,840 - #20 (
INFO  14:14:39,840 - #49 niz
INFO  14:14:39,840 - #10 [
INFO  14:14:39,841 - #48 1
INFO  14:14:39,841 - #38 *
INFO  14:14:39,841 - #50 b
INFO  14:14:39,843 - #11 ]
INFO  14:14:39,843 - #21 )
INFO  14:14:39,843 - #8 ;
INFO  14:14:39,843 - #5 }
INFO  14:14:39,844 - #5 }
INFO  14:14:39,852 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 niz
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           int
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           niz
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorNum(
                                     1
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  14:14:39,852 - ===================================
INFO  14:14:39,853 - Pocetak programa test301.
INFO  14:14:39,853 - Deklarisana je konstanta nula na liniji 5
INFO  14:14:39,853 - Deklarisana je konstanta jedan na liniji 6
INFO  14:14:39,853 - Deklarisana je konstanta pet na liniji 7
INFO  14:14:39,853 - Deklarisan je niz niz na liniji 9
INFO  14:14:39,853 - Deklarisan je niz niz2 na liniji 9
INFO  14:14:39,853 - Deklarisan je niz nizch na liniji 10
INFO  14:14:39,853 - Deklarisan je niz c na liniji 11
INFO  14:14:39,853 - Obradjuje se funkcija main na liniji 14
INFO  14:14:39,853 - Deklarisana je promenljiva bodovi na liniji 15
INFO  14:14:39,854 - Deklarisana je promenljiva bt na liniji 16
INFO  14:14:39,854 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  14:14:39,854 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 14:14:39,854 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 14:14:39,854 - Greska na liniji 20. Ime niz nije int!
INFO  14:15:08,576 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  14:15:08,660 - #2 program
INFO  14:15:08,661 - #49 test301
INFO  14:15:08,661 - #6 const
INFO  14:15:08,662 - #49 int
INFO  14:15:08,662 - #49 nula
INFO  14:15:08,663 - #7 =
INFO  14:15:08,663 - #48 0
INFO  14:15:08,663 - #8 ;
INFO  14:15:08,664 - #6 const
INFO  14:15:08,665 - #49 int
INFO  14:15:08,665 - #49 jedan
INFO  14:15:08,665 - #7 =
INFO  14:15:08,665 - #48 1
INFO  14:15:08,665 - #8 ;
INFO  14:15:08,665 - #6 const
INFO  14:15:08,665 - #49 int
INFO  14:15:08,665 - #49 pet
INFO  14:15:08,665 - #7 =
INFO  14:15:08,666 - #48 5
INFO  14:15:08,666 - #8 ;
INFO  14:15:08,666 - #49 int
INFO  14:15:08,666 - #49 niz
INFO  14:15:08,666 - #10 [
INFO  14:15:08,666 - #11 ]
INFO  14:15:08,666 - #9 ,
INFO  14:15:08,666 - #49 niz2
INFO  14:15:08,666 - #10 [
INFO  14:15:08,667 - #11 ]
INFO  14:15:08,667 - #8 ;
INFO  14:15:08,667 - #49 char
INFO  14:15:08,667 - #49 nizch
INFO  14:15:08,667 - #10 [
INFO  14:15:08,668 - #11 ]
INFO  14:15:08,668 - #8 ;
INFO  14:15:08,668 - #49 char
INFO  14:15:08,668 - #49 c
INFO  14:15:08,668 - #10 [
INFO  14:15:08,668 - #11 ]
INFO  14:15:08,668 - #8 ;
INFO  14:15:08,668 - #4 {
INFO  14:15:08,668 - #41 void
INFO  14:15:08,669 - #49 main
INFO  14:15:08,669 - #20 (
INFO  14:15:08,670 - #21 )
INFO  14:15:08,670 - #49 int
INFO  14:15:08,671 - #49 bodovi
INFO  14:15:08,671 - #8 ;
INFO  14:15:08,671 - #49 bool
INFO  14:15:08,671 - #49 bt
INFO  14:15:08,671 - #8 ;
INFO  14:15:08,671 - #4 {
INFO  14:15:08,671 - #49 bodovi
INFO  14:15:08,671 - #7 =
INFO  14:15:08,671 - #48 0
INFO  14:15:08,673 - #8 ;
INFO  14:15:08,674 - #49 niz
INFO  14:15:08,674 - #7 =
INFO  14:15:08,674 - #29 new
INFO  14:15:08,674 - #49 int
INFO  14:15:08,674 - #10 [
INFO  14:15:08,675 - #48 3
INFO  14:15:08,675 - #11 ]
INFO  14:15:08,675 - #8 ;
INFO  14:15:08,675 - #22 print
INFO  14:15:08,675 - #20 (
INFO  14:15:08,675 - #49 niz
INFO  14:15:08,675 - #10 [
INFO  14:15:08,676 - #48 1
INFO  14:15:08,676 - #38 *
INFO  14:15:08,676 - #50 b
INFO  14:15:08,677 - #11 ]
INFO  14:15:08,677 - #21 )
INFO  14:15:08,678 - #8 ;
INFO  14:15:08,678 - #5 }
INFO  14:15:08,679 - #5 }
INFO  14:15:08,695 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 niz
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           int
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           niz
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorNum(
                                     1
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  14:15:08,696 - ===================================
INFO  14:15:08,696 - Pocetak programa test301.
INFO  14:15:08,696 - Deklarisana je konstanta nula na liniji 5
INFO  14:15:08,697 - Deklarisana je konstanta jedan na liniji 6
INFO  14:15:08,697 - Deklarisana je konstanta pet na liniji 7
INFO  14:15:08,697 - Deklarisan je niz niz na liniji 9
INFO  14:15:08,697 - Deklarisan je niz niz2 na liniji 9
INFO  14:15:08,698 - Deklarisan je niz nizch na liniji 10
INFO  14:15:08,698 - Deklarisan je niz c na liniji 11
INFO  14:15:08,698 - Obradjuje se funkcija main na liniji 14
INFO  14:15:08,698 - Deklarisana je promenljiva bodovi na liniji 15
INFO  14:15:08,698 - Deklarisana je promenljiva bt na liniji 16
INFO  14:15:08,698 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  14:15:08,699 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 14:15:08,699 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 14:15:18,356 - Greska na liniji 20. Ime niz nije int!
INFO  14:18:08,021 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  14:18:08,079 - #2 program
INFO  14:18:08,079 - #49 test301
INFO  14:18:08,079 - #6 const
INFO  14:18:08,080 - #49 int
INFO  14:18:08,080 - #49 nula
INFO  14:18:08,081 - #7 =
INFO  14:18:08,081 - #48 0
INFO  14:18:08,081 - #8 ;
INFO  14:18:08,082 - #6 const
INFO  14:18:08,082 - #49 int
INFO  14:18:08,082 - #49 jedan
INFO  14:18:08,082 - #7 =
INFO  14:18:08,083 - #48 1
INFO  14:18:08,083 - #8 ;
INFO  14:18:08,083 - #6 const
INFO  14:18:08,083 - #49 int
INFO  14:18:08,083 - #49 pet
INFO  14:18:08,083 - #7 =
INFO  14:18:08,083 - #48 5
INFO  14:18:08,083 - #8 ;
INFO  14:18:08,083 - #49 int
INFO  14:18:08,083 - #49 niz
INFO  14:18:08,083 - #10 [
INFO  14:18:08,083 - #11 ]
INFO  14:18:08,083 - #9 ,
INFO  14:18:08,084 - #49 niz2
INFO  14:18:08,084 - #10 [
INFO  14:18:08,084 - #11 ]
INFO  14:18:08,084 - #8 ;
INFO  14:18:08,084 - #49 char
INFO  14:18:08,084 - #49 nizch
INFO  14:18:08,085 - #10 [
INFO  14:18:08,085 - #11 ]
INFO  14:18:08,085 - #8 ;
INFO  14:18:08,085 - #49 char
INFO  14:18:08,085 - #49 c
INFO  14:18:08,085 - #10 [
INFO  14:18:08,085 - #11 ]
INFO  14:18:08,085 - #8 ;
INFO  14:18:08,085 - #4 {
INFO  14:18:08,085 - #41 void
INFO  14:18:08,086 - #49 main
INFO  14:18:08,086 - #20 (
INFO  14:18:08,087 - #21 )
INFO  14:18:08,087 - #49 int
INFO  14:18:08,087 - #49 bodovi
INFO  14:18:08,088 - #8 ;
INFO  14:18:08,088 - #49 bool
INFO  14:18:08,088 - #49 bt
INFO  14:18:08,088 - #8 ;
INFO  14:18:08,088 - #4 {
INFO  14:18:08,089 - #49 bodovi
INFO  14:18:08,089 - #7 =
INFO  14:18:08,089 - #48 0
INFO  14:18:08,090 - #8 ;
INFO  14:18:08,092 - #49 niz
INFO  14:18:08,092 - #7 =
INFO  14:18:08,092 - #29 new
INFO  14:18:08,092 - #49 int
INFO  14:18:08,093 - #10 [
INFO  14:18:08,093 - #48 3
INFO  14:18:08,093 - #11 ]
INFO  14:18:08,093 - #8 ;
INFO  14:18:08,093 - #22 print
INFO  14:18:08,093 - #20 (
INFO  14:18:08,093 - #49 niz
INFO  14:18:08,093 - #10 [
INFO  14:18:08,094 - #48 1
INFO  14:18:08,094 - #38 *
INFO  14:18:08,095 - #50 b
INFO  14:18:08,096 - #11 ]
INFO  14:18:08,096 - #21 )
INFO  14:18:08,096 - #8 ;
INFO  14:18:08,096 - #5 }
INFO  14:18:08,097 - #5 }
INFO  14:18:08,107 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 niz
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           int
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           niz
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorNum(
                                     1
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  14:18:08,107 - ===================================
INFO  14:18:08,107 - Pocetak programa test301.
INFO  14:18:08,108 - Deklarisana je konstanta nula na liniji 5
INFO  14:18:08,108 - Deklarisana je konstanta jedan na liniji 6
INFO  14:18:08,108 - Deklarisana je konstanta pet na liniji 7
INFO  14:18:08,108 - Deklarisan je niz niz na liniji 9
INFO  14:18:08,108 - Deklarisan je niz niz2 na liniji 9
INFO  14:18:08,108 - Deklarisan je niz nizch na liniji 10
INFO  14:18:08,108 - Deklarisan je niz c na liniji 11
INFO  14:18:08,108 - Obradjuje se funkcija main na liniji 14
INFO  14:18:08,108 - Deklarisana je promenljiva bodovi na liniji 15
INFO  14:18:08,108 - Deklarisana je promenljiva bt na liniji 16
INFO  14:18:08,108 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  14:18:08,109 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 14:18:08,109 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 14:18:08,109 - Greska na liniji 20. Ime niz nije int!
INFO  14:18:56,455 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  14:18:56,507 - #2 program
INFO  14:18:56,507 - #49 test301
INFO  14:18:56,508 - #6 const
INFO  14:18:56,508 - #49 int
INFO  14:18:56,509 - #49 nula
INFO  14:18:56,509 - #7 =
INFO  14:18:56,509 - #48 0
INFO  14:18:56,509 - #8 ;
INFO  14:18:56,510 - #6 const
INFO  14:18:56,510 - #49 int
INFO  14:18:56,510 - #49 jedan
INFO  14:18:56,510 - #7 =
INFO  14:18:56,510 - #48 1
INFO  14:18:56,511 - #8 ;
INFO  14:18:56,511 - #6 const
INFO  14:18:56,511 - #49 int
INFO  14:18:56,511 - #49 pet
INFO  14:18:56,511 - #7 =
INFO  14:18:56,511 - #48 5
INFO  14:18:56,511 - #8 ;
INFO  14:18:56,511 - #49 int
INFO  14:18:56,511 - #49 niz
INFO  14:18:56,511 - #10 [
INFO  14:18:56,511 - #11 ]
INFO  14:18:56,511 - #9 ,
INFO  14:18:56,512 - #49 niz2
INFO  14:18:56,512 - #10 [
INFO  14:18:56,512 - #11 ]
INFO  14:18:56,512 - #8 ;
INFO  14:18:56,512 - #49 char
INFO  14:18:56,512 - #49 nizch
INFO  14:18:56,512 - #10 [
INFO  14:18:56,512 - #11 ]
INFO  14:18:56,513 - #8 ;
INFO  14:18:56,513 - #49 char
INFO  14:18:56,513 - #49 c
INFO  14:18:56,513 - #10 [
INFO  14:18:56,513 - #11 ]
INFO  14:18:56,513 - #8 ;
INFO  14:18:56,513 - #4 {
INFO  14:18:56,513 - #41 void
INFO  14:18:56,514 - #49 main
INFO  14:18:56,514 - #20 (
INFO  14:18:56,515 - #21 )
INFO  14:18:56,515 - #49 int
INFO  14:18:56,515 - #49 bodovi
INFO  14:18:56,515 - #8 ;
INFO  14:18:56,516 - #49 bool
INFO  14:18:56,516 - #49 bt
INFO  14:18:56,516 - #8 ;
INFO  14:18:56,516 - #4 {
INFO  14:18:56,516 - #49 bodovi
INFO  14:18:56,516 - #7 =
INFO  14:18:56,516 - #48 0
INFO  14:18:56,517 - #8 ;
INFO  14:18:56,518 - #49 niz
INFO  14:18:56,518 - #7 =
INFO  14:18:56,518 - #29 new
INFO  14:18:56,518 - #49 int
INFO  14:18:56,519 - #10 [
INFO  14:18:56,519 - #48 3
INFO  14:18:56,519 - #11 ]
INFO  14:18:56,519 - #8 ;
INFO  14:18:56,519 - #22 print
INFO  14:18:56,519 - #20 (
INFO  14:18:56,519 - #49 niz
INFO  14:18:56,519 - #10 [
INFO  14:18:56,521 - #48 1
INFO  14:18:56,521 - #38 *
INFO  14:18:56,521 - #50 b
INFO  14:18:56,522 - #11 ]
INFO  14:18:56,522 - #21 )
INFO  14:18:56,522 - #8 ;
INFO  14:18:56,522 - #5 }
INFO  14:18:56,523 - #5 }
INFO  14:18:56,535 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 niz
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           int
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           niz
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorNum(
                                     1
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  14:18:56,535 - ===================================
INFO  14:18:56,536 - Pocetak programa test301.
INFO  14:18:56,536 - Deklarisana je konstanta nula na liniji 5
INFO  14:18:56,536 - Deklarisana je konstanta jedan na liniji 6
INFO  14:18:56,536 - Deklarisana je konstanta pet na liniji 7
INFO  14:18:56,536 - Deklarisan je niz niz na liniji 9
INFO  14:18:56,536 - Deklarisan je niz niz2 na liniji 9
INFO  14:18:56,536 - Deklarisan je niz nizch na liniji 10
INFO  14:18:56,536 - Deklarisan je niz c na liniji 11
INFO  14:18:56,536 - Obradjuje se funkcija main na liniji 14
INFO  14:18:56,536 - Deklarisana je promenljiva bodovi na liniji 15
INFO  14:18:56,537 - Deklarisana je promenljiva bt na liniji 16
INFO  14:18:56,537 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  14:18:56,537 - Designator i expr su odgovarajuceg tipa na liniji 19
ERROR 14:18:56,537 - Greska na liniji 20, operandi nisu odgovarajuci tipovi
ERROR 14:18:56,537 - Greska na liniji 20. Ime niz nije int!
ERROR 14:18:56,537 - Greska na liniji 20, neodgovarajuci operand instrukcije PRINT
INFO  14:18:56,537 - Obradjena funkcija PRINT na liniji 20
INFO  14:18:56,537 - ===================================
ERROR 14:18:56,538 - Parsiranje NIJE uspesno zavrseno!
INFO  14:19:56,363 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  14:19:56,417 - #2 program
INFO  14:19:56,417 - #49 test301
INFO  14:19:56,417 - #6 const
INFO  14:19:56,418 - #49 int
INFO  14:19:56,418 - #49 nula
INFO  14:19:56,419 - #7 =
INFO  14:19:56,419 - #48 0
INFO  14:19:56,419 - #8 ;
INFO  14:19:56,420 - #6 const
INFO  14:19:56,420 - #49 int
INFO  14:19:56,420 - #49 jedan
INFO  14:19:56,420 - #7 =
INFO  14:19:56,420 - #48 1
INFO  14:19:56,420 - #8 ;
INFO  14:19:56,421 - #6 const
INFO  14:19:56,421 - #49 int
INFO  14:19:56,421 - #49 pet
INFO  14:19:56,421 - #7 =
INFO  14:19:56,421 - #48 5
INFO  14:19:56,421 - #8 ;
INFO  14:19:56,421 - #49 int
INFO  14:19:56,421 - #49 niz
INFO  14:19:56,422 - #10 [
INFO  14:19:56,422 - #11 ]
INFO  14:19:56,422 - #9 ,
INFO  14:19:56,422 - #49 niz2
INFO  14:19:56,422 - #10 [
INFO  14:19:56,422 - #11 ]
INFO  14:19:56,422 - #8 ;
INFO  14:19:56,422 - #49 char
INFO  14:19:56,423 - #49 nizch
INFO  14:19:56,423 - #10 [
INFO  14:19:56,423 - #11 ]
INFO  14:19:56,423 - #8 ;
INFO  14:19:56,423 - #49 char
INFO  14:19:56,423 - #49 c
INFO  14:19:56,423 - #10 [
INFO  14:19:56,423 - #11 ]
INFO  14:19:56,423 - #8 ;
INFO  14:19:56,423 - #4 {
INFO  14:19:56,424 - #41 void
INFO  14:19:56,424 - #49 main
INFO  14:19:56,425 - #20 (
INFO  14:19:56,425 - #21 )
INFO  14:19:56,426 - #49 int
INFO  14:19:56,426 - #49 bodovi
INFO  14:19:56,426 - #8 ;
INFO  14:19:56,426 - #49 bool
INFO  14:19:56,426 - #49 bt
INFO  14:19:56,426 - #8 ;
INFO  14:19:56,426 - #4 {
INFO  14:19:56,426 - #49 bodovi
INFO  14:19:56,426 - #7 =
INFO  14:19:56,427 - #48 0
INFO  14:19:56,427 - #8 ;
INFO  14:19:56,429 - #49 niz
INFO  14:19:56,429 - #7 =
INFO  14:19:56,429 - #29 new
INFO  14:19:56,429 - #49 int
INFO  14:19:56,429 - #10 [
INFO  14:19:56,429 - #48 3
INFO  14:19:56,429 - #11 ]
INFO  14:19:56,429 - #8 ;
INFO  14:19:56,429 - #22 print
INFO  14:19:56,430 - #20 (
INFO  14:19:56,430 - #49 niz
INFO  14:19:56,430 - #10 [
INFO  14:19:56,431 - #48 1
INFO  14:19:56,431 - #38 *
INFO  14:19:56,431 - #49 bodovi
INFO  14:19:56,432 - #11 ]
INFO  14:19:56,432 - #21 )
INFO  14:19:56,432 - #8 ;
INFO  14:19:56,432 - #5 }
INFO  14:19:56,433 - #5 }
INFO  14:19:56,441 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bodovi
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             bool
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               bt
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 niz
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           int
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorExpr(
                          DesignatorName(
                           niz
                          ) [DesignatorName]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopList(
                                  MulopEnd(
                                    FactorNum(
                                     1
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                  Star(
                                  ) [Star]
                                  FactorDesignator(
                                    DesignatorIdent(
                                     bodovi
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopList]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorExpr]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  14:19:56,441 - ===================================
INFO  14:19:56,442 - Pocetak programa test301.
INFO  14:19:56,442 - Deklarisana je konstanta nula na liniji 5
INFO  14:19:56,442 - Deklarisana je konstanta jedan na liniji 6
INFO  14:19:56,442 - Deklarisana je konstanta pet na liniji 7
INFO  14:19:56,442 - Deklarisan je niz niz na liniji 9
INFO  14:19:56,442 - Deklarisan je niz niz2 na liniji 9
INFO  14:19:56,442 - Deklarisan je niz nizch na liniji 10
INFO  14:19:56,442 - Deklarisan je niz c na liniji 11
INFO  14:19:56,442 - Obradjuje se funkcija main na liniji 14
INFO  14:19:56,442 - Deklarisana je promenljiva bodovi na liniji 15
INFO  14:19:56,443 - Deklarisana je promenljiva bt na liniji 16
INFO  14:19:56,443 - Designator i expr su odgovarajuceg tipa na liniji 18
INFO  14:19:56,443 - Designator i expr su odgovarajuceg tipa na liniji 19
INFO  14:19:56,443 - Kreiran/promenjen element niza niz
INFO  14:19:56,443 - Obradjena funkcija PRINT na liniji 20
INFO  14:19:56,443 - ===================================
INFO  14:19:56,444 - Parsiranje uspesno zavrseno!
