INFO  11:26:43,032 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  11:26:43,091 - #2 program
INFO  11:26:43,091 - #49 test301
INFO  11:26:43,091 - #6 const
INFO  11:26:43,092 - #49 int
INFO  11:26:43,093 - #49 nula
INFO  11:26:43,093 - #7 =
INFO  11:26:43,093 - #48 0
INFO  11:26:43,093 - #8 ;
INFO  11:26:43,094 - #6 const
INFO  11:26:43,094 - #49 int
INFO  11:26:43,094 - #49 jedan
INFO  11:26:43,094 - #7 =
INFO  11:26:43,094 - #48 1
INFO  11:26:43,094 - #8 ;
INFO  11:26:43,094 - #6 const
INFO  11:26:43,095 - #49 int
INFO  11:26:43,095 - #49 pet
INFO  11:26:43,095 - #7 =
INFO  11:26:43,095 - #48 5
INFO  11:26:43,095 - #8 ;
INFO  11:26:43,095 - #4 {
INFO  11:26:43,095 - #41 void
INFO  11:26:43,096 - #49 main
INFO  11:26:43,096 - #20 (
INFO  11:26:43,096 - #21 )
INFO  11:26:43,097 - #49 int
INFO  11:26:43,097 - #49 i
INFO  11:26:43,097 - #9 ,
INFO  11:26:43,098 - #49 y
INFO  11:26:43,098 - #9 ,
INFO  11:26:43,098 - #49 z
INFO  11:26:43,098 - #8 ;
INFO  11:26:43,098 - #4 {
INFO  11:26:43,098 - #49 i
INFO  11:26:43,099 - #7 =
INFO  11:26:43,099 - #48 1
INFO  11:26:43,099 - #8 ;
INFO  11:26:43,101 - #49 y
INFO  11:26:43,101 - #7 =
INFO  11:26:43,101 - #48 0
INFO  11:26:43,101 - #8 ;
INFO  11:26:43,101 - #23 for
INFO  11:26:43,101 - #20 (
INFO  11:26:43,102 - #8 ;
INFO  11:26:43,103 - #8 ;
INFO  11:26:43,104 - #21 )
INFO  11:26:43,104 - #4 {
INFO  11:26:43,104 - #14 if
INFO  11:26:43,104 - #20 (
INFO  11:26:43,104 - #49 i
INFO  11:26:43,105 - #35 <
INFO  11:26:43,105 - #48 3
INFO  11:26:43,106 - #21 )
INFO  11:26:43,107 - #4 {
INFO  11:26:43,107 - #22 print
INFO  11:26:43,107 - #20 (
INFO  11:26:43,108 - #50 u
INFO  11:26:43,108 - #21 )
INFO  11:26:43,108 - #8 ;
INFO  11:26:43,108 - #14 if
INFO  11:26:43,108 - #20 (
INFO  11:26:43,108 - #49 y
INFO  11:26:43,108 - #31 ==
INFO  11:26:43,108 - #48 0
INFO  11:26:43,109 - #21 )
INFO  11:26:43,109 - #4 {
INFO  11:26:43,109 - #49 y
INFO  11:26:43,109 - #24 ++
INFO  11:26:43,109 - #8 ;
INFO  11:26:43,110 - #17 continue
INFO  11:26:43,110 - #8 ;
INFO  11:26:43,110 - #5 }
INFO  11:26:43,111 - #49 i
INFO  11:26:43,111 - #24 ++
INFO  11:26:43,112 - #8 ;
INFO  11:26:43,112 - #17 continue
INFO  11:26:43,112 - #8 ;
INFO  11:26:43,112 - #5 }
INFO  11:26:43,112 - #5 }
INFO  11:26:43,112 - #22 print
INFO  11:26:43,112 - #20 (
INFO  11:26:43,112 - #48 5
INFO  11:26:43,112 - #21 )
INFO  11:26:43,112 - #8 ;
INFO  11:26:43,113 - #5 }
INFO  11:26:43,113 - #5 }
INFO  11:26:43,122 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        NoDeclarations(
        ) [NoDeclarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             int
            ) [Type]
            ConstDeclarationsEnd(
              ConstNum(
               nula
               0
              ) [ConstNum]
            ) [ConstDeclarationsEnd]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      ConstDeclaration(
        ConstDeclarationList(
          Type(
           int
          ) [Type]
          ConstDeclarationsEnd(
            ConstNum(
             jedan
             1
            ) [ConstNum]
          ) [ConstDeclarationsEnd]
        ) [ConstDeclarationList]
      ) [ConstDeclaration]
    ) [Declarations]
    ConstDeclaration(
      ConstDeclarationList(
        Type(
         int
        ) [Type]
        ConstDeclarationsEnd(
          ConstNum(
           pet
           5
          ) [ConstNum]
        ) [ConstDeclarationsEnd]
      ) [ConstDeclarationList]
    ) [ConstDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        NoDeclarations(
        ) [NoDeclarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarIdent(
                VarName(
                 i
                ) [VarName]
              ) [VarIdent]
              VarDeclarations(
                VarIdent(
                  VarName(
                   y
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     z
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       1
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 y
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         0
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementFor(
              ForSt(
              ) [ForSt]
              DesignatorStatementEnd(
              ) [DesignatorStatementEnd]
              DesignatorStatementEnd(
              ) [DesignatorStatementEnd]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    OneCondTerm(
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     i
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          Less(
                          ) [Less]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [OneCondTerm]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementPrint(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   u
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [StatementPrint]
                        Statements(
                          StatementIf(
                            LParenIf(
                            ) [LParenIf]
                            OneCondTerm(
                              OneCondFact(
                                CondFactRelop(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             y
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                  EqualTo(
                                  ) [EqualTo]
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorNum(
                                           0
                                          ) [FactorNum]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [CondFactRelop]
                              ) [OneCondFact]
                            ) [OneCondTerm]
                            RParenIf(
                            ) [RParenIf]
                            StatementStatementList(
                              Statements(
                                StatementDesignator(
                                  DesignatorStatementMatched(
                                    DesignatorStatementIncrement(
                                      DesignatorIdent(
                                       y
                                      ) [DesignatorIdent]
                                    ) [DesignatorStatementIncrement]
                                  ) [DesignatorStatementMatched]
                                ) [StatementDesignator]
                                Statements(
                                  StatementContinue(
                                  ) [StatementContinue]
                                  NoStatement(
                                  ) [NoStatement]
                                ) [Statements]
                              ) [Statements]
                            ) [StatementStatementList]
                          ) [StatementIf]
                          Statements(
                            StatementDesignator(
                              DesignatorStatementMatched(
                                DesignatorStatementIncrement(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [DesignatorStatementIncrement]
                              ) [DesignatorStatementMatched]
                            ) [StatementDesignator]
                            Statements(
                              StatementContinue(
                              ) [StatementContinue]
                              NoStatement(
                              ) [NoStatement]
                            ) [Statements]
                          ) [Statements]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementFor]
            Statements(
              StatementPrint(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         5
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementPrint]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  11:26:43,123 - ===================================
INFO  11:26:43,123 - Pocetak programa test301.
INFO  11:26:43,123 - Deklarisana je konstanta nula na liniji 5
INFO  11:26:43,123 - Deklarisana je konstanta jedan na liniji 6
INFO  11:26:43,123 - Deklarisana je konstanta pet na liniji 7
INFO  11:26:43,123 - Obradjuje se funkcija main na liniji 13
INFO  11:26:43,123 - Deklarisana je promenljiva i na liniji 14
INFO  11:26:43,124 - Deklarisana je promenljiva y na liniji 14
INFO  11:26:43,124 - Deklarisana je promenljiva z na liniji 14
INFO  11:26:43,124 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  11:26:43,124 - Designator i expr su odgovarajuceg tipa na liniji 17
INFO  11:26:43,125 - Obradjena funkcija PRINT na liniji 20
INFO  11:26:43,125 - Obradjena funkcija PRINT na liniji 29
INFO  11:26:43,125 - ===================================
INFO  11:26:43,132 - Parsiranje uspesno zavrseno!
