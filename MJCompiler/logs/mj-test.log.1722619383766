INFO  19:22:35,021 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  19:22:35,083 - #2 program
INFO  19:22:35,083 - #49 test301
INFO  19:22:35,083 - #6 const
INFO  19:22:35,084 - #49 int
INFO  19:22:35,084 - #49 nula
INFO  19:22:35,085 - #7 =
INFO  19:22:35,085 - #48 0
INFO  19:22:35,085 - #8 ;
INFO  19:22:35,086 - #6 const
INFO  19:22:35,087 - #49 int
INFO  19:22:35,087 - #49 jedan
INFO  19:22:35,087 - #7 =
INFO  19:22:35,087 - #48 1
INFO  19:22:35,087 - #8 ;
INFO  19:22:35,087 - #6 const
INFO  19:22:35,087 - #49 int
INFO  19:22:35,088 - #49 pet
INFO  19:22:35,088 - #7 =
INFO  19:22:35,088 - #48 5
INFO  19:22:35,088 - #8 ;
INFO  19:22:35,088 - #49 int
INFO  19:22:35,088 - #49 niz
INFO  19:22:35,089 - #10 [
INFO  19:22:35,089 - #11 ]
INFO  19:22:35,089 - #9 ,
INFO  19:22:35,089 - #49 niz2
INFO  19:22:35,089 - #10 [
INFO  19:22:35,089 - #11 ]
INFO  19:22:35,089 - #8 ;
INFO  19:22:35,090 - #49 char
INFO  19:22:35,090 - #49 nizch
INFO  19:22:35,090 - #10 [
INFO  19:22:35,090 - #11 ]
INFO  19:22:35,090 - #8 ;
INFO  19:22:35,090 - #49 char
INFO  19:22:35,090 - #49 c
INFO  19:22:35,090 - #10 [
INFO  19:22:35,091 - #11 ]
INFO  19:22:35,091 - #8 ;
INFO  19:22:35,091 - #4 {
INFO  19:22:35,091 - #49 int
INFO  19:22:35,092 - #49 saberi
INFO  19:22:35,092 - #20 (
INFO  19:22:35,092 - #21 )
INFO  19:22:35,093 - #4 {
INFO  19:22:35,093 - #18 return
INFO  19:22:35,093 - #28 -
INFO  19:22:35,093 - #48 1
INFO  19:22:35,093 - #8 ;
INFO  19:22:35,095 - #5 }
INFO  19:22:35,096 - #41 void
INFO  19:22:35,097 - #49 main
INFO  19:22:35,097 - #20 (
INFO  19:22:35,097 - #21 )
INFO  19:22:35,097 - #49 int
INFO  19:22:35,097 - #49 bodovi
INFO  19:22:35,097 - #8 ;
INFO  19:22:35,097 - #49 bool
INFO  19:22:35,097 - #49 bt
INFO  19:22:35,097 - #8 ;
INFO  19:22:35,097 - #49 int
INFO  19:22:35,097 - #49 i
INFO  19:22:35,097 - #8 ;
INFO  19:22:35,098 - #4 {
INFO  19:22:35,098 - #49 bodovi
INFO  19:22:35,098 - #7 =
INFO  19:22:35,098 - #48 0
INFO  19:22:35,099 - #8 ;
INFO  19:22:35,099 - #23 for
INFO  19:22:35,099 - #20 (
INFO  19:22:35,099 - #49 i
INFO  19:22:35,099 - #7 =
INFO  19:22:35,099 - #48 0
INFO  19:22:35,099 - #8 ;
INFO  19:22:35,099 - #49 i
INFO  19:22:35,099 - #35 <
INFO  19:22:35,100 - #48 5
INFO  19:22:35,101 - #8 ;
INFO  19:22:35,101 - #49 i
INFO  19:22:35,101 - #24 ++
INFO  19:22:35,101 - #21 )
INFO  19:22:35,101 - #4 {
INFO  19:22:35,101 - #16 break
INFO  19:22:35,101 - #8 ;
INFO  19:22:35,101 - #5 }
INFO  19:22:35,102 - #5 }
INFO  19:22:35,102 - #5 }
INFO  19:22:35,110 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstListPart(
                     nula
                      ConstNum(
                       0
                      ) [ConstNum]
                    ) [ConstListPart]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstListPart(
                   jedan
                    ConstNum(
                     1
                    ) [ConstNum]
                  ) [ConstListPart]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstListPart(
                 pet
                  ConstNum(
                   5
                  ) [ConstNum]
                ) [ConstListPart]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarArr(
               niz
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                 niz2
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
             nizch
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         char
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
           c
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      NoMethodDeclaration(
      ) [NoMethodDeclaration]
      MethodDecl(
        MethodNameAnyType(
          Type(
           int
          ) [Type]
         saberi
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        NoDeclarations(
        ) [NoDeclarations]
        Statements(
          StatementReturnExpr(
            ExprNegativ(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorNum(
                     1
                    ) [FactorNum]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprNegativ]
          ) [StatementReturnExpr]
          NoStatement(
          ) [NoStatement]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                   bodovi
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               bool
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                 bt
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
               i
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               bodovi
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementForCondFact(
            DesignatorStatementOne(
              DesignatorStatementMatched(
                DesignatorStatementAssignop(
                  DesignatorIdent(
                   i
                  ) [DesignatorIdent]
                  Assignop(
                  ) [Assignop]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementMatched]
            ) [DesignatorStatementOne]
            CondFactRelop(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
              Less(
              ) [Less]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       5
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [CondFactRelop]
            DesignatorStatementOne(
              DesignatorStatementMatched(
                DesignatorStatementIncrement(
                  DesignatorIdent(
                   i
                  ) [DesignatorIdent]
                ) [DesignatorStatementIncrement]
              ) [DesignatorStatementMatched]
            ) [DesignatorStatementOne]
            StatementStatementList(
              Statements(
                StatementBreak(
                ) [StatementBreak]
                NoStatement(
                ) [NoStatement]
              ) [Statements]
            ) [StatementStatementList]
          ) [StatementForCondFact]
          NoStatement(
          ) [NoStatement]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  19:22:35,111 - ===================================
INFO  19:22:35,111 - Pocetak programa test301.
INFO  19:22:35,111 - Deklarisana je konstanta nula na liniji 5
INFO  19:22:35,111 - Deklarisana je konstanta jedan na liniji 6
INFO  19:22:35,111 - Deklarisana je konstanta pet na liniji 7
INFO  19:22:35,111 - Deklarisan je niz niz na liniji 9
INFO  19:22:35,111 - Deklarisan je niz niz2 na liniji 9
INFO  19:22:35,112 - Deklarisan je niz nizch na liniji 10
INFO  19:22:35,112 - Deklarisan je niz c na liniji 11
INFO  19:22:35,112 - Obradjuje se funkcija saberi na liniji 15
INFO  19:22:35,112 - Dobra povratna vrednost funkcije na liniji 16
INFO  19:22:35,112 - Obradjuje se funkcija main na liniji 19
INFO  19:22:35,112 - Deklarisana je promenljiva bodovi na liniji 20
INFO  19:22:35,112 - Deklarisana je promenljiva bt na liniji 21
INFO  19:22:35,112 - Deklarisana je promenljiva i na liniji 22
INFO  19:22:35,113 - Designator i expr su odgovarajuceg tipa na liniji 24
INFO  19:22:35,113 - Designator i expr su odgovarajuceg tipa na liniji 26
INFO  19:22:35,113 - ===================================
INFO  19:22:35,114 - Parsiranje uspesno zavrseno!
