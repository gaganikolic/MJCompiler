INFO  13:12:18,712 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  13:12:18,763 - #2 program
INFO  13:12:18,763 - #49 test301
INFO  13:12:18,764 - #6 const
INFO  13:12:18,765 - #49 int
INFO  13:12:18,765 - #49 nula
INFO  13:12:18,765 - #7 =
INFO  13:12:18,766 - #48 0
INFO  13:12:18,766 - #8 ;
INFO  13:12:18,766 - #6 const
INFO  13:12:18,766 - #49 int
INFO  13:12:18,766 - #49 jedan
INFO  13:12:18,766 - #7 =
INFO  13:12:18,766 - #48 1
INFO  13:12:18,766 - #8 ;
INFO  13:12:18,767 - #6 const
INFO  13:12:18,767 - #49 int
INFO  13:12:18,767 - #49 pet
INFO  13:12:18,767 - #7 =
INFO  13:12:18,767 - #48 5
INFO  13:12:18,767 - #8 ;
INFO  13:12:18,767 - #4 {
INFO  13:12:18,768 - #41 void
INFO  13:12:18,768 - #49 main
INFO  13:12:18,769 - #20 (
INFO  13:12:18,769 - #21 )
INFO  13:12:18,769 - #49 int
INFO  13:12:18,769 - #49 i
INFO  13:12:18,770 - #9 ,
INFO  13:12:18,770 - #49 y
INFO  13:12:18,770 - #9 ,
INFO  13:12:18,770 - #49 z
INFO  13:12:18,770 - #8 ;
INFO  13:12:18,771 - #4 {
INFO  13:12:18,771 - #23 for
INFO  13:12:18,771 - #20 (
INFO  13:12:18,772 - #49 i
INFO  13:12:18,772 - #7 =
INFO  13:12:18,772 - #48 0
INFO  13:12:18,773 - #8 ;
INFO  13:12:18,774 - #49 i
INFO  13:12:18,774 - #35 <
INFO  13:12:18,775 - #48 4
INFO  13:12:18,776 - #8 ;
INFO  13:12:18,776 - #21 )
INFO  13:12:18,776 - #4 {
INFO  13:12:18,777 - #22 print
INFO  13:12:18,777 - #20 (
INFO  13:12:18,777 - #49 i
INFO  13:12:18,777 - #21 )
INFO  13:12:18,777 - #8 ;
INFO  13:12:18,777 - #49 i
INFO  13:12:18,777 - #24 ++
INFO  13:12:18,777 - #8 ;
INFO  13:12:18,777 - #5 }
INFO  13:12:18,778 - #5 }
INFO  13:12:18,778 - #5 }
INFO  13:12:18,787 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        NoDeclarations(
        ) [NoDeclarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             int
            ) [Type]
            ConstDeclarationsEnd(
              ConstNum(
               nula
               0
              ) [ConstNum]
            ) [ConstDeclarationsEnd]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      ConstDeclaration(
        ConstDeclarationList(
          Type(
           int
          ) [Type]
          ConstDeclarationsEnd(
            ConstNum(
             jedan
             1
            ) [ConstNum]
          ) [ConstDeclarationsEnd]
        ) [ConstDeclarationList]
      ) [ConstDeclaration]
    ) [Declarations]
    ConstDeclaration(
      ConstDeclarationList(
        Type(
         int
        ) [Type]
        ConstDeclarationsEnd(
          ConstNum(
           pet
           5
          ) [ConstNum]
        ) [ConstDeclarationsEnd]
      ) [ConstDeclarationList]
    ) [ConstDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        NoDeclarations(
        ) [NoDeclarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarIdent(
                VarName(
                 i
                ) [VarName]
              ) [VarIdent]
              VarDeclarations(
                VarIdent(
                  VarName(
                   y
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     z
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementForCondFact(
          ForSt(
          ) [ForSt]
          DesignatorStatementOne(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 i
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         0
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [DesignatorStatementOne]
          LSemiFor(
          ) [LSemiFor]
          CondFactRelop(
            ExprPositive(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorDesignator(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [FactorDesignator]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprPositive]
            Less(
            ) [Less]
            ExprPositive(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorNum(
                     4
                    ) [FactorNum]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprPositive]
          ) [CondFactRelop]
          DesignatorStatementEnd(
          ) [DesignatorStatementEnd]
          StatementStatementList(
            Statements(
              StatementPrint(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           i
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementPrint]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementIncrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementIncrement]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                NoStatement(
                ) [NoStatement]
              ) [Statements]
            ) [Statements]
          ) [StatementStatementList]
        ) [StatementForCondFact]
        NoStatement(
        ) [NoStatement]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  13:12:18,788 - ===================================
INFO  13:12:18,788 - Pocetak programa test301.
INFO  13:12:18,789 - Deklarisana je konstanta nula na liniji 5
INFO  13:12:18,789 - Deklarisana je konstanta jedan na liniji 6
INFO  13:12:18,789 - Deklarisana je konstanta pet na liniji 7
INFO  13:12:18,789 - Obradjuje se funkcija main na liniji 14
INFO  13:12:18,789 - Deklarisana je promenljiva i na liniji 15
INFO  13:12:18,789 - Deklarisana je promenljiva y na liniji 15
INFO  13:12:18,789 - Deklarisana je promenljiva z na liniji 15
INFO  13:12:18,789 - Designator i expr su odgovarajuceg tipa na liniji 17
INFO  13:12:18,790 - Obradjena funkcija PRINT na liniji 18
INFO  13:12:18,790 - ===================================
INFO  13:12:18,797 - Parsiranje uspesno zavrseno!
