INFO  22:46:22,006 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  22:46:22,065 - #2 program
INFO  22:46:22,065 - #49 test302
INFO  22:46:22,065 - #6 const
INFO  22:46:22,066 - #49 int
INFO  22:46:22,066 - #49 jedan
INFO  22:46:22,067 - #7 =
INFO  22:46:22,067 - #48 1
INFO  22:46:22,067 - #8 ;
INFO  22:46:22,067 - #49 int
INFO  22:46:22,068 - #49 i
INFO  22:46:22,068 - #8 ;
INFO  22:46:22,069 - #49 bool
INFO  22:46:22,069 - #49 ibool
INFO  22:46:22,069 - #8 ;
INFO  22:46:22,069 - #49 int
INFO  22:46:22,069 - #49 niz2
INFO  22:46:22,069 - #8 ;
INFO  22:46:22,069 - #49 int
INFO  22:46:22,069 - #49 niz
INFO  22:46:22,069 - #10 [
INFO  22:46:22,070 - #11 ]
INFO  22:46:22,070 - #9 ,
INFO  22:46:22,070 - #49 niz_2
INFO  22:46:22,070 - #10 [
INFO  22:46:22,070 - #11 ]
INFO  22:46:22,070 - #9 ,
INFO  22:46:22,070 - #49 niz_3
INFO  22:46:22,070 - #10 [
INFO  22:46:22,071 - #11 ]
INFO  22:46:22,071 - #8 ;
INFO  22:46:22,071 - #49 int
INFO  22:46:22,071 - #49 a
INFO  22:46:22,071 - #8 ;
INFO  22:46:22,071 - #4 {
INFO  22:46:22,071 - #49 int
INFO  22:46:22,072 - #49 sum
INFO  22:46:22,072 - #20 (
INFO  22:46:22,072 - #49 int
INFO  22:46:22,072 - #49 z
INFO  22:46:22,072 - #9 ,
INFO  22:46:22,072 - #49 int
INFO  22:46:22,072 - #49 d
INFO  22:46:22,072 - #21 )
INFO  22:46:22,073 - #4 {
INFO  22:46:22,073 - #18 return
INFO  22:46:22,073 - #49 z
INFO  22:46:22,073 - #37 +
INFO  22:46:22,074 - #49 d
INFO  22:46:22,075 - #8 ;
INFO  22:46:22,076 - #5 }
INFO  22:46:22,077 - #49 int
INFO  22:46:22,078 - #49 inkrement
INFO  22:46:22,078 - #20 (
INFO  22:46:22,078 - #49 int
INFO  22:46:22,078 - #49 a
INFO  22:46:22,078 - #9 ,
INFO  22:46:22,078 - #49 int
INFO  22:46:22,079 - #49 inc
INFO  22:46:22,079 - #21 )
INFO  22:46:22,079 - #49 int
INFO  22:46:22,079 - #49 pom
INFO  22:46:22,079 - #8 ;
INFO  22:46:22,079 - #4 {
INFO  22:46:22,079 - #14 if
INFO  22:46:22,079 - #20 (
INFO  22:46:22,079 - #49 inc
INFO  22:46:22,080 - #31 ==
INFO  22:46:22,080 - #49 jedan
INFO  22:46:22,081 - #21 )
INFO  22:46:22,081 - #49 pom
INFO  22:46:22,082 - #7 =
INFO  22:46:22,082 - #48 1
INFO  22:46:22,082 - #8 ;
INFO  22:46:22,083 - #15 else
INFO  22:46:22,083 - #14 if
INFO  22:46:22,084 - #20 (
INFO  22:46:22,084 - #49 inc
INFO  22:46:22,084 - #31 ==
INFO  22:46:22,084 - #48 2
INFO  22:46:22,084 - #21 )
INFO  22:46:22,084 - #49 pom
INFO  22:46:22,084 - #7 =
INFO  22:46:22,084 - #49 a
INFO  22:46:22,085 - #8 ;
INFO  22:46:22,085 - #18 return
INFO  22:46:22,085 - #49 sum
INFO  22:46:22,085 - #20 (
INFO  22:46:22,085 - #49 a
INFO  22:46:22,085 - #9 ,
INFO  22:46:22,086 - #49 pom
INFO  22:46:22,086 - #21 )
INFO  22:46:22,086 - #8 ;
INFO  22:46:22,086 - #5 }
INFO  22:46:22,086 - #49 bool
INFO  22:46:22,086 - #49 verify
INFO  22:46:22,087 - #20 (
INFO  22:46:22,087 - #21 )
INFO  22:46:22,087 - #4 {
INFO  22:46:22,088 - #22 print
INFO  22:46:22,088 - #20 (
INFO  22:46:22,088 - #50 v
INFO  22:46:22,088 - #21 )
INFO  22:46:22,089 - #8 ;
INFO  22:46:22,089 - #18 return
INFO  22:46:22,089 - #51 false
INFO  22:46:22,089 - #8 ;
INFO  22:46:22,089 - #5 }
INFO  22:46:22,089 - #41 void
INFO  22:46:22,089 - #49 main
INFO  22:46:22,089 - #20 (
INFO  22:46:22,089 - #21 )
INFO  22:46:22,089 - #4 {
INFO  22:46:22,089 - #49 i
INFO  22:46:22,089 - #7 =
INFO  22:46:22,090 - #48 0
INFO  22:46:22,090 - #8 ;
INFO  22:46:22,090 - #23 for
INFO  22:46:22,090 - #20 (
INFO  22:46:22,091 - #49 i
INFO  22:46:22,091 - #7 =
INFO  22:46:22,091 - #48 0
INFO  22:46:22,091 - #8 ;
INFO  22:46:22,091 - #49 i
INFO  22:46:22,092 - #35 <
INFO  22:46:22,092 - #48 10
INFO  22:46:22,092 - #8 ;
INFO  22:46:22,093 - #21 )
INFO  22:46:22,095 - #4 {
INFO  22:46:22,096 - #14 if
INFO  22:46:22,096 - #20 (
INFO  22:46:22,096 - #49 i
INFO  22:46:22,096 - #31 ==
INFO  22:46:22,096 - #48 3
INFO  22:46:22,096 - #21 )
INFO  22:46:22,096 - #4 {
INFO  22:46:22,096 - #49 i
INFO  22:46:22,096 - #24 ++
INFO  22:46:22,096 - #8 ;
INFO  22:46:22,096 - #17 continue
INFO  22:46:22,096 - #8 ;
INFO  22:46:22,096 - #5 }
INFO  22:46:22,097 - #14 if
INFO  22:46:22,097 - #20 (
INFO  22:46:22,097 - #49 i
INFO  22:46:22,097 - #31 ==
INFO  22:46:22,097 - #48 4
INFO  22:46:22,098 - #21 )
INFO  22:46:22,098 - #16 break
INFO  22:46:22,098 - #8 ;
INFO  22:46:22,098 - #49 i
INFO  22:46:22,098 - #7 =
INFO  22:46:22,098 - #49 inkrement
INFO  22:46:22,099 - #20 (
INFO  22:46:22,099 - #49 i
INFO  22:46:22,099 - #9 ,
INFO  22:46:22,099 - #48 1
INFO  22:46:22,099 - #21 )
INFO  22:46:22,099 - #8 ;
INFO  22:46:22,099 - #5 }
INFO  22:46:22,099 - #14 if
INFO  22:46:22,099 - #20 (
INFO  22:46:22,099 - #49 i
INFO  22:46:22,099 - #31 ==
INFO  22:46:22,099 - #48 3
INFO  22:46:22,099 - #26 &&
INFO  22:46:22,099 - #49 verify
INFO  22:46:22,100 - #20 (
INFO  22:46:22,100 - #21 )
INFO  22:46:22,100 - #21 )
INFO  22:46:22,100 - #22 print
INFO  22:46:22,100 - #20 (
INFO  22:46:22,101 - #28 -
INFO  22:46:22,101 - #48 4
INFO  22:46:22,101 - #21 )
INFO  22:46:22,101 - #8 ;
INFO  22:46:22,101 - #15 else
INFO  22:46:22,101 - #22 print
INFO  22:46:22,101 - #20 (
INFO  22:46:22,101 - #48 4
INFO  22:46:22,101 - #21 )
INFO  22:46:22,101 - #8 ;
INFO  22:46:22,101 - #5 }
INFO  22:46:22,101 - #5 }
INFO  22:46:22,110 - Program(
  ProgramName(
   test302
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstNum(
                     jedan
                     1
                    ) [ConstNum]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               bool
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   ibool
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 niz2
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarations(
            VarArr(
              VarName(
               niz
              ) [VarName]
            ) [VarArr]
            VarDeclarations(
              VarArr(
                VarName(
                 niz_2
                ) [VarName]
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                  VarName(
                   niz_3
                  ) [VarName]
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarations]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarationsEnd(
          VarIdent(
            VarName(
             a
            ) [VarName]
          ) [VarIdent]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        MethodDeclarationList(
          NoMethodDeclaration(
          ) [NoMethodDeclaration]
          MethodDecl(
            MethodNameAnyType(
              Type(
               int
              ) [Type]
             sum
            ) [MethodNameAnyType]
            MethodParameters(
              FormParsList(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 z
                ) [FormParsVar]
                FormParsEnd(
                  FormParsVar(
                    Type(
                     int
                    ) [Type]
                   d
                  ) [FormParsVar]
                ) [FormParsEnd]
              ) [FormParsList]
            ) [MethodParameters]
            NoDeclarations(
            ) [NoDeclarations]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopList(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             z
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           d
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [MethodDecl]
        ) [MethodDeclarationList]
        MethodDecl(
          MethodNameAnyType(
            Type(
             int
            ) [Type]
           inkrement
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsList(
              FormParsVar(
                Type(
                 int
                ) [Type]
               a
              ) [FormParsVar]
              FormParsEnd(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 inc
                ) [FormParsVar]
              ) [FormParsEnd]
            ) [FormParsList]
          ) [MethodParameters]
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     pom
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               inc
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               jedan
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     pom
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactRelop(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 inc
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                      EqualTo(
                      ) [EqualTo]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               2
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactRelop]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       pom
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 a
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
              ) [StatementIf]
            ) [StatementIfElse]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignatorActPars(
                          DesignatorIdent(
                           sum
                          ) [DesignatorIdent]
                          ActualParsList(
                            ActParsList(
                              ActParsEnd(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorDesignator(
                                          DesignatorIdent(
                                           a
                                          ) [DesignatorIdent]
                                        ) [FactorDesignator]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ActParsEnd]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         pom
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ActParsList]
                          ) [ActualParsList]
                        ) [FactorDesignatorActPars]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         verify
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        NoDeclarations(
        ) [NoDeclarations]
        Statements(
          StatementPrint(
            ExprPositive(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorChar(
                     v
                    ) [FactorChar]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprPositive]
          ) [StatementPrint]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorBool(
                       false
                      ) [FactorBool]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      NoDeclarations(
      ) [NoDeclarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementForCondFact(
            ForSt(
            ) [ForSt]
            DesignatorStatementOne(
              DesignatorStatementMatched(
                DesignatorStatementAssignop(
                  DesignatorIdent(
                   i
                  ) [DesignatorIdent]
                  Assignop(
                  ) [Assignop]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementMatched]
            ) [DesignatorStatementOne]
            LSemiFor(
            ) [LSemiFor]
            CondFactFor(
              CondFactRelop(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           i
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
                Less(
                ) [Less]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         10
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [CondFactRelop]
            ) [CondFactFor]
            RSemiFor(
            ) [RSemiFor]
            DesignatorStatementListSecond(
              DesignatorStatementEnd(
              ) [DesignatorStatementEnd]
            ) [DesignatorStatementListSecond]
            RParenFor(
            ) [RParenFor]
            StatementStatementList(
              Statements(
                StatementIf(
                  LParenIf(
                  ) [LParenIf]
                  OneCondTerm(
                    OneCondFact(
                      CondFactRelop(
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorDesignator(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [FactorDesignator]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                        EqualTo(
                        ) [EqualTo]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorNum(
                                 3
                                ) [FactorNum]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [CondFactRelop]
                    ) [OneCondFact]
                  ) [OneCondTerm]
                  RParenIf(
                  ) [RParenIf]
                  StatementStatementList(
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementIncrement(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [DesignatorStatementIncrement]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementContinue(
                        ) [StatementContinue]
                        NoStatement(
                        ) [NoStatement]
                      ) [Statements]
                    ) [Statements]
                  ) [StatementStatementList]
                ) [StatementIf]
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    OneCondTerm(
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     i
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   4
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [OneCondTerm]
                    RParenIf(
                    ) [RParenIf]
                    StatementBreak(
                    ) [StatementBreak]
                  ) [StatementIf]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorIdent(
                           i
                          ) [DesignatorIdent]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignatorActPars(
                                    DesignatorIdent(
                                     inkrement
                                    ) [DesignatorIdent]
                                    ActualParsList(
                                      ActParsList(
                                        ActParsEnd(
                                          ExprPositive(
                                            AddopEnd(
                                              Term(
                                                MulopEnd(
                                                  FactorDesignator(
                                                    DesignatorIdent(
                                                     i
                                                    ) [DesignatorIdent]
                                                  ) [FactorDesignator]
                                                ) [MulopEnd]
                                              ) [Term]
                                            ) [AddopEnd]
                                          ) [ExprPositive]
                                        ) [ActParsEnd]
                                        ExprPositive(
                                          AddopEnd(
                                            Term(
                                              MulopEnd(
                                                FactorNum(
                                                 1
                                                ) [FactorNum]
                                              ) [MulopEnd]
                                            ) [Term]
                                          ) [AddopEnd]
                                        ) [ExprPositive]
                                      ) [ActParsList]
                                    ) [ActualParsList]
                                  ) [FactorDesignatorActPars]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    NoStatement(
                    ) [NoStatement]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [StatementStatementList]
          ) [StatementForCondFact]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                CondTerms(
                  OneCondFact(
                    CondFactRelop(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                      EqualTo(
                      ) [EqualTo]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               3
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactRelop]
                  ) [OneCondFact]
                  CondFactExpr(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               verify
                              ) [DesignatorIdent]
                              NoActPars(
                              ) [NoActPars]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactExpr]
                ) [CondTerms]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementPrint(
                ExprNegativ(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         4
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprNegativ]
              ) [StatementPrint]
              ElseSt(
              ) [ElseSt]
              StatementPrint(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         4
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementPrint]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  22:46:22,111 - ===================================
INFO  22:46:22,112 - Pocetak programa test302.
INFO  22:46:22,112 - Deklarisana je konstanta jedan na liniji 5
INFO  22:46:22,112 - Deklarisana je promenljiva i na liniji 7
INFO  22:46:22,112 - Deklarisana je promenljiva ibool na liniji 8
INFO  22:46:22,112 - Deklarisana je promenljiva niz2 na liniji 10
INFO  22:46:22,112 - Deklarisana je promenljiva niz na liniji 12
INFO  22:46:22,112 - Deklarisana je promenljiva niz_2 na liniji 12
INFO  22:46:22,112 - Deklarisana je promenljiva niz_3 na liniji 12
INFO  22:46:22,112 - Deklarisana je promenljiva a na liniji 13
INFO  22:46:22,112 - Obradjuje se funkcija sum na liniji 18
INFO  22:46:22,113 - Deklarisan je parametar funkcije z na liniji 18
INFO  22:46:22,113 - Deklarisan je parametar funkcije d na liniji 18
INFO  22:46:22,113 - Dobra povratna vrednost funkcije na liniji 20
INFO  22:46:22,113 - Obradjuje se funkcija inkrement na liniji 23
INFO  22:46:22,113 - Deklarisan je parametar funkcije a na liniji 23
INFO  22:46:22,113 - Deklarisan je parametar funkcije inc na liniji 23
INFO  22:46:22,113 - Deklarisana je promenljiva pom na liniji 24
INFO  22:46:22,113 - Designator i expr su odgovarajuceg tipa na liniji 26
INFO  22:46:22,113 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  22:46:22,113 - Pronadjen poziv funkcije sum na liniji 29
INFO  22:46:22,113 - Dobra povratna vrednost funkcije na liniji 29
INFO  22:46:22,113 - Obradjuje se funkcija verify na liniji 32
INFO  22:46:22,114 - Obradjena funkcija PRINT na liniji 33
INFO  22:46:22,114 - Dobra povratna vrednost funkcije na liniji 34
INFO  22:46:22,114 - Obradjuje se funkcija main na liniji 37
INFO  22:46:22,114 - Designator i expr su odgovarajuceg tipa na liniji 42
INFO  22:46:22,114 - Designator i expr su odgovarajuceg tipa na liniji 43
INFO  22:46:22,114 - Pronadjen poziv funkcije inkrement na liniji 50
INFO  22:46:22,114 - Designator i expr su odgovarajuceg tipa na liniji 50
INFO  22:46:22,114 - Pronadjen poziv funkcije verify na liniji 53
INFO  22:46:22,114 - Obradjena funkcija PRINT na liniji 53
INFO  22:46:22,114 - Obradjena funkcija PRINT na liniji 54
INFO  22:46:22,114 - ===================================
INFO  22:46:22,122 - Parsiranje uspesno zavrseno!
