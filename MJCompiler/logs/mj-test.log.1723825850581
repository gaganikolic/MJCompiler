INFO  18:30:42,770 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:30:42,825 - #2 program
INFO  18:30:42,825 - #49 test301
INFO  18:30:42,825 - #6 const
INFO  18:30:42,826 - #49 int
INFO  18:30:42,826 - #49 a
INFO  18:30:42,827 - #7 =
INFO  18:30:42,827 - #48 5
INFO  18:30:42,827 - #8 ;
INFO  18:30:42,827 - #49 int
INFO  18:30:42,828 - #49 b
INFO  18:30:42,828 - #9 ,
INFO  18:30:42,828 - #49 c
INFO  18:30:42,829 - #8 ;
INFO  18:30:42,829 - #6 const
INFO  18:30:42,829 - #49 bool
INFO  18:30:42,829 - #49 t
INFO  18:30:42,829 - #7 =
INFO  18:30:42,829 - #51 true
INFO  18:30:42,830 - #9 ,
INFO  18:30:42,830 - #49 f
INFO  18:30:42,830 - #7 =
INFO  18:30:42,830 - #51 false
INFO  18:30:42,830 - #8 ;
INFO  18:30:42,831 - #49 int
INFO  18:30:42,831 - #49 niz
INFO  18:30:42,831 - #10 [
INFO  18:30:42,831 - #11 ]
INFO  18:30:42,831 - #8 ;
INFO  18:30:42,832 - #49 int
INFO  18:30:42,832 - #49 d
INFO  18:30:42,832 - #9 ,
INFO  18:30:42,832 - #49 e
INFO  18:30:42,832 - #8 ;
INFO  18:30:42,832 - #4 {
INFO  18:30:42,833 - #49 bool
INFO  18:30:42,833 - #49 provera
INFO  18:30:42,833 - #20 (
INFO  18:30:42,834 - #21 )
INFO  18:30:42,834 - #4 {
INFO  18:30:42,834 - #49 pom1
INFO  18:30:42,835 - #7 =
INFO  18:30:42,835 - #28 -
INFO  18:30:42,836 - #20 (
INFO  18:30:42,836 - #48 5
INFO  18:30:42,836 - #38 *
INFO  18:30:42,836 - #48 2
INFO  18:30:42,837 - #21 )
INFO  18:30:42,838 - #37 +
INFO  18:30:42,839 - #48 11
INFO  18:30:42,840 - #8 ;
INFO  18:30:42,840 - #14 if
INFO  18:30:42,840 - #20 (
INFO  18:30:42,840 - #49 pom1
INFO  18:30:42,841 - #33 >
INFO  18:30:42,841 - #48 0
INFO  18:30:42,842 - #21 )
INFO  18:30:42,843 - #18 return
INFO  18:30:42,843 - #51 true
INFO  18:30:42,843 - #8 ;
INFO  18:30:42,843 - #15 else
INFO  18:30:42,843 - #18 return
INFO  18:30:42,844 - #51 false
INFO  18:30:42,844 - #8 ;
INFO  18:30:42,844 - #5 }
INFO  18:30:42,845 - #41 void
INFO  18:30:42,846 - #49 main
INFO  18:30:42,846 - #20 (
INFO  18:30:42,846 - #21 )
INFO  18:30:42,846 - #49 int
INFO  18:30:42,846 - #49 p1
INFO  18:30:42,846 - #9 ,
INFO  18:30:42,846 - #49 i
INFO  18:30:42,846 - #8 ;
INFO  18:30:42,846 - #6 const
INFO  18:30:42,847 - #49 int
INFO  18:30:42,847 - #49 p2
INFO  18:30:42,847 - #7 =
INFO  18:30:42,847 - #48 5
INFO  18:30:42,847 - #8 ;
INFO  18:30:42,847 - #4 {
INFO  18:30:42,847 - #49 i
INFO  18:30:42,847 - #7 =
INFO  18:30:42,847 - #48 0
INFO  18:30:42,847 - #8 ;
INFO  18:30:42,847 - #14 if
INFO  18:30:42,847 - #20 (
INFO  18:30:42,847 - #49 i
INFO  18:30:42,847 - #31 ==
INFO  18:30:42,847 - #48 3
INFO  18:30:42,848 - #21 )
INFO  18:30:42,848 - #22 print
INFO  18:30:42,848 - #20 (
INFO  18:30:42,848 - #49 i
INFO  18:30:42,849 - #21 )
INFO  18:30:42,849 - #8 ;
INFO  18:30:42,849 - #15 else
INFO  18:30:42,849 - #14 if
INFO  18:30:42,849 - #20 (
INFO  18:30:42,849 - #49 i
INFO  18:30:42,849 - #31 ==
INFO  18:30:42,849 - #48 2
INFO  18:30:42,849 - #21 )
INFO  18:30:42,849 - #49 i
INFO  18:30:42,849 - #24 ++
INFO  18:30:42,849 - #8 ;
INFO  18:30:42,850 - #15 else
INFO  18:30:42,850 - #49 i
INFO  18:30:42,850 - #7 =
INFO  18:30:42,850 - #49 i
INFO  18:30:42,850 - #37 +
INFO  18:30:42,850 - #48 1
INFO  18:30:42,850 - #8 ;
INFO  18:30:42,850 - #22 print
INFO  18:30:42,850 - #20 (
INFO  18:30:42,850 - #49 i
INFO  18:30:42,850 - #21 )
INFO  18:30:42,850 - #8 ;
INFO  18:30:42,851 - #14 if
INFO  18:30:42,851 - #20 (
INFO  18:30:42,851 - #49 provera
INFO  18:30:42,851 - #20 (
INFO  18:30:42,851 - #21 )
INFO  18:30:42,852 - #21 )
INFO  18:30:42,852 - #22 print
INFO  18:30:42,852 - #20 (
INFO  18:30:42,852 - #50 t
INFO  18:30:42,852 - #21 )
INFO  18:30:42,852 - #8 ;
INFO  18:30:42,853 - #5 }
INFO  18:30:42,853 - #5 }
INFO  18:30:42,862 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      NoMethodDeclaration(
      ) [NoMethodDeclaration]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        NoDeclarations(
        ) [NoDeclarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   p1
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             int
            ) [Type]
            ConstDeclarationsEnd(
              ConstNum(
               p2
               5
              ) [ConstNum]
            ) [ConstDeclarationsEnd]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:30:42,863 - ===================================
INFO  18:30:42,863 - Pocetak programa test301.
INFO  18:30:42,863 - Deklarisana je konstanta a na liniji 3
INFO  18:30:42,864 - Deklarisana je promenljiva b na liniji 4
INFO  18:30:42,864 - Deklarisana je promenljiva c na liniji 4
INFO  18:30:42,864 - Deklarisana je konstanta t na liniji 5
INFO  18:30:42,864 - Deklarisana je konstanta f na liniji 5
INFO  18:30:42,864 - Deklarisana je promenljiva niz na liniji 6
INFO  18:30:42,864 - Deklarisana je promenljiva d na liniji 7
INFO  18:30:42,864 - Deklarisana je promenljiva e na liniji 7
INFO  18:30:42,864 - Obradjuje se funkcija provera na liniji 11
ERROR 18:30:42,864 - Greska na liniji 14 : ime pom1 nije deklarisano! 
ERROR 18:30:42,864 - Greska na liniji 14 designator i expr nisu istog tipa
ERROR 18:30:42,864 - Greska na liniji 16 : ime pom1 nije deklarisano! 
ERROR 18:30:42,864 - Greska, operandi u uslovu IF naredbe nisu istog tipa na liniji 16
INFO  18:30:42,864 - Dobra povratna vrednost funkcije na liniji 16
INFO  18:30:42,864 - Dobra povratna vrednost funkcije na liniji 17
INFO  18:30:42,865 - Obradjuje se funkcija main na liniji 20
INFO  18:30:42,865 - Deklarisana je promenljiva p1 na liniji 21
INFO  18:30:42,865 - Deklarisana je promenljiva i na liniji 21
INFO  18:30:42,865 - Deklarisana je konstanta p2 na liniji 22
INFO  18:30:42,865 - Designator i expr su odgovarajuceg tipa na liniji 24
INFO  18:30:42,865 - Obradjena funkcija PRINT na liniji 25
INFO  18:30:42,865 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  18:30:42,865 - Obradjena funkcija PRINT na liniji 28
INFO  18:30:42,865 - Pronadjen poziv funkcije provera na liniji 30
INFO  18:30:42,865 - Obradjena funkcija PRINT na liniji 30
INFO  18:30:42,865 - ===================================
ERROR 18:30:42,866 - Parsiranje NIJE uspesno zavrseno!
