INFO  23:48:20,152 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  23:48:21,325 - #2 program
INFO  23:48:21,325 - #49 test3
INFO  23:48:21,325 - #6 const
INFO  23:48:21,341 - #49 int
INFO  23:48:21,341 - #49 size
INFO  23:48:21,350 - #7 =
INFO  23:48:21,350 - #48 10
INFO  23:48:21,351 - #8 ;
INFO  23:48:21,351 - #49 int
INFO  23:48:21,351 - #49 pos
INFO  23:48:21,351 - #10 [
INFO  23:48:21,360 - #11 ]
INFO  23:48:21,361 - #8 ;
INFO  23:48:21,371 - #4 {
INFO  23:48:21,371 - #41 void
INFO  23:48:21,380 - #49 main
INFO  23:48:21,380 - #20 (
INFO  23:48:21,380 - #21 )
INFO  23:48:21,388 - #49 int
INFO  23:48:21,388 - #49 x
INFO  23:48:21,389 - #9 ,
INFO  23:48:21,390 - #49 i
INFO  23:48:21,390 - #8 ;
INFO  23:48:21,390 - #49 char
INFO  23:48:21,390 - #49 x
INFO  23:48:21,390 - #8 ;
INFO  23:48:21,390 - #4 {
INFO  23:48:21,390 - #49 x
INFO  23:48:21,390 - #7 =
INFO  23:48:21,390 - #48 1
INFO  23:48:21,398 - #8 ;
INFO  23:48:21,408 - #49 pos
INFO  23:48:21,408 - #7 =
INFO  23:48:21,408 - #29 new
INFO  23:48:21,409 - #49 int
INFO  23:48:21,409 - #10 [
INFO  23:48:21,409 - #49 size
INFO  23:48:21,409 - #11 ]
INFO  23:48:21,409 - #8 ;
INFO  23:48:21,409 - #49 i
INFO  23:48:21,409 - #7 =
INFO  23:48:21,409 - #48 0
INFO  23:48:21,409 - #8 ;
INFO  23:48:21,410 - #23 for
INFO  23:48:21,410 - #20 (
INFO  23:48:21,418 - #8 ;
INFO  23:48:21,427 - #49 i
INFO  23:48:21,441 - #35 <
INFO  23:48:21,441 - #49 size
INFO  23:48:21,463 - #8 ;
INFO  23:48:21,474 - #21 )
INFO  23:48:21,493 - #4 {
INFO  23:48:21,503 - #49 pos
INFO  23:48:21,503 - #10 [
INFO  23:48:21,511 - #49 i
INFO  23:48:21,511 - #11 ]
INFO  23:48:21,511 - #7 =
INFO  23:48:21,512 - #48 0
INFO  23:48:21,512 - #8 ;
INFO  23:48:21,512 - #49 i
INFO  23:48:21,512 - #24 ++
INFO  23:48:21,512 - #8 ;
INFO  23:48:21,512 - #5 }
INFO  23:48:21,520 - #19 read
INFO  23:48:21,520 - #20 (
INFO  23:48:21,520 - #49 x
INFO  23:48:21,520 - #21 )
INFO  23:48:21,521 - #8 ;
INFO  23:48:21,521 - #22 print
INFO  23:48:21,521 - #20 (
INFO  23:48:21,521 - #49 x
INFO  23:48:21,521 - #21 )
INFO  23:48:21,521 - #8 ;
INFO  23:48:21,521 - #23 for
INFO  23:48:21,521 - #20 (
INFO  23:48:21,521 - #49 i
INFO  23:48:21,521 - #7 =
INFO  23:48:21,521 - #48 0
INFO  23:48:21,521 - #8 ;
INFO  23:48:21,521 - #49 i
INFO  23:48:21,521 - #35 <
INFO  23:48:21,522 - #49 size
INFO  23:48:21,522 - #8 ;
INFO  23:48:21,522 - #49 i
INFO  23:48:21,522 - #24 ++
INFO  23:48:21,522 - #21 )
INFO  23:48:21,522 - #4 {
INFO  23:48:21,522 - #14 if
INFO  23:48:21,522 - #20 (
INFO  23:48:21,522 - #49 poz
INFO  23:48:21,532 - #10 [
INFO  23:48:21,532 - #49 i
INFO  23:48:21,532 - #11 ]
INFO  23:48:21,533 - #40 %
INFO  23:48:21,533 - #48 2
INFO  23:48:21,560 - #31 ==
INFO  23:48:21,560 - #48 0
INFO  23:48:21,569 - #21 )
INFO  23:48:21,569 - #4 {
INFO  23:48:21,581 - #49 pos
INFO  23:48:21,581 - #10 [
INFO  23:48:21,581 - #49 i
INFO  23:48:21,581 - #11 ]
INFO  23:48:21,581 - #24 ++
INFO  23:48:21,581 - #8 ;
INFO  23:48:21,581 - #5 }
INFO  23:48:21,581 - #22 print
INFO  23:48:21,581 - #20 (
INFO  23:48:21,582 - #49 i
INFO  23:48:21,582 - #21 )
INFO  23:48:21,582 - #8 ;
INFO  23:48:21,582 - #5 }
INFO  23:48:21,582 - #5 }
INFO  23:48:21,582 - #5 }
INFO  23:48:21,665 - Program(
  ProgramName(
   test3
  ) [ProgramName]
  Declarations(
    Declarations(
      NoDeclarations(
      ) [NoDeclarations]
      ConstDeclaration(
        ConstDeclarationList(
          Type(
           int
          ) [Type]
          ConstDeclarationsEnd(
            ConstNum(
             size
             10
            ) [ConstNum]
          ) [ConstDeclarationsEnd]
        ) [ConstDeclarationList]
      ) [ConstDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarationsEnd(
          VarArr(
            Arr(
              VarName(
               pos
              ) [VarName]
            ) [Arr]
          ) [VarArr]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   x
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 x
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               x
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       1
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pos
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNew(
                          Type(
                           int
                          ) [Type]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     size
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [FactorNew]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementDesignator(
              DesignatorStatementMatched(
                DesignatorStatementAssignop(
                  DesignatorIdent(
                   i
                  ) [DesignatorIdent]
                  Assignop(
                  ) [Assignop]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementMatched]
            ) [StatementDesignator]
            Statements(
              StatementForCondFact(
                ForSt(
                ) [ForSt]
                DesignatorStatementEnd(
                ) [DesignatorStatementEnd]
                LSemiFor(
                ) [LSemiFor]
                CondFactFor(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Less(
                    ) [Less]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               size
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [CondFactFor]
                RSemiFor(
                ) [RSemiFor]
                DesignatorStatementListSecond(
                  DesignatorStatementEnd(
                  ) [DesignatorStatementEnd]
                ) [DesignatorStatementListSecond]
                RParenFor(
                ) [RParenFor]
                StatementStatementList(
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             pos
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementIncrement(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [DesignatorStatementIncrement]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      NoStatement(
                      ) [NoStatement]
                    ) [Statements]
                  ) [Statements]
                ) [StatementStatementList]
              ) [StatementForCondFact]
              Statements(
                StatementRead(
                  DesignatorIdent(
                   x
                  ) [DesignatorIdent]
                ) [StatementRead]
                Statements(
                  StatementPrint(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               x
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [StatementPrint]
                  Statements(
                    StatementForCondFact(
                      ForSt(
                      ) [ForSt]
                      DesignatorStatementOne(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [DesignatorStatementOne]
                      LSemiFor(
                      ) [LSemiFor]
                      CondFactFor(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     i
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          Less(
                          ) [Less]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     size
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [CondFactFor]
                      RSemiFor(
                      ) [RSemiFor]
                      DesignatorStatementListSecond(
                        DesignatorStatementOne(
                          DesignatorStatementMatched(
                            DesignatorStatementIncrement(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [DesignatorStatementIncrement]
                          ) [DesignatorStatementMatched]
                        ) [DesignatorStatementOne]
                      ) [DesignatorStatementListSecond]
                      RParenFor(
                      ) [RParenFor]
                      StatementStatementList(
                        Statements(
                          StatementIf(
                            LParenIf(
                            ) [LParenIf]
                            OneCondTerm(
                              OneCondFact(
                                CondFactRelop(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopList(
                                          MulopEnd(
                                            FactorDesignator(
                                              DesignatorExpr(
                                                DesignatorName(
                                                 poz
                                                ) [DesignatorName]
                                                ArrayDecl(
                                                  ExprPositive(
                                                    AddopEnd(
                                                      Term(
                                                        MulopEnd(
                                                          FactorDesignator(
                                                            DesignatorIdent(
                                                             i
                                                            ) [DesignatorIdent]
                                                          ) [FactorDesignator]
                                                        ) [MulopEnd]
                                                      ) [Term]
                                                    ) [AddopEnd]
                                                  ) [ExprPositive]
                                                ) [ArrayDecl]
                                              ) [DesignatorExpr]
                                            ) [FactorDesignator]
                                          ) [MulopEnd]
                                          Percent(
                                          ) [Percent]
                                          FactorNum(
                                           2
                                          ) [FactorNum]
                                        ) [MulopList]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                  EqualTo(
                                  ) [EqualTo]
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorNum(
                                           0
                                          ) [FactorNum]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [CondFactRelop]
                              ) [OneCondFact]
                            ) [OneCondTerm]
                            RParenIf(
                            ) [RParenIf]
                            StatementStatementList(
                              Statements(
                                StatementDesignator(
                                  DesignatorStatementMatched(
                                    DesignatorStatementIncrement(
                                      DesignatorExpr(
                                        DesignatorName(
                                         pos
                                        ) [DesignatorName]
                                        ArrayDecl(
                                          ExprPositive(
                                            AddopEnd(
                                              Term(
                                                MulopEnd(
                                                  FactorDesignator(
                                                    DesignatorIdent(
                                                     i
                                                    ) [DesignatorIdent]
                                                  ) [FactorDesignator]
                                                ) [MulopEnd]
                                              ) [Term]
                                            ) [AddopEnd]
                                          ) [ExprPositive]
                                        ) [ArrayDecl]
                                      ) [DesignatorExpr]
                                    ) [DesignatorStatementIncrement]
                                  ) [DesignatorStatementMatched]
                                ) [StatementDesignator]
                                NoStatement(
                                ) [NoStatement]
                              ) [Statements]
                            ) [StatementStatementList]
                          ) [StatementIf]
                          Statements(
                            StatementPrint(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [StatementPrint]
                            NoStatement(
                            ) [NoStatement]
                          ) [Statements]
                        ) [Statements]
                      ) [StatementStatementList]
                    ) [StatementForCondFact]
                    NoStatement(
                    ) [NoStatement]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  23:48:21,667 - ===================================
INFO  23:48:21,669 - Pocetak programa test3.
INFO  23:48:21,670 - Deklarisana je konstanta size na liniji 3
INFO  23:48:21,670 - Deklarisana je promenljiva pos na liniji 4
INFO  23:48:21,670 - Obradjuje se funkcija main na liniji 6
INFO  23:48:21,670 - Deklarisana je promenljiva x na liniji 7
INFO  23:48:21,670 - Deklarisana je promenljiva i na liniji 7
ERROR 23:48:21,671 - Vec postoji identifikator x
INFO  23:48:21,671 - Designator i expr su odgovarajuceg tipa na liniji 10
INFO  23:48:21,671 - Designator i expr su odgovarajuceg tipa na liniji 11
INFO  23:48:21,686 - Designator i expr su odgovarajuceg tipa na liniji 12
INFO  23:48:21,687 - Kreiran/promenjen element niza pos
INFO  23:48:21,688 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  23:48:21,688 - Funkciji READ je prosledjena promenljiva x
INFO  23:48:21,688 - Obradjena funkcija PRINT na liniji 19
INFO  23:48:21,688 - Designator i expr su odgovarajuceg tipa na liniji 20
ERROR 23:48:21,688 - Ident noObj nije prethodno deklarisan
ERROR 23:48:21,688 - Greska na liniji 21. Ime poz nije deklarisano! 
ERROR 23:48:21,688 - Greska na liniji 21, operandi nisu odgovarajuci tipovi
ERROR 23:48:21,689 - Greska, operandi u uslovu IF naredbe nisu istog tipa na liniji 21
INFO  23:48:21,689 - Kreiran/promenjen element niza pos
INFO  23:48:21,689 - Obradjena funkcija PRINT na liniji 24
INFO  23:48:21,689 - ===================================
ERROR 23:48:21,691 - Parsiranje NIJE uspesno zavrseno!
