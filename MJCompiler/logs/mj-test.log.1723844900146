INFO  18:45:19,983 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:45:20,071 - #2 program
INFO  18:45:20,071 - #49 test301
INFO  18:45:20,071 - #6 const
INFO  18:45:20,073 - #49 int
INFO  18:45:20,073 - #49 a
INFO  18:45:20,074 - #7 =
INFO  18:45:20,074 - #48 5
INFO  18:45:20,074 - #8 ;
INFO  18:45:20,074 - #49 int
INFO  18:45:20,075 - #49 b
INFO  18:45:20,075 - #9 ,
INFO  18:45:20,076 - #49 c
INFO  18:45:20,076 - #8 ;
INFO  18:45:20,077 - #6 const
INFO  18:45:20,077 - #49 bool
INFO  18:45:20,077 - #49 t
INFO  18:45:20,077 - #7 =
INFO  18:45:20,077 - #51 true
INFO  18:45:20,078 - #9 ,
INFO  18:45:20,078 - #49 f
INFO  18:45:20,078 - #7 =
INFO  18:45:20,078 - #51 false
INFO  18:45:20,078 - #8 ;
INFO  18:45:20,079 - #49 int
INFO  18:45:20,079 - #49 niz1
INFO  18:45:20,079 - #10 [
INFO  18:45:20,079 - #11 ]
INFO  18:45:20,079 - #8 ;
INFO  18:45:20,080 - #49 int
INFO  18:45:20,080 - #49 d
INFO  18:45:20,080 - #9 ,
INFO  18:45:20,080 - #49 e
INFO  18:45:20,081 - #8 ;
INFO  18:45:20,081 - #4 {
INFO  18:45:20,081 - #49 char
INFO  18:45:20,082 - #49 dohvatPrviKarakter
INFO  18:45:20,082 - #20 (
INFO  18:45:20,082 - #49 char
INFO  18:45:20,082 - #49 niz
INFO  18:45:20,082 - #10 [
INFO  18:45:20,082 - #11 ]
INFO  18:45:20,082 - #21 )
INFO  18:45:20,083 - #49 char
INFO  18:45:20,083 - #49 s
INFO  18:45:20,083 - #8 ;
INFO  18:45:20,083 - #49 int
INFO  18:45:20,083 - #49 i
INFO  18:45:20,083 - #9 ,
INFO  18:45:20,083 - #49 j
INFO  18:45:20,084 - #8 ;
INFO  18:45:20,084 - #4 {
INFO  18:45:20,084 - #23 for
INFO  18:45:20,084 - #20 (
INFO  18:45:20,085 - #49 i
INFO  18:45:20,085 - #7 =
INFO  18:45:20,085 - #49 len
INFO  18:45:20,086 - #20 (
INFO  18:45:20,087 - #49 niz
INFO  18:45:20,087 - #21 )
INFO  18:45:20,088 - #9 ,
INFO  18:45:20,089 - #49 j
INFO  18:45:20,089 - #7 =
INFO  18:45:20,089 - #48 0
INFO  18:45:20,089 - #8 ;
INFO  18:45:20,089 - #49 i
INFO  18:45:20,090 - #33 >
INFO  18:45:20,090 - #48 0
INFO  18:45:20,091 - #8 ;
INFO  18:45:20,092 - #49 i
INFO  18:45:20,093 - #25 --
INFO  18:45:20,093 - #9 ,
INFO  18:45:20,093 - #49 j
INFO  18:45:20,093 - #24 ++
INFO  18:45:20,093 - #21 )
INFO  18:45:20,094 - #4 {
INFO  18:45:20,095 - #14 if
INFO  18:45:20,095 - #20 (
INFO  18:45:20,095 - #49 i
INFO  18:45:20,096 - #31 ==
INFO  18:45:20,096 - #48 1
INFO  18:45:20,096 - #26 &&
INFO  18:45:20,097 - #49 j
INFO  18:45:20,097 - #34 >=
INFO  18:45:20,097 - #48 0
INFO  18:45:20,097 - #27 ||
INFO  18:45:20,098 - #49 j
INFO  18:45:20,098 - #31 ==
INFO  18:45:20,099 - #48 0
INFO  18:45:20,099 - #21 )
INFO  18:45:20,099 - #4 {
INFO  18:45:20,100 - #49 s
INFO  18:45:20,100 - #7 =
INFO  18:45:20,100 - #49 niz
INFO  18:45:20,100 - #10 [
INFO  18:45:20,101 - #49 i
INFO  18:45:20,101 - #11 ]
INFO  18:45:20,101 - #8 ;
INFO  18:45:20,101 - #16 break
INFO  18:45:20,101 - #8 ;
INFO  18:45:20,102 - #5 }
INFO  18:45:20,103 - #5 }
INFO  18:45:20,103 - #18 return
INFO  18:45:20,104 - #49 s
INFO  18:45:20,104 - #8 ;
INFO  18:45:20,104 - #5 }
INFO  18:45:20,104 - #49 bool
INFO  18:45:20,105 - #49 provera
INFO  18:45:20,105 - #20 (
INFO  18:45:20,105 - #21 )
INFO  18:45:20,106 - #49 int
INFO  18:45:20,106 - #49 pom1
INFO  18:45:20,106 - #8 ;
INFO  18:45:20,106 - #4 {
INFO  18:45:20,106 - #49 pom1
INFO  18:45:20,106 - #7 =
INFO  18:45:20,106 - #28 -
INFO  18:45:20,106 - #20 (
INFO  18:45:20,106 - #48 5
INFO  18:45:20,106 - #38 *
INFO  18:45:20,106 - #48 2
INFO  18:45:20,108 - #21 )
INFO  18:45:20,108 - #37 +
INFO  18:45:20,108 - #48 11
INFO  18:45:20,109 - #8 ;
INFO  18:45:20,110 - #14 if
INFO  18:45:20,110 - #20 (
INFO  18:45:20,110 - #49 pom1
INFO  18:45:20,110 - #33 >
INFO  18:45:20,110 - #48 0
INFO  18:45:20,110 - #21 )
INFO  18:45:20,110 - #18 return
INFO  18:45:20,110 - #51 true
INFO  18:45:20,110 - #8 ;
INFO  18:45:20,110 - #15 else
INFO  18:45:20,110 - #18 return
INFO  18:45:20,111 - #51 false
INFO  18:45:20,111 - #8 ;
INFO  18:45:20,111 - #5 }
INFO  18:45:20,112 - #41 void
INFO  18:45:20,112 - #49 main
INFO  18:45:20,112 - #20 (
INFO  18:45:20,112 - #21 )
INFO  18:45:20,112 - #49 int
INFO  18:45:20,112 - #49 p1
INFO  18:45:20,112 - #9 ,
INFO  18:45:20,112 - #49 i
INFO  18:45:20,112 - #8 ;
INFO  18:45:20,112 - #6 const
INFO  18:45:20,112 - #49 int
INFO  18:45:20,113 - #49 p2
INFO  18:45:20,113 - #7 =
INFO  18:45:20,113 - #48 5
INFO  18:45:20,113 - #8 ;
INFO  18:45:20,113 - #49 char
INFO  18:45:20,113 - #49 p
INFO  18:45:20,113 - #8 ;
INFO  18:45:20,113 - #4 {
INFO  18:45:20,113 - #49 i
INFO  18:45:20,113 - #7 =
INFO  18:45:20,113 - #48 0
INFO  18:45:20,113 - #8 ;
INFO  18:45:20,113 - #14 if
INFO  18:45:20,113 - #20 (
INFO  18:45:20,113 - #49 i
INFO  18:45:20,113 - #31 ==
INFO  18:45:20,113 - #48 3
INFO  18:45:20,114 - #21 )
INFO  18:45:20,114 - #22 print
INFO  18:45:20,114 - #20 (
INFO  18:45:20,114 - #49 i
INFO  18:45:20,114 - #21 )
INFO  18:45:20,114 - #8 ;
INFO  18:45:20,114 - #15 else
INFO  18:45:20,114 - #14 if
INFO  18:45:20,114 - #20 (
INFO  18:45:20,114 - #49 i
INFO  18:45:20,114 - #31 ==
INFO  18:45:20,114 - #48 2
INFO  18:45:20,114 - #21 )
INFO  18:45:20,114 - #49 i
INFO  18:45:20,114 - #24 ++
INFO  18:45:20,115 - #8 ;
INFO  18:45:20,115 - #15 else
INFO  18:45:20,115 - #49 i
INFO  18:45:20,115 - #7 =
INFO  18:45:20,115 - #49 i
INFO  18:45:20,115 - #37 +
INFO  18:45:20,115 - #48 1
INFO  18:45:20,115 - #8 ;
INFO  18:45:20,115 - #22 print
INFO  18:45:20,115 - #20 (
INFO  18:45:20,115 - #49 i
INFO  18:45:20,115 - #21 )
INFO  18:45:20,115 - #8 ;
INFO  18:45:20,115 - #14 if
INFO  18:45:20,115 - #20 (
INFO  18:45:20,115 - #49 provera
INFO  18:45:20,116 - #20 (
INFO  18:45:20,116 - #21 )
INFO  18:45:20,116 - #21 )
INFO  18:45:20,117 - #22 print
INFO  18:45:20,117 - #20 (
INFO  18:45:20,117 - #50 t
INFO  18:45:20,117 - #21 )
INFO  18:45:20,117 - #8 ;
INFO  18:45:20,117 - #49 niz1
INFO  18:45:20,118 - #7 =
INFO  18:45:20,118 - #29 new
INFO  18:45:20,118 - #49 char
INFO  18:45:20,118 - #10 [
INFO  18:45:20,118 - #48 3
INFO  18:45:20,118 - #11 ]
INFO  18:45:20,118 - #8 ;
INFO  18:45:20,118 - #49 niz1
INFO  18:45:20,118 - #10 [
INFO  18:45:20,118 - #48 0
INFO  18:45:20,118 - #11 ]
INFO  18:45:20,118 - #7 =
INFO  18:45:20,118 - #50 a
INFO  18:45:20,118 - #8 ;
INFO  18:45:20,119 - #49 niz1
INFO  18:45:20,119 - #10 [
INFO  18:45:20,119 - #48 1
INFO  18:45:20,119 - #11 ]
INFO  18:45:20,119 - #7 =
INFO  18:45:20,119 - #50 b
INFO  18:45:20,119 - #8 ;
INFO  18:45:20,119 - #49 niz1
INFO  18:45:20,119 - #10 [
INFO  18:45:20,119 - #48 2
INFO  18:45:20,119 - #11 ]
INFO  18:45:20,119 - #7 =
INFO  18:45:20,119 - #50 c
INFO  18:45:20,119 - #8 ;
INFO  18:45:20,119 - #49 p
INFO  18:45:20,119 - #7 =
INFO  18:45:20,119 - #49 dohvatPrviKarakter
INFO  18:45:20,119 - #20 (
INFO  18:45:20,120 - #49 niz1
INFO  18:45:20,120 - #21 )
INFO  18:45:20,120 - #8 ;
INFO  18:45:20,120 - #22 print
INFO  18:45:20,120 - #20 (
INFO  18:45:20,120 - #49 p
INFO  18:45:20,120 - #21 )
INFO  18:45:20,120 - #8 ;
INFO  18:45:20,120 - #5 }
INFO  18:45:20,120 - #5 }
INFO  18:45:20,154 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:45:20,159 - ===================================
INFO  18:45:20,162 - Pocetak programa test301.
INFO  18:45:20,162 - Deklarisana je konstanta a na liniji 3
INFO  18:45:20,163 - Deklarisana je promenljiva b na liniji 4
INFO  18:45:20,164 - Deklarisana je promenljiva c na liniji 4
INFO  18:45:20,166 - Deklarisana je konstanta t na liniji 5
INFO  18:45:20,174 - Deklarisana je konstanta f na liniji 5
INFO  18:45:20,174 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:45:20,174 - Deklarisana je promenljiva d na liniji 7
INFO  18:45:20,174 - Deklarisana je promenljiva e na liniji 7
INFO  18:45:20,174 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:45:20,175 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:45:20,175 - Deklarisana je promenljiva s na liniji 12
INFO  18:45:20,175 - Deklarisana je promenljiva i na liniji 12
INFO  18:45:20,175 - Deklarisana je promenljiva j na liniji 12
INFO  18:45:25,030 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:45:25,126 - #2 program
INFO  18:45:25,127 - #49 test301
INFO  18:45:25,127 - #6 const
INFO  18:45:25,129 - #49 int
INFO  18:45:25,129 - #49 a
INFO  18:45:25,130 - #7 =
INFO  18:45:25,130 - #48 5
INFO  18:45:25,130 - #8 ;
INFO  18:45:25,131 - #49 int
INFO  18:45:25,131 - #49 b
INFO  18:45:25,131 - #9 ,
INFO  18:45:25,132 - #49 c
INFO  18:45:25,132 - #8 ;
INFO  18:45:25,133 - #6 const
INFO  18:45:25,134 - #49 bool
INFO  18:45:25,134 - #49 t
INFO  18:45:25,134 - #7 =
INFO  18:45:25,134 - #51 true
INFO  18:45:25,134 - #9 ,
INFO  18:45:25,135 - #49 f
INFO  18:45:25,135 - #7 =
INFO  18:45:25,135 - #51 false
INFO  18:45:25,135 - #8 ;
INFO  18:45:25,136 - #49 int
INFO  18:45:25,136 - #49 niz1
INFO  18:45:25,136 - #10 [
INFO  18:45:25,136 - #11 ]
INFO  18:45:25,136 - #8 ;
INFO  18:45:25,137 - #49 int
INFO  18:45:25,137 - #49 d
INFO  18:45:25,138 - #9 ,
INFO  18:45:25,138 - #49 e
INFO  18:45:25,138 - #8 ;
INFO  18:45:25,138 - #4 {
INFO  18:45:25,138 - #49 char
INFO  18:45:25,139 - #49 dohvatPrviKarakter
INFO  18:45:25,139 - #20 (
INFO  18:45:25,139 - #49 char
INFO  18:45:25,139 - #49 niz
INFO  18:45:25,139 - #10 [
INFO  18:45:25,139 - #11 ]
INFO  18:45:25,139 - #21 )
INFO  18:45:25,140 - #49 char
INFO  18:45:25,140 - #49 s
INFO  18:45:25,140 - #8 ;
INFO  18:45:25,140 - #49 int
INFO  18:45:25,140 - #49 i
INFO  18:45:25,141 - #9 ,
INFO  18:45:25,141 - #49 j
INFO  18:45:25,141 - #8 ;
INFO  18:45:25,141 - #4 {
INFO  18:45:25,141 - #23 for
INFO  18:45:25,141 - #20 (
INFO  18:45:25,142 - #49 i
INFO  18:45:25,142 - #7 =
INFO  18:45:25,142 - #49 len
INFO  18:45:25,143 - #20 (
INFO  18:45:25,143 - #49 niz
INFO  18:45:25,143 - #21 )
INFO  18:45:25,144 - #9 ,
INFO  18:45:25,145 - #49 j
INFO  18:45:25,145 - #7 =
INFO  18:45:25,145 - #48 0
INFO  18:45:25,145 - #8 ;
INFO  18:45:25,145 - #49 i
INFO  18:45:25,146 - #33 >
INFO  18:45:25,146 - #48 0
INFO  18:45:25,147 - #8 ;
INFO  18:45:25,148 - #49 i
INFO  18:45:25,149 - #25 --
INFO  18:45:25,149 - #9 ,
INFO  18:45:25,149 - #49 j
INFO  18:45:25,149 - #24 ++
INFO  18:45:25,149 - #21 )
INFO  18:45:25,150 - #4 {
INFO  18:45:25,151 - #14 if
INFO  18:45:25,151 - #20 (
INFO  18:45:25,151 - #49 i
INFO  18:45:25,152 - #31 ==
INFO  18:45:25,152 - #48 1
INFO  18:45:25,153 - #26 &&
INFO  18:45:25,153 - #49 j
INFO  18:45:25,153 - #34 >=
INFO  18:45:25,153 - #48 0
INFO  18:45:25,154 - #27 ||
INFO  18:45:25,154 - #49 j
INFO  18:45:25,155 - #31 ==
INFO  18:45:25,155 - #48 0
INFO  18:45:25,155 - #21 )
INFO  18:45:25,155 - #4 {
INFO  18:45:25,156 - #49 s
INFO  18:45:25,156 - #7 =
INFO  18:45:25,156 - #49 niz
INFO  18:45:25,156 - #10 [
INFO  18:45:25,157 - #49 i
INFO  18:45:25,157 - #11 ]
INFO  18:45:25,157 - #8 ;
INFO  18:45:25,158 - #16 break
INFO  18:45:25,158 - #8 ;
INFO  18:45:25,158 - #5 }
INFO  18:45:25,160 - #5 }
INFO  18:45:25,160 - #18 return
INFO  18:45:25,160 - #49 s
INFO  18:45:25,160 - #8 ;
INFO  18:45:25,160 - #5 }
INFO  18:45:25,160 - #49 bool
INFO  18:45:25,161 - #49 provera
INFO  18:45:25,162 - #20 (
INFO  18:45:25,162 - #21 )
INFO  18:45:25,162 - #49 int
INFO  18:45:25,162 - #49 pom1
INFO  18:45:25,162 - #8 ;
INFO  18:45:25,162 - #4 {
INFO  18:45:25,163 - #49 pom1
INFO  18:45:25,163 - #7 =
INFO  18:45:25,163 - #28 -
INFO  18:45:25,163 - #20 (
INFO  18:45:25,163 - #48 5
INFO  18:45:25,163 - #38 *
INFO  18:45:25,163 - #48 2
INFO  18:45:25,164 - #21 )
INFO  18:45:25,164 - #37 +
INFO  18:45:25,165 - #48 11
INFO  18:45:25,165 - #8 ;
INFO  18:45:25,166 - #14 if
INFO  18:45:25,166 - #20 (
INFO  18:45:25,166 - #49 pom1
INFO  18:45:25,166 - #33 >
INFO  18:45:25,166 - #48 0
INFO  18:45:25,166 - #21 )
INFO  18:45:25,166 - #18 return
INFO  18:45:25,166 - #51 true
INFO  18:45:25,166 - #8 ;
INFO  18:45:25,166 - #15 else
INFO  18:45:25,166 - #18 return
INFO  18:45:25,167 - #51 false
INFO  18:45:25,167 - #8 ;
INFO  18:45:25,167 - #5 }
INFO  18:45:25,168 - #41 void
INFO  18:45:25,168 - #49 main
INFO  18:45:25,168 - #20 (
INFO  18:45:25,168 - #21 )
INFO  18:45:25,168 - #49 int
INFO  18:45:25,168 - #49 p1
INFO  18:45:25,168 - #9 ,
INFO  18:45:25,168 - #49 i
INFO  18:45:25,168 - #8 ;
INFO  18:45:25,168 - #6 const
INFO  18:45:25,168 - #49 int
INFO  18:45:25,168 - #49 p2
INFO  18:45:25,168 - #7 =
INFO  18:45:25,168 - #48 5
INFO  18:45:25,168 - #8 ;
INFO  18:45:25,169 - #49 char
INFO  18:45:25,169 - #49 p
INFO  18:45:25,169 - #8 ;
INFO  18:45:25,169 - #4 {
INFO  18:45:25,169 - #49 i
INFO  18:45:25,169 - #7 =
INFO  18:45:25,169 - #48 0
INFO  18:45:25,169 - #8 ;
INFO  18:45:25,169 - #14 if
INFO  18:45:25,169 - #20 (
INFO  18:45:25,169 - #49 i
INFO  18:45:25,169 - #31 ==
INFO  18:45:25,169 - #48 3
INFO  18:45:25,169 - #21 )
INFO  18:45:25,169 - #22 print
INFO  18:45:25,169 - #20 (
INFO  18:45:25,169 - #49 i
INFO  18:45:25,170 - #21 )
INFO  18:45:25,170 - #8 ;
INFO  18:45:25,170 - #15 else
INFO  18:45:25,170 - #14 if
INFO  18:45:25,170 - #20 (
INFO  18:45:25,170 - #49 i
INFO  18:45:25,170 - #31 ==
INFO  18:45:25,170 - #48 2
INFO  18:45:25,170 - #21 )
INFO  18:45:25,170 - #49 i
INFO  18:45:25,170 - #24 ++
INFO  18:45:25,170 - #8 ;
INFO  18:45:25,170 - #15 else
INFO  18:45:25,170 - #49 i
INFO  18:45:25,170 - #7 =
INFO  18:45:25,170 - #49 i
INFO  18:45:25,170 - #37 +
INFO  18:45:25,171 - #48 1
INFO  18:45:25,171 - #8 ;
INFO  18:45:25,171 - #22 print
INFO  18:45:25,171 - #20 (
INFO  18:45:25,171 - #49 i
INFO  18:45:25,171 - #21 )
INFO  18:45:25,171 - #8 ;
INFO  18:45:25,171 - #14 if
INFO  18:45:25,171 - #20 (
INFO  18:45:25,171 - #49 provera
INFO  18:45:25,171 - #20 (
INFO  18:45:25,171 - #21 )
INFO  18:45:25,174 - #21 )
INFO  18:45:25,174 - #22 print
INFO  18:45:25,174 - #20 (
INFO  18:45:25,174 - #50 t
INFO  18:45:25,175 - #21 )
INFO  18:45:25,175 - #8 ;
INFO  18:45:25,175 - #49 niz1
INFO  18:45:25,175 - #7 =
INFO  18:45:25,175 - #29 new
INFO  18:45:25,175 - #49 char
INFO  18:45:25,175 - #10 [
INFO  18:45:25,175 - #48 3
INFO  18:45:25,175 - #11 ]
INFO  18:45:25,175 - #8 ;
INFO  18:45:25,176 - #49 niz1
INFO  18:45:25,176 - #10 [
INFO  18:45:25,176 - #48 0
INFO  18:45:25,176 - #11 ]
INFO  18:45:25,176 - #7 =
INFO  18:45:25,176 - #50 a
INFO  18:45:25,176 - #8 ;
INFO  18:45:25,176 - #49 niz1
INFO  18:45:25,176 - #10 [
INFO  18:45:25,176 - #48 1
INFO  18:45:25,176 - #11 ]
INFO  18:45:25,176 - #7 =
INFO  18:45:25,176 - #50 b
INFO  18:45:25,177 - #8 ;
INFO  18:45:25,177 - #49 niz1
INFO  18:45:25,177 - #10 [
INFO  18:45:25,177 - #48 2
INFO  18:45:25,177 - #11 ]
INFO  18:45:25,178 - #7 =
INFO  18:45:25,178 - #50 c
INFO  18:45:25,178 - #8 ;
INFO  18:45:25,178 - #49 p
INFO  18:45:25,178 - #7 =
INFO  18:45:25,178 - #49 dohvatPrviKarakter
INFO  18:45:25,178 - #20 (
INFO  18:45:25,178 - #49 niz1
INFO  18:45:25,178 - #21 )
INFO  18:45:25,178 - #8 ;
INFO  18:45:25,179 - #22 print
INFO  18:45:25,179 - #20 (
INFO  18:45:25,179 - #49 p
INFO  18:45:25,179 - #21 )
INFO  18:45:25,179 - #8 ;
INFO  18:45:25,179 - #5 }
INFO  18:45:25,179 - #5 }
INFO  18:45:25,211 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:45:25,217 - ===================================
INFO  18:45:25,219 - Pocetak programa test301.
INFO  18:45:25,220 - Deklarisana je konstanta a na liniji 3
INFO  18:45:25,221 - Deklarisana je promenljiva b na liniji 4
INFO  18:45:25,221 - Deklarisana je promenljiva c na liniji 4
INFO  18:45:25,221 - Deklarisana je konstanta t na liniji 5
INFO  18:45:25,222 - Deklarisana je konstanta f na liniji 5
INFO  18:45:25,222 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:45:25,222 - Deklarisana je promenljiva d na liniji 7
INFO  18:45:25,222 - Deklarisana je promenljiva e na liniji 7
INFO  18:45:25,222 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:45:25,222 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:45:25,222 - Deklarisana je promenljiva s na liniji 12
INFO  18:45:25,222 - Deklarisana je promenljiva i na liniji 12
INFO  18:45:25,223 - Deklarisana je promenljiva j na liniji 12
INFO  18:45:31,117 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:45:31,209 - #2 program
INFO  18:45:31,209 - #49 test301
INFO  18:45:31,209 - #6 const
INFO  18:45:31,210 - #49 int
INFO  18:45:31,211 - #49 a
INFO  18:45:31,211 - #7 =
INFO  18:45:31,211 - #48 5
INFO  18:45:31,211 - #8 ;
INFO  18:45:31,212 - #49 int
INFO  18:45:31,212 - #49 b
INFO  18:45:31,212 - #9 ,
INFO  18:45:31,213 - #49 c
INFO  18:45:31,213 - #8 ;
INFO  18:45:31,214 - #6 const
INFO  18:45:31,214 - #49 bool
INFO  18:45:31,214 - #49 t
INFO  18:45:31,214 - #7 =
INFO  18:45:31,214 - #51 true
INFO  18:45:31,214 - #9 ,
INFO  18:45:31,215 - #49 f
INFO  18:45:31,215 - #7 =
INFO  18:45:31,215 - #51 false
INFO  18:45:31,215 - #8 ;
INFO  18:45:31,215 - #49 int
INFO  18:45:31,215 - #49 niz1
INFO  18:45:31,215 - #10 [
INFO  18:45:31,216 - #11 ]
INFO  18:45:31,216 - #8 ;
INFO  18:45:31,217 - #49 int
INFO  18:45:31,217 - #49 d
INFO  18:45:31,217 - #9 ,
INFO  18:45:31,217 - #49 e
INFO  18:45:31,217 - #8 ;
INFO  18:45:31,217 - #4 {
INFO  18:45:31,217 - #49 char
INFO  18:45:31,218 - #49 dohvatPrviKarakter
INFO  18:45:31,218 - #20 (
INFO  18:45:31,218 - #49 char
INFO  18:45:31,219 - #49 niz
INFO  18:45:31,219 - #10 [
INFO  18:45:31,219 - #11 ]
INFO  18:45:31,219 - #21 )
INFO  18:45:31,219 - #49 char
INFO  18:45:31,219 - #49 s
INFO  18:45:31,220 - #8 ;
INFO  18:45:31,220 - #49 int
INFO  18:45:31,220 - #49 i
INFO  18:45:31,220 - #9 ,
INFO  18:45:31,220 - #49 j
INFO  18:45:31,220 - #8 ;
INFO  18:45:31,221 - #4 {
INFO  18:45:31,221 - #23 for
INFO  18:45:31,221 - #20 (
INFO  18:45:31,222 - #49 i
INFO  18:45:31,222 - #7 =
INFO  18:45:31,223 - #49 len
INFO  18:45:31,224 - #20 (
INFO  18:45:31,224 - #49 niz
INFO  18:45:31,224 - #21 )
INFO  18:45:31,226 - #9 ,
INFO  18:45:31,226 - #49 j
INFO  18:45:31,227 - #7 =
INFO  18:45:31,227 - #48 0
INFO  18:45:31,227 - #8 ;
INFO  18:45:31,227 - #49 i
INFO  18:45:31,228 - #33 >
INFO  18:45:31,229 - #48 0
INFO  18:45:31,230 - #8 ;
INFO  18:45:31,231 - #49 i
INFO  18:45:31,233 - #25 --
INFO  18:45:31,233 - #9 ,
INFO  18:45:31,233 - #49 j
INFO  18:45:31,233 - #24 ++
INFO  18:45:31,233 - #21 )
INFO  18:45:31,234 - #4 {
INFO  18:45:31,235 - #14 if
INFO  18:45:31,235 - #20 (
INFO  18:45:31,235 - #49 i
INFO  18:45:31,236 - #31 ==
INFO  18:45:31,236 - #48 1
INFO  18:45:31,237 - #26 &&
INFO  18:45:31,237 - #49 j
INFO  18:45:31,237 - #34 >=
INFO  18:45:31,237 - #48 0
INFO  18:45:31,238 - #27 ||
INFO  18:45:31,238 - #49 j
INFO  18:45:31,239 - #31 ==
INFO  18:45:31,239 - #48 0
INFO  18:45:31,239 - #21 )
INFO  18:45:31,240 - #4 {
INFO  18:45:31,240 - #49 s
INFO  18:45:31,241 - #7 =
INFO  18:45:31,241 - #49 niz
INFO  18:45:31,241 - #10 [
INFO  18:45:31,242 - #49 i
INFO  18:45:31,242 - #11 ]
INFO  18:45:31,242 - #8 ;
INFO  18:45:31,242 - #16 break
INFO  18:45:31,242 - #8 ;
INFO  18:45:31,243 - #5 }
INFO  18:45:31,244 - #5 }
INFO  18:45:31,245 - #18 return
INFO  18:45:31,245 - #49 s
INFO  18:45:31,245 - #8 ;
INFO  18:45:31,245 - #5 }
INFO  18:45:31,245 - #49 bool
INFO  18:45:31,246 - #49 provera
INFO  18:45:31,246 - #20 (
INFO  18:45:31,246 - #21 )
INFO  18:45:31,247 - #49 int
INFO  18:45:31,247 - #49 pom1
INFO  18:45:31,247 - #8 ;
INFO  18:45:31,247 - #4 {
INFO  18:45:31,247 - #49 pom1
INFO  18:45:31,247 - #7 =
INFO  18:45:31,247 - #28 -
INFO  18:45:31,247 - #20 (
INFO  18:45:31,248 - #48 5
INFO  18:45:31,248 - #38 *
INFO  18:45:31,248 - #48 2
INFO  18:45:31,249 - #21 )
INFO  18:45:31,249 - #37 +
INFO  18:45:31,249 - #48 11
INFO  18:45:31,251 - #8 ;
INFO  18:45:31,251 - #14 if
INFO  18:45:31,251 - #20 (
INFO  18:45:31,251 - #49 pom1
INFO  18:45:31,251 - #33 >
INFO  18:45:31,251 - #48 0
INFO  18:45:31,252 - #21 )
INFO  18:45:31,252 - #18 return
INFO  18:45:31,252 - #51 true
INFO  18:45:31,252 - #8 ;
INFO  18:45:31,252 - #15 else
INFO  18:45:31,252 - #18 return
INFO  18:45:31,253 - #51 false
INFO  18:45:31,253 - #8 ;
INFO  18:45:31,253 - #5 }
INFO  18:45:31,253 - #41 void
INFO  18:45:31,253 - #49 main
INFO  18:45:31,253 - #20 (
INFO  18:45:31,254 - #21 )
INFO  18:45:31,254 - #49 int
INFO  18:45:31,254 - #49 p1
INFO  18:45:31,254 - #9 ,
INFO  18:45:31,254 - #49 i
INFO  18:45:31,254 - #8 ;
INFO  18:45:31,254 - #6 const
INFO  18:45:31,254 - #49 int
INFO  18:45:31,254 - #49 p2
INFO  18:45:31,254 - #7 =
INFO  18:45:31,254 - #48 5
INFO  18:45:31,254 - #8 ;
INFO  18:45:31,254 - #49 char
INFO  18:45:31,254 - #49 p
INFO  18:45:31,254 - #8 ;
INFO  18:45:31,254 - #4 {
INFO  18:45:31,255 - #49 i
INFO  18:45:31,255 - #7 =
INFO  18:45:31,255 - #48 0
INFO  18:45:31,255 - #8 ;
INFO  18:45:31,255 - #14 if
INFO  18:45:31,255 - #20 (
INFO  18:45:31,255 - #49 i
INFO  18:45:31,255 - #31 ==
INFO  18:45:31,255 - #48 3
INFO  18:45:31,255 - #21 )
INFO  18:45:31,255 - #22 print
INFO  18:45:31,255 - #20 (
INFO  18:45:31,255 - #49 i
INFO  18:45:31,255 - #21 )
INFO  18:45:31,255 - #8 ;
INFO  18:45:31,255 - #15 else
INFO  18:45:31,256 - #14 if
INFO  18:45:31,256 - #20 (
INFO  18:45:31,256 - #49 i
INFO  18:45:31,256 - #31 ==
INFO  18:45:31,256 - #48 2
INFO  18:45:31,256 - #21 )
INFO  18:45:31,256 - #49 i
INFO  18:45:31,256 - #24 ++
INFO  18:45:31,256 - #8 ;
INFO  18:45:31,256 - #15 else
INFO  18:45:31,256 - #49 i
INFO  18:45:31,256 - #7 =
INFO  18:45:31,256 - #49 i
INFO  18:45:31,256 - #37 +
INFO  18:45:31,257 - #48 1
INFO  18:45:31,257 - #8 ;
INFO  18:45:31,257 - #22 print
INFO  18:45:31,257 - #20 (
INFO  18:45:31,257 - #49 i
INFO  18:45:31,257 - #21 )
INFO  18:45:31,257 - #8 ;
INFO  18:45:31,257 - #14 if
INFO  18:45:31,257 - #20 (
INFO  18:45:31,257 - #49 provera
INFO  18:45:31,257 - #20 (
INFO  18:45:31,257 - #21 )
INFO  18:45:31,258 - #21 )
INFO  18:45:31,258 - #22 print
INFO  18:45:31,258 - #20 (
INFO  18:45:31,259 - #50 t
INFO  18:45:31,259 - #21 )
INFO  18:45:31,259 - #8 ;
INFO  18:45:31,259 - #49 niz1
INFO  18:45:31,259 - #7 =
INFO  18:45:31,259 - #29 new
INFO  18:45:31,259 - #49 char
INFO  18:45:31,259 - #10 [
INFO  18:45:31,259 - #48 3
INFO  18:45:31,259 - #11 ]
INFO  18:45:31,259 - #8 ;
INFO  18:45:31,260 - #49 niz1
INFO  18:45:31,260 - #10 [
INFO  18:45:31,260 - #48 0
INFO  18:45:31,260 - #11 ]
INFO  18:45:31,260 - #7 =
INFO  18:45:31,260 - #50 a
INFO  18:45:31,260 - #8 ;
INFO  18:45:31,260 - #49 niz1
INFO  18:45:31,260 - #10 [
INFO  18:45:31,260 - #48 1
INFO  18:45:31,260 - #11 ]
INFO  18:45:31,260 - #7 =
INFO  18:45:31,260 - #50 b
INFO  18:45:31,260 - #8 ;
INFO  18:45:31,260 - #49 niz1
INFO  18:45:31,260 - #10 [
INFO  18:45:31,260 - #48 2
INFO  18:45:31,260 - #11 ]
INFO  18:45:31,261 - #7 =
INFO  18:45:31,261 - #50 c
INFO  18:45:31,261 - #8 ;
INFO  18:45:31,261 - #49 p
INFO  18:45:31,261 - #7 =
INFO  18:45:31,261 - #49 dohvatPrviKarakter
INFO  18:45:31,261 - #20 (
INFO  18:45:31,261 - #49 niz1
INFO  18:45:31,261 - #21 )
INFO  18:45:31,261 - #8 ;
INFO  18:45:31,261 - #22 print
INFO  18:45:31,261 - #20 (
INFO  18:45:31,261 - #49 p
INFO  18:45:31,261 - #21 )
INFO  18:45:31,261 - #8 ;
INFO  18:45:31,261 - #5 }
INFO  18:45:31,261 - #5 }
INFO  18:45:31,294 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:45:31,296 - ===================================
INFO  18:45:31,296 - Pocetak programa test301.
INFO  18:45:31,296 - Deklarisana je konstanta a na liniji 3
INFO  18:45:31,297 - Deklarisana je promenljiva b na liniji 4
INFO  18:45:31,297 - Deklarisana je promenljiva c na liniji 4
INFO  18:45:31,297 - Deklarisana je konstanta t na liniji 5
INFO  18:45:31,297 - Deklarisana je konstanta f na liniji 5
INFO  18:45:31,297 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:45:31,297 - Deklarisana je promenljiva d na liniji 7
INFO  18:45:31,297 - Deklarisana je promenljiva e na liniji 7
INFO  18:45:31,297 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:45:31,297 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:45:31,297 - Deklarisana je promenljiva s na liniji 12
INFO  18:45:31,297 - Deklarisana je promenljiva i na liniji 12
INFO  18:45:31,297 - Deklarisana je promenljiva j na liniji 12
ERROR 18:45:41,372 - Greska, nepoklapanje tipa parametara pozvane funkcije na liniji 14
INFO  18:45:41,372 - Pronadjen poziv funkcije len na liniji 14
INFO  18:45:51,341 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:45:51,341 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:45:56,354 - Kreiran/promenjen element niza niz
INFO  18:45:56,355 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  18:45:56,355 - Dobra povratna vrednost funkcije na liniji 21
INFO  18:45:56,355 - Obradjuje se funkcija provera na liniji 24
INFO  18:45:56,355 - Deklarisana je promenljiva pom1 na liniji 25
INFO  18:46:03,782 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  18:46:03,782 - Dobra povratna vrednost funkcije na liniji 29
INFO  18:46:03,782 - Dobra povratna vrednost funkcije na liniji 30
INFO  18:46:03,782 - Obradjuje se funkcija main na liniji 33
INFO  18:46:03,782 - Deklarisana je promenljiva p1 na liniji 34
INFO  18:46:03,782 - Deklarisana je promenljiva i na liniji 34
INFO  18:46:03,782 - Deklarisana je konstanta p2 na liniji 35
INFO  18:46:03,782 - Deklarisana je promenljiva p na liniji 36
INFO  18:46:03,782 - Designator i expr su odgovarajuceg tipa na liniji 38
INFO  18:46:03,782 - Obradjena funkcija PRINT na liniji 39
INFO  18:46:03,783 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  18:46:03,783 - Obradjena funkcija PRINT na liniji 42
INFO  18:46:03,783 - Pronadjen poziv funkcije provera na liniji 44
INFO  18:46:03,783 - Obradjena funkcija PRINT na liniji 44
INFO  18:46:12,350 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:46:12,419 - #2 program
INFO  18:46:12,419 - #49 test301
INFO  18:46:12,420 - #6 const
INFO  18:46:12,421 - #49 int
INFO  18:46:12,421 - #49 a
INFO  18:46:12,422 - #7 =
INFO  18:46:12,422 - #48 5
INFO  18:46:12,423 - #8 ;
INFO  18:46:12,423 - #49 int
INFO  18:46:12,423 - #49 b
INFO  18:46:12,423 - #9 ,
INFO  18:46:12,425 - #49 c
INFO  18:46:12,425 - #8 ;
INFO  18:46:12,425 - #6 const
INFO  18:46:12,425 - #49 bool
INFO  18:46:12,425 - #49 t
INFO  18:46:12,426 - #7 =
INFO  18:46:12,426 - #51 true
INFO  18:46:12,426 - #9 ,
INFO  18:46:12,426 - #49 f
INFO  18:46:12,426 - #7 =
INFO  18:46:12,427 - #51 false
INFO  18:46:12,427 - #8 ;
INFO  18:46:12,427 - #49 int
INFO  18:46:12,427 - #49 niz1
INFO  18:46:12,427 - #10 [
INFO  18:46:12,427 - #11 ]
INFO  18:46:12,428 - #8 ;
INFO  18:46:12,429 - #49 int
INFO  18:46:12,429 - #49 d
INFO  18:46:12,429 - #9 ,
INFO  18:46:12,429 - #49 e
INFO  18:46:12,429 - #8 ;
INFO  18:46:12,429 - #4 {
INFO  18:46:12,429 - #49 char
INFO  18:46:12,430 - #49 dohvatPrviKarakter
INFO  18:46:12,431 - #20 (
INFO  18:46:12,431 - #49 char
INFO  18:46:12,431 - #49 niz
INFO  18:46:12,431 - #10 [
INFO  18:46:12,432 - #11 ]
INFO  18:46:12,432 - #21 )
INFO  18:46:12,433 - #49 char
INFO  18:46:12,434 - #49 s
INFO  18:46:12,434 - #8 ;
INFO  18:46:12,434 - #49 int
INFO  18:46:12,434 - #49 i
INFO  18:46:12,435 - #9 ,
INFO  18:46:12,435 - #49 j
INFO  18:46:12,435 - #8 ;
INFO  18:46:12,435 - #4 {
INFO  18:46:12,435 - #23 for
INFO  18:46:12,435 - #20 (
INFO  18:46:12,437 - #49 i
INFO  18:46:12,437 - #7 =
INFO  18:46:12,438 - #49 len
INFO  18:46:12,439 - #20 (
INFO  18:46:12,439 - #49 niz
INFO  18:46:12,439 - #21 )
INFO  18:46:12,440 - #9 ,
INFO  18:46:12,440 - #49 j
INFO  18:46:12,441 - #7 =
INFO  18:46:12,441 - #48 0
INFO  18:46:12,441 - #8 ;
INFO  18:46:12,441 - #49 i
INFO  18:46:12,442 - #33 >
INFO  18:46:12,442 - #48 0
INFO  18:46:12,444 - #8 ;
INFO  18:46:12,445 - #49 i
INFO  18:46:12,446 - #25 --
INFO  18:46:12,446 - #9 ,
INFO  18:46:12,447 - #49 j
INFO  18:46:12,447 - #24 ++
INFO  18:46:12,447 - #21 )
INFO  18:46:12,448 - #4 {
INFO  18:46:12,449 - #14 if
INFO  18:46:12,449 - #20 (
INFO  18:46:12,449 - #49 i
INFO  18:46:12,451 - #31 ==
INFO  18:46:12,451 - #48 1
INFO  18:46:12,452 - #26 &&
INFO  18:46:12,452 - #49 j
INFO  18:46:12,452 - #34 >=
INFO  18:46:12,452 - #48 0
INFO  18:46:12,453 - #27 ||
INFO  18:46:12,454 - #49 j
INFO  18:46:12,455 - #31 ==
INFO  18:46:12,455 - #48 0
INFO  18:46:12,455 - #21 )
INFO  18:46:12,455 - #4 {
INFO  18:46:12,457 - #49 s
INFO  18:46:12,457 - #7 =
INFO  18:46:12,457 - #49 niz
INFO  18:46:12,457 - #10 [
INFO  18:46:12,458 - #49 i
INFO  18:46:12,458 - #11 ]
INFO  18:46:12,458 - #8 ;
INFO  18:46:12,459 - #16 break
INFO  18:46:12,459 - #8 ;
INFO  18:46:12,459 - #5 }
INFO  18:46:12,460 - #5 }
INFO  18:46:12,461 - #18 return
INFO  18:46:12,461 - #49 s
INFO  18:46:12,461 - #8 ;
INFO  18:46:12,461 - #5 }
INFO  18:46:12,462 - #49 bool
INFO  18:46:12,463 - #49 provera
INFO  18:46:12,463 - #20 (
INFO  18:46:12,463 - #21 )
INFO  18:46:12,463 - #49 int
INFO  18:46:12,464 - #49 pom1
INFO  18:46:12,464 - #8 ;
INFO  18:46:12,464 - #4 {
INFO  18:46:12,464 - #49 pom1
INFO  18:46:12,464 - #7 =
INFO  18:46:12,464 - #28 -
INFO  18:46:12,464 - #20 (
INFO  18:46:12,464 - #48 5
INFO  18:46:12,464 - #38 *
INFO  18:46:12,464 - #48 2
INFO  18:46:12,465 - #21 )
INFO  18:46:12,466 - #37 +
INFO  18:46:12,466 - #48 11
INFO  18:46:12,467 - #8 ;
INFO  18:46:12,467 - #14 if
INFO  18:46:12,467 - #20 (
INFO  18:46:12,467 - #49 pom1
INFO  18:46:12,467 - #33 >
INFO  18:46:12,467 - #48 0
INFO  18:46:12,467 - #21 )
INFO  18:46:12,468 - #18 return
INFO  18:46:12,468 - #51 true
INFO  18:46:12,468 - #8 ;
INFO  18:46:12,468 - #15 else
INFO  18:46:12,468 - #18 return
INFO  18:46:12,469 - #51 false
INFO  18:46:12,469 - #8 ;
INFO  18:46:12,469 - #5 }
INFO  18:46:12,469 - #41 void
INFO  18:46:12,469 - #49 main
INFO  18:46:12,469 - #20 (
INFO  18:46:12,470 - #21 )
INFO  18:46:12,470 - #49 int
INFO  18:46:12,470 - #49 p1
INFO  18:46:12,470 - #9 ,
INFO  18:46:12,470 - #49 i
INFO  18:46:12,470 - #8 ;
INFO  18:46:12,470 - #6 const
INFO  18:46:12,470 - #49 int
INFO  18:46:12,470 - #49 p2
INFO  18:46:12,470 - #7 =
INFO  18:46:12,470 - #48 5
INFO  18:46:12,470 - #8 ;
INFO  18:46:12,470 - #49 char
INFO  18:46:12,470 - #49 p
INFO  18:46:12,470 - #8 ;
INFO  18:46:12,470 - #4 {
INFO  18:46:12,470 - #49 i
INFO  18:46:12,470 - #7 =
INFO  18:46:12,471 - #48 0
INFO  18:46:12,471 - #8 ;
INFO  18:46:12,471 - #14 if
INFO  18:46:12,471 - #20 (
INFO  18:46:12,471 - #49 i
INFO  18:46:12,471 - #31 ==
INFO  18:46:12,471 - #48 3
INFO  18:46:12,471 - #21 )
INFO  18:46:12,471 - #22 print
INFO  18:46:12,471 - #20 (
INFO  18:46:12,471 - #49 i
INFO  18:46:12,471 - #21 )
INFO  18:46:12,471 - #8 ;
INFO  18:46:12,471 - #15 else
INFO  18:46:12,472 - #14 if
INFO  18:46:12,472 - #20 (
INFO  18:46:12,472 - #49 i
INFO  18:46:12,472 - #31 ==
INFO  18:46:12,472 - #48 2
INFO  18:46:12,472 - #21 )
INFO  18:46:12,472 - #49 i
INFO  18:46:12,472 - #24 ++
INFO  18:46:12,472 - #8 ;
INFO  18:46:12,472 - #15 else
INFO  18:46:12,472 - #49 i
INFO  18:46:12,472 - #7 =
INFO  18:46:12,472 - #49 i
INFO  18:46:12,472 - #37 +
INFO  18:46:12,472 - #48 1
INFO  18:46:12,473 - #8 ;
INFO  18:46:12,473 - #22 print
INFO  18:46:12,473 - #20 (
INFO  18:46:12,473 - #49 i
INFO  18:46:12,473 - #21 )
INFO  18:46:12,473 - #8 ;
INFO  18:46:12,473 - #14 if
INFO  18:46:12,473 - #20 (
INFO  18:46:12,473 - #49 provera
INFO  18:46:12,473 - #20 (
INFO  18:46:12,473 - #21 )
INFO  18:46:12,474 - #21 )
INFO  18:46:12,474 - #22 print
INFO  18:46:12,474 - #20 (
INFO  18:46:12,474 - #50 t
INFO  18:46:12,475 - #21 )
INFO  18:46:12,475 - #8 ;
INFO  18:46:12,475 - #49 niz1
INFO  18:46:12,475 - #7 =
INFO  18:46:12,475 - #29 new
INFO  18:46:12,475 - #49 char
INFO  18:46:12,475 - #10 [
INFO  18:46:12,475 - #48 3
INFO  18:46:12,475 - #11 ]
INFO  18:46:12,475 - #8 ;
INFO  18:46:12,475 - #49 niz1
INFO  18:46:12,475 - #10 [
INFO  18:46:12,475 - #48 0
INFO  18:46:12,475 - #11 ]
INFO  18:46:12,475 - #7 =
INFO  18:46:12,475 - #50 a
INFO  18:46:12,475 - #8 ;
INFO  18:46:12,475 - #49 niz1
INFO  18:46:12,476 - #10 [
INFO  18:46:12,476 - #48 1
INFO  18:46:12,476 - #11 ]
INFO  18:46:12,476 - #7 =
INFO  18:46:12,476 - #50 b
INFO  18:46:12,476 - #8 ;
INFO  18:46:12,476 - #49 niz1
INFO  18:46:12,476 - #10 [
INFO  18:46:12,476 - #48 2
INFO  18:46:12,476 - #11 ]
INFO  18:46:12,476 - #7 =
INFO  18:46:12,476 - #50 c
INFO  18:46:12,476 - #8 ;
INFO  18:46:12,476 - #49 p
INFO  18:46:12,476 - #7 =
INFO  18:46:12,476 - #49 dohvatPrviKarakter
INFO  18:46:12,476 - #20 (
INFO  18:46:12,476 - #49 niz1
INFO  18:46:12,477 - #21 )
INFO  18:46:12,477 - #8 ;
INFO  18:46:12,477 - #22 print
INFO  18:46:12,477 - #20 (
INFO  18:46:12,477 - #49 p
INFO  18:46:12,477 - #21 )
INFO  18:46:12,477 - #8 ;
INFO  18:46:12,477 - #5 }
INFO  18:46:12,477 - #5 }
INFO  18:46:12,489 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:46:12,490 - ===================================
INFO  18:46:12,491 - Pocetak programa test301.
INFO  18:46:12,491 - Deklarisana je konstanta a na liniji 3
INFO  18:46:12,491 - Deklarisana je promenljiva b na liniji 4
INFO  18:46:12,491 - Deklarisana je promenljiva c na liniji 4
INFO  18:46:12,491 - Deklarisana je konstanta t na liniji 5
INFO  18:46:12,491 - Deklarisana je konstanta f na liniji 5
INFO  18:46:12,491 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:46:12,492 - Deklarisana je promenljiva d na liniji 7
INFO  18:46:12,492 - Deklarisana je promenljiva e na liniji 7
INFO  18:46:12,492 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:46:12,492 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:46:12,492 - Deklarisana je promenljiva s na liniji 12
INFO  18:46:12,492 - Deklarisana je promenljiva i na liniji 12
INFO  18:46:12,492 - Deklarisana je promenljiva j na liniji 12
ERROR 18:46:12,492 - Greska, nepoklapanje tipa parametara pozvane funkcije na liniji 14
INFO  18:46:12,492 - Pronadjen poziv funkcije len na liniji 14
INFO  18:46:12,493 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:46:12,493 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:46:12,493 - Kreiran/promenjen element niza niz
INFO  18:46:12,493 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  18:46:12,493 - Dobra povratna vrednost funkcije na liniji 21
INFO  18:46:12,493 - Obradjuje se funkcija provera na liniji 24
INFO  18:46:12,493 - Deklarisana je promenljiva pom1 na liniji 25
INFO  18:46:12,494 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  18:46:12,494 - Dobra povratna vrednost funkcije na liniji 29
INFO  18:46:12,494 - Dobra povratna vrednost funkcije na liniji 30
INFO  18:46:12,494 - Obradjuje se funkcija main na liniji 33
INFO  18:46:12,494 - Deklarisana je promenljiva p1 na liniji 34
INFO  18:46:12,494 - Deklarisana je promenljiva i na liniji 34
INFO  18:46:12,494 - Deklarisana je konstanta p2 na liniji 35
INFO  18:46:12,494 - Deklarisana je promenljiva p na liniji 36
INFO  18:46:12,494 - Designator i expr su odgovarajuceg tipa na liniji 38
INFO  18:46:12,494 - Obradjena funkcija PRINT na liniji 39
INFO  18:46:12,494 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  18:46:12,494 - Obradjena funkcija PRINT na liniji 42
INFO  18:46:12,495 - Pronadjen poziv funkcije provera na liniji 44
INFO  18:46:12,495 - Obradjena funkcija PRINT na liniji 44
INFO  18:46:19,237 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:46:19,316 - #2 program
INFO  18:46:19,316 - #49 test301
INFO  18:46:19,316 - #6 const
INFO  18:46:19,318 - #49 int
INFO  18:46:19,318 - #49 a
INFO  18:46:19,319 - #7 =
INFO  18:46:19,319 - #48 5
INFO  18:46:19,319 - #8 ;
INFO  18:46:19,319 - #49 int
INFO  18:46:19,320 - #49 b
INFO  18:46:19,320 - #9 ,
INFO  18:46:19,321 - #49 c
INFO  18:46:19,321 - #8 ;
INFO  18:46:19,321 - #6 const
INFO  18:46:19,322 - #49 bool
INFO  18:46:19,322 - #49 t
INFO  18:46:19,322 - #7 =
INFO  18:46:19,322 - #51 true
INFO  18:46:19,322 - #9 ,
INFO  18:46:19,322 - #49 f
INFO  18:46:19,322 - #7 =
INFO  18:46:19,322 - #51 false
INFO  18:46:19,322 - #8 ;
INFO  18:46:19,323 - #49 int
INFO  18:46:19,323 - #49 niz1
INFO  18:46:19,323 - #10 [
INFO  18:46:19,323 - #11 ]
INFO  18:46:19,323 - #8 ;
INFO  18:46:19,324 - #49 int
INFO  18:46:19,324 - #49 d
INFO  18:46:19,324 - #9 ,
INFO  18:46:19,324 - #49 e
INFO  18:46:19,324 - #8 ;
INFO  18:46:19,324 - #4 {
INFO  18:46:19,325 - #49 char
INFO  18:46:19,326 - #49 dohvatPrviKarakter
INFO  18:46:19,326 - #20 (
INFO  18:46:19,326 - #49 char
INFO  18:46:19,326 - #49 niz
INFO  18:46:19,326 - #10 [
INFO  18:46:19,326 - #11 ]
INFO  18:46:19,326 - #21 )
INFO  18:46:19,327 - #49 char
INFO  18:46:19,327 - #49 s
INFO  18:46:19,327 - #8 ;
INFO  18:46:19,327 - #49 int
INFO  18:46:19,327 - #49 i
INFO  18:46:19,327 - #9 ,
INFO  18:46:19,327 - #49 j
INFO  18:46:19,327 - #8 ;
INFO  18:46:19,328 - #4 {
INFO  18:46:19,328 - #23 for
INFO  18:46:19,328 - #20 (
INFO  18:46:19,329 - #49 i
INFO  18:46:19,329 - #7 =
INFO  18:46:19,329 - #49 len
INFO  18:46:19,329 - #20 (
INFO  18:46:19,330 - #49 niz
INFO  18:46:19,330 - #21 )
INFO  18:46:19,331 - #9 ,
INFO  18:46:19,331 - #49 j
INFO  18:46:19,331 - #7 =
INFO  18:46:19,331 - #48 0
INFO  18:46:19,332 - #8 ;
INFO  18:46:19,332 - #49 i
INFO  18:46:19,333 - #33 >
INFO  18:46:19,333 - #48 0
INFO  18:46:19,334 - #8 ;
INFO  18:46:19,335 - #49 i
INFO  18:46:19,336 - #25 --
INFO  18:46:19,336 - #9 ,
INFO  18:46:19,336 - #49 j
INFO  18:46:19,336 - #24 ++
INFO  18:46:19,336 - #21 )
INFO  18:46:19,337 - #4 {
INFO  18:46:19,338 - #14 if
INFO  18:46:19,338 - #20 (
INFO  18:46:19,338 - #49 i
INFO  18:46:19,339 - #31 ==
INFO  18:46:19,339 - #48 1
INFO  18:46:19,340 - #26 &&
INFO  18:46:19,340 - #49 j
INFO  18:46:19,340 - #34 >=
INFO  18:46:19,340 - #48 0
INFO  18:46:19,341 - #27 ||
INFO  18:46:19,341 - #49 j
INFO  18:46:19,342 - #31 ==
INFO  18:46:19,342 - #48 0
INFO  18:46:19,342 - #21 )
INFO  18:46:19,342 - #4 {
INFO  18:46:19,343 - #49 s
INFO  18:46:19,343 - #7 =
INFO  18:46:19,343 - #49 niz
INFO  18:46:19,343 - #10 [
INFO  18:46:19,344 - #49 i
INFO  18:46:19,344 - #11 ]
INFO  18:46:19,344 - #8 ;
INFO  18:46:19,345 - #16 break
INFO  18:46:19,345 - #8 ;
INFO  18:46:19,345 - #5 }
INFO  18:46:19,346 - #5 }
INFO  18:46:19,347 - #18 return
INFO  18:46:19,347 - #49 s
INFO  18:46:19,347 - #8 ;
INFO  18:46:19,347 - #5 }
INFO  18:46:19,347 - #49 bool
INFO  18:46:19,348 - #49 provera
INFO  18:46:19,348 - #20 (
INFO  18:46:19,348 - #21 )
INFO  18:46:19,349 - #49 int
INFO  18:46:19,349 - #49 pom1
INFO  18:46:19,349 - #8 ;
INFO  18:46:19,349 - #4 {
INFO  18:46:19,349 - #49 pom1
INFO  18:46:19,349 - #7 =
INFO  18:46:19,349 - #28 -
INFO  18:46:19,349 - #20 (
INFO  18:46:19,349 - #48 5
INFO  18:46:19,350 - #38 *
INFO  18:46:19,350 - #48 2
INFO  18:46:19,351 - #21 )
INFO  18:46:19,351 - #37 +
INFO  18:46:19,351 - #48 11
INFO  18:46:19,353 - #8 ;
INFO  18:46:19,353 - #14 if
INFO  18:46:19,353 - #20 (
INFO  18:46:19,353 - #49 pom1
INFO  18:46:19,353 - #33 >
INFO  18:46:19,353 - #48 0
INFO  18:46:19,353 - #21 )
INFO  18:46:19,353 - #18 return
INFO  18:46:19,353 - #51 true
INFO  18:46:19,353 - #8 ;
INFO  18:46:19,353 - #15 else
INFO  18:46:19,353 - #18 return
INFO  18:46:19,354 - #51 false
INFO  18:46:19,354 - #8 ;
INFO  18:46:19,354 - #5 }
INFO  18:46:19,355 - #41 void
INFO  18:46:19,355 - #49 main
INFO  18:46:19,355 - #20 (
INFO  18:46:19,355 - #21 )
INFO  18:46:19,355 - #49 int
INFO  18:46:19,355 - #49 p1
INFO  18:46:19,355 - #9 ,
INFO  18:46:19,355 - #49 i
INFO  18:46:19,355 - #8 ;
INFO  18:46:19,355 - #6 const
INFO  18:46:19,355 - #49 int
INFO  18:46:19,355 - #49 p2
INFO  18:46:19,355 - #7 =
INFO  18:46:19,355 - #48 5
INFO  18:46:19,355 - #8 ;
INFO  18:46:19,355 - #49 char
INFO  18:46:19,356 - #49 p
INFO  18:46:19,356 - #8 ;
INFO  18:46:19,356 - #4 {
INFO  18:46:19,356 - #49 i
INFO  18:46:19,356 - #7 =
INFO  18:46:19,356 - #48 0
INFO  18:46:19,356 - #8 ;
INFO  18:46:19,356 - #14 if
INFO  18:46:19,356 - #20 (
INFO  18:46:19,356 - #49 i
INFO  18:46:19,356 - #31 ==
INFO  18:46:19,356 - #48 3
INFO  18:46:19,356 - #21 )
INFO  18:46:19,356 - #22 print
INFO  18:46:19,356 - #20 (
INFO  18:46:19,356 - #49 i
INFO  18:46:19,356 - #21 )
INFO  18:46:19,356 - #8 ;
INFO  18:46:19,357 - #15 else
INFO  18:46:19,357 - #14 if
INFO  18:46:19,357 - #20 (
INFO  18:46:19,357 - #49 i
INFO  18:46:19,357 - #31 ==
INFO  18:46:19,357 - #48 2
INFO  18:46:19,357 - #21 )
INFO  18:46:19,357 - #49 i
INFO  18:46:19,357 - #24 ++
INFO  18:46:19,357 - #8 ;
INFO  18:46:19,357 - #15 else
INFO  18:46:19,357 - #49 i
INFO  18:46:19,357 - #7 =
INFO  18:46:19,357 - #49 i
INFO  18:46:19,357 - #37 +
INFO  18:46:19,357 - #48 1
INFO  18:46:19,358 - #8 ;
INFO  18:46:19,358 - #22 print
INFO  18:46:19,358 - #20 (
INFO  18:46:19,358 - #49 i
INFO  18:46:19,358 - #21 )
INFO  18:46:19,358 - #8 ;
INFO  18:46:19,358 - #14 if
INFO  18:46:19,358 - #20 (
INFO  18:46:19,358 - #49 provera
INFO  18:46:19,358 - #20 (
INFO  18:46:19,358 - #21 )
INFO  18:46:19,359 - #21 )
INFO  18:46:19,359 - #22 print
INFO  18:46:19,359 - #20 (
INFO  18:46:19,359 - #50 t
INFO  18:46:19,360 - #21 )
INFO  18:46:19,360 - #8 ;
INFO  18:46:19,360 - #49 niz1
INFO  18:46:19,360 - #7 =
INFO  18:46:19,360 - #29 new
INFO  18:46:19,360 - #49 char
INFO  18:46:19,360 - #10 [
INFO  18:46:19,360 - #48 3
INFO  18:46:19,360 - #11 ]
INFO  18:46:19,360 - #8 ;
INFO  18:46:19,360 - #49 niz1
INFO  18:46:19,360 - #10 [
INFO  18:46:19,360 - #48 0
INFO  18:46:19,360 - #11 ]
INFO  18:46:19,360 - #7 =
INFO  18:46:19,360 - #50 a
INFO  18:46:19,360 - #8 ;
INFO  18:46:19,361 - #49 niz1
INFO  18:46:19,361 - #10 [
INFO  18:46:19,361 - #48 1
INFO  18:46:19,361 - #11 ]
INFO  18:46:19,361 - #7 =
INFO  18:46:19,361 - #50 b
INFO  18:46:19,361 - #8 ;
INFO  18:46:19,361 - #49 niz1
INFO  18:46:19,361 - #10 [
INFO  18:46:19,361 - #48 2
INFO  18:46:19,361 - #11 ]
INFO  18:46:19,361 - #7 =
INFO  18:46:19,361 - #50 c
INFO  18:46:19,361 - #8 ;
INFO  18:46:19,361 - #49 p
INFO  18:46:19,361 - #7 =
INFO  18:46:19,361 - #49 dohvatPrviKarakter
INFO  18:46:19,361 - #20 (
INFO  18:46:19,361 - #49 niz1
INFO  18:46:19,361 - #21 )
INFO  18:46:19,362 - #8 ;
INFO  18:46:19,362 - #22 print
INFO  18:46:19,362 - #20 (
INFO  18:46:19,362 - #49 p
INFO  18:46:19,362 - #21 )
INFO  18:46:19,362 - #8 ;
INFO  18:46:19,362 - #5 }
INFO  18:46:19,362 - #5 }
INFO  18:46:19,385 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:46:19,387 - ===================================
INFO  18:46:19,388 - Pocetak programa test301.
INFO  18:46:19,388 - Deklarisana je konstanta a na liniji 3
INFO  18:46:19,388 - Deklarisana je promenljiva b na liniji 4
INFO  18:46:19,388 - Deklarisana je promenljiva c na liniji 4
INFO  18:46:19,388 - Deklarisana je konstanta t na liniji 5
INFO  18:46:19,388 - Deklarisana je konstanta f na liniji 5
INFO  18:46:19,388 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:46:19,389 - Deklarisana je promenljiva d na liniji 7
INFO  18:46:19,389 - Deklarisana je promenljiva e na liniji 7
INFO  18:46:19,389 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:46:19,389 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:46:19,389 - Deklarisana je promenljiva s na liniji 12
INFO  18:46:19,389 - Deklarisana je promenljiva i na liniji 12
INFO  18:46:19,389 - Deklarisana je promenljiva j na liniji 12
ERROR 18:46:19,390 - Greska, nepoklapanje tipa parametara pozvane funkcije na liniji 14
INFO  18:46:19,390 - Pronadjen poziv funkcije len na liniji 14
INFO  18:46:42,103 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:46:48,176 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:46:48,177 - Kreiran/promenjen element niza niz
INFO  18:46:50,406 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  18:46:50,406 - Dobra povratna vrednost funkcije na liniji 21
INFO  18:46:50,407 - Obradjuje se funkcija provera na liniji 24
INFO  18:46:50,407 - Deklarisana je promenljiva pom1 na liniji 25
INFO  18:46:52,406 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  18:46:52,407 - Dobra povratna vrednost funkcije na liniji 29
INFO  18:46:52,407 - Dobra povratna vrednost funkcije na liniji 30
INFO  18:46:52,407 - Obradjuje se funkcija main na liniji 33
INFO  18:46:52,407 - Deklarisana je promenljiva p1 na liniji 34
INFO  18:46:52,407 - Deklarisana je promenljiva i na liniji 34
INFO  18:46:52,407 - Deklarisana je konstanta p2 na liniji 35
INFO  18:46:52,408 - Deklarisana je promenljiva p na liniji 36
INFO  18:46:55,352 - Designator i expr su odgovarajuceg tipa na liniji 38
INFO  18:46:55,353 - Obradjena funkcija PRINT na liniji 39
INFO  18:46:56,296 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  18:46:56,297 - Obradjena funkcija PRINT na liniji 42
INFO  18:46:56,297 - Pronadjen poziv funkcije provera na liniji 44
INFO  18:46:56,297 - Obradjena funkcija PRINT na liniji 44
INFO  18:48:04,014 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:48:04,103 - #2 program
INFO  18:48:04,103 - #49 test301
INFO  18:48:04,103 - #6 const
INFO  18:48:04,105 - #49 int
INFO  18:48:04,105 - #49 a
INFO  18:48:04,106 - #7 =
INFO  18:48:04,106 - #48 5
INFO  18:48:04,106 - #8 ;
INFO  18:48:04,106 - #49 int
INFO  18:48:04,107 - #49 b
INFO  18:48:04,107 - #9 ,
INFO  18:48:04,108 - #49 c
INFO  18:48:04,108 - #8 ;
INFO  18:48:04,108 - #6 const
INFO  18:48:04,108 - #49 bool
INFO  18:48:04,109 - #49 t
INFO  18:48:04,109 - #7 =
INFO  18:48:04,109 - #51 true
INFO  18:48:04,109 - #9 ,
INFO  18:48:04,109 - #49 f
INFO  18:48:04,109 - #7 =
INFO  18:48:04,109 - #51 false
INFO  18:48:04,109 - #8 ;
INFO  18:48:04,109 - #49 int
INFO  18:48:04,110 - #49 niz1
INFO  18:48:04,110 - #10 [
INFO  18:48:04,110 - #11 ]
INFO  18:48:04,110 - #8 ;
INFO  18:48:04,111 - #49 int
INFO  18:48:04,112 - #49 d
INFO  18:48:04,112 - #9 ,
INFO  18:48:04,112 - #49 e
INFO  18:48:04,112 - #8 ;
INFO  18:48:04,112 - #4 {
INFO  18:48:04,112 - #49 char
INFO  18:48:04,113 - #49 dohvatPrviKarakter
INFO  18:48:04,113 - #20 (
INFO  18:48:04,114 - #49 char
INFO  18:48:04,114 - #49 niz
INFO  18:48:04,114 - #10 [
INFO  18:48:04,114 - #11 ]
INFO  18:48:04,114 - #21 )
INFO  18:48:04,114 - #49 char
INFO  18:48:04,115 - #49 s
INFO  18:48:04,115 - #8 ;
INFO  18:48:04,115 - #49 int
INFO  18:48:04,115 - #49 i
INFO  18:48:04,115 - #9 ,
INFO  18:48:04,115 - #49 j
INFO  18:48:04,115 - #8 ;
INFO  18:48:04,115 - #4 {
INFO  18:48:04,115 - #23 for
INFO  18:48:04,115 - #20 (
INFO  18:48:04,116 - #49 i
INFO  18:48:04,117 - #7 =
INFO  18:48:04,117 - #49 len
INFO  18:48:04,117 - #20 (
INFO  18:48:04,118 - #49 niz
INFO  18:48:04,118 - #21 )
INFO  18:48:04,119 - #9 ,
INFO  18:48:04,120 - #49 j
INFO  18:48:04,120 - #7 =
INFO  18:48:04,120 - #48 0
INFO  18:48:04,120 - #8 ;
INFO  18:48:04,121 - #49 i
INFO  18:48:04,122 - #33 >
INFO  18:48:04,122 - #48 0
INFO  18:48:04,124 - #8 ;
INFO  18:48:04,125 - #49 i
INFO  18:48:04,126 - #25 --
INFO  18:48:04,126 - #9 ,
INFO  18:48:04,126 - #49 j
INFO  18:48:04,126 - #24 ++
INFO  18:48:04,127 - #21 )
INFO  18:48:04,128 - #4 {
INFO  18:48:04,129 - #14 if
INFO  18:48:04,129 - #20 (
INFO  18:48:04,129 - #49 i
INFO  18:48:04,130 - #31 ==
INFO  18:48:04,130 - #48 1
INFO  18:48:04,131 - #26 &&
INFO  18:48:04,131 - #49 j
INFO  18:48:04,131 - #34 >=
INFO  18:48:04,132 - #48 0
INFO  18:48:04,132 - #27 ||
INFO  18:48:04,133 - #49 j
INFO  18:48:04,134 - #31 ==
INFO  18:48:04,134 - #48 0
INFO  18:48:04,134 - #21 )
INFO  18:48:04,134 - #4 {
INFO  18:48:04,135 - #49 s
INFO  18:48:04,135 - #7 =
INFO  18:48:04,135 - #49 niz
INFO  18:48:04,135 - #10 [
INFO  18:48:04,136 - #49 i
INFO  18:48:04,137 - #11 ]
INFO  18:48:04,137 - #8 ;
INFO  18:48:04,137 - #16 break
INFO  18:48:04,137 - #8 ;
INFO  18:48:04,137 - #5 }
INFO  18:48:04,139 - #5 }
INFO  18:48:04,139 - #18 return
INFO  18:48:04,139 - #49 s
INFO  18:48:04,139 - #8 ;
INFO  18:48:04,139 - #5 }
INFO  18:48:04,139 - #49 bool
INFO  18:48:04,140 - #49 provera
INFO  18:48:04,140 - #20 (
INFO  18:48:04,140 - #21 )
INFO  18:48:04,141 - #49 int
INFO  18:48:04,141 - #49 pom1
INFO  18:48:04,141 - #8 ;
INFO  18:48:04,141 - #4 {
INFO  18:48:04,141 - #49 pom1
INFO  18:48:04,141 - #7 =
INFO  18:48:04,142 - #28 -
INFO  18:48:04,142 - #20 (
INFO  18:48:04,142 - #48 5
INFO  18:48:04,142 - #38 *
INFO  18:48:04,142 - #48 2
INFO  18:48:04,143 - #21 )
INFO  18:48:04,143 - #37 +
INFO  18:48:04,144 - #48 11
INFO  18:48:04,145 - #8 ;
INFO  18:48:04,145 - #14 if
INFO  18:48:04,145 - #20 (
INFO  18:48:04,145 - #49 pom1
INFO  18:48:04,146 - #33 >
INFO  18:48:04,146 - #48 0
INFO  18:48:04,146 - #21 )
INFO  18:48:04,146 - #18 return
INFO  18:48:04,146 - #51 true
INFO  18:48:04,146 - #8 ;
INFO  18:48:04,146 - #15 else
INFO  18:48:04,146 - #18 return
INFO  18:48:04,147 - #51 false
INFO  18:48:04,147 - #8 ;
INFO  18:48:04,147 - #5 }
INFO  18:48:04,147 - #41 void
INFO  18:48:04,147 - #49 main
INFO  18:48:04,147 - #20 (
INFO  18:48:04,148 - #21 )
INFO  18:48:04,148 - #49 int
INFO  18:48:04,148 - #49 p1
INFO  18:48:04,148 - #9 ,
INFO  18:48:04,148 - #49 i
INFO  18:48:04,148 - #8 ;
INFO  18:48:04,148 - #6 const
INFO  18:48:04,148 - #49 int
INFO  18:48:04,148 - #49 p2
INFO  18:48:04,148 - #7 =
INFO  18:48:04,148 - #48 5
INFO  18:48:04,148 - #8 ;
INFO  18:48:04,148 - #49 char
INFO  18:48:04,148 - #49 p
INFO  18:48:04,148 - #8 ;
INFO  18:48:04,148 - #4 {
INFO  18:48:04,149 - #49 i
INFO  18:48:04,149 - #7 =
INFO  18:48:04,149 - #48 0
INFO  18:48:04,149 - #8 ;
INFO  18:48:04,149 - #14 if
INFO  18:48:04,149 - #20 (
INFO  18:48:04,149 - #49 i
INFO  18:48:04,149 - #31 ==
INFO  18:48:04,149 - #48 3
INFO  18:48:04,149 - #21 )
INFO  18:48:04,149 - #22 print
INFO  18:48:04,149 - #20 (
INFO  18:48:04,149 - #49 i
INFO  18:48:04,149 - #21 )
INFO  18:48:04,149 - #8 ;
INFO  18:48:04,150 - #15 else
INFO  18:48:04,150 - #14 if
INFO  18:48:04,150 - #20 (
INFO  18:48:04,150 - #49 i
INFO  18:48:04,150 - #31 ==
INFO  18:48:04,150 - #48 2
INFO  18:48:04,150 - #21 )
INFO  18:48:04,150 - #49 i
INFO  18:48:04,150 - #24 ++
INFO  18:48:04,150 - #8 ;
INFO  18:48:04,150 - #15 else
INFO  18:48:04,150 - #49 i
INFO  18:48:04,150 - #7 =
INFO  18:48:04,150 - #49 i
INFO  18:48:04,151 - #37 +
INFO  18:48:04,151 - #48 1
INFO  18:48:04,151 - #8 ;
INFO  18:48:04,151 - #22 print
INFO  18:48:04,151 - #20 (
INFO  18:48:04,151 - #49 i
INFO  18:48:04,151 - #21 )
INFO  18:48:04,151 - #8 ;
INFO  18:48:04,151 - #14 if
INFO  18:48:04,151 - #20 (
INFO  18:48:04,151 - #49 provera
INFO  18:48:04,151 - #20 (
INFO  18:48:04,151 - #21 )
INFO  18:48:04,152 - #21 )
INFO  18:48:04,152 - #22 print
INFO  18:48:04,152 - #20 (
INFO  18:48:04,153 - #50 t
INFO  18:48:04,153 - #21 )
INFO  18:48:04,153 - #8 ;
INFO  18:48:04,153 - #49 niz1
INFO  18:48:04,153 - #7 =
INFO  18:48:04,153 - #29 new
INFO  18:48:04,153 - #49 char
INFO  18:48:04,153 - #10 [
INFO  18:48:04,153 - #48 3
INFO  18:48:04,153 - #11 ]
INFO  18:48:04,153 - #8 ;
INFO  18:48:04,153 - #49 niz1
INFO  18:48:04,154 - #10 [
INFO  18:48:04,154 - #48 0
INFO  18:48:04,154 - #11 ]
INFO  18:48:04,154 - #7 =
INFO  18:48:04,154 - #50 a
INFO  18:48:04,154 - #8 ;
INFO  18:48:04,154 - #49 niz1
INFO  18:48:04,154 - #10 [
INFO  18:48:04,154 - #48 1
INFO  18:48:04,154 - #11 ]
INFO  18:48:04,154 - #7 =
INFO  18:48:04,154 - #50 b
INFO  18:48:04,154 - #8 ;
INFO  18:48:04,154 - #49 niz1
INFO  18:48:04,154 - #10 [
INFO  18:48:04,154 - #48 2
INFO  18:48:04,154 - #11 ]
INFO  18:48:04,154 - #7 =
INFO  18:48:04,154 - #50 c
INFO  18:48:04,154 - #8 ;
INFO  18:48:04,154 - #49 p
INFO  18:48:04,154 - #7 =
INFO  18:48:04,154 - #49 dohvatPrviKarakter
INFO  18:48:04,155 - #20 (
INFO  18:48:04,155 - #49 niz1
INFO  18:48:04,155 - #21 )
INFO  18:48:04,155 - #8 ;
INFO  18:48:04,155 - #22 print
INFO  18:48:04,155 - #20 (
INFO  18:48:04,155 - #49 p
INFO  18:48:04,155 - #21 )
INFO  18:48:04,155 - #8 ;
INFO  18:48:04,155 - #5 }
INFO  18:48:04,155 - #5 }
INFO  18:48:04,179 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:48:04,191 - ===================================
INFO  18:48:04,193 - Pocetak programa test301.
INFO  18:48:04,193 - Deklarisana je konstanta a na liniji 3
INFO  18:48:04,193 - Deklarisana je promenljiva b na liniji 4
INFO  18:48:04,193 - Deklarisana je promenljiva c na liniji 4
INFO  18:48:04,193 - Deklarisana je konstanta t na liniji 5
INFO  18:48:04,194 - Deklarisana je konstanta f na liniji 5
INFO  18:48:04,194 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:48:04,194 - Deklarisana je promenljiva d na liniji 7
INFO  18:48:04,195 - Deklarisana je promenljiva e na liniji 7
INFO  18:48:04,196 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:48:04,196 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:48:04,196 - Deklarisana je promenljiva s na liniji 12
INFO  18:48:04,196 - Deklarisana je promenljiva i na liniji 12
INFO  18:48:04,196 - Deklarisana je promenljiva j na liniji 12
ERROR 18:48:04,196 - Greska, nepoklapanje tipa parametara pozvane funkcije na liniji 14
INFO  18:48:04,197 - Pronadjen poziv funkcije len na liniji 14
INFO  18:48:07,546 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:48:08,045 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:48:08,046 - Kreiran/promenjen element niza niz
INFO  18:48:08,634 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  18:48:08,635 - Dobra povratna vrednost funkcije na liniji 21
INFO  18:48:08,635 - Obradjuje se funkcija provera na liniji 24
INFO  18:48:08,635 - Deklarisana je promenljiva pom1 na liniji 25
INFO  18:48:09,404 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  18:48:09,405 - Dobra povratna vrednost funkcije na liniji 29
INFO  18:48:09,405 - Dobra povratna vrednost funkcije na liniji 30
INFO  18:48:09,405 - Obradjuje se funkcija main na liniji 33
INFO  18:48:09,405 - Deklarisana je promenljiva p1 na liniji 34
INFO  18:48:09,406 - Deklarisana je promenljiva i na liniji 34
INFO  18:48:09,406 - Deklarisana je konstanta p2 na liniji 35
INFO  18:48:09,406 - Deklarisana je promenljiva p na liniji 36
INFO  18:48:10,703 - Designator i expr su odgovarajuceg tipa na liniji 38
INFO  18:48:10,704 - Obradjena funkcija PRINT na liniji 39
INFO  18:48:11,784 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  18:48:11,784 - Obradjena funkcija PRINT na liniji 42
INFO  18:48:11,784 - Pronadjen poziv funkcije provera na liniji 44
INFO  18:48:11,785 - Obradjena funkcija PRINT na liniji 44
INFO  18:50:14,629 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:50:14,716 - #2 program
INFO  18:50:14,716 - #49 test301
INFO  18:50:14,716 - #6 const
INFO  18:50:14,717 - #49 int
INFO  18:50:14,717 - #49 a
INFO  18:50:14,717 - #7 =
INFO  18:50:14,717 - #48 5
INFO  18:50:14,717 - #8 ;
INFO  18:50:14,718 - #49 int
INFO  18:50:14,718 - #49 b
INFO  18:50:14,718 - #9 ,
INFO  18:50:14,719 - #49 c
INFO  18:50:14,719 - #8 ;
INFO  18:50:14,719 - #6 const
INFO  18:50:14,720 - #49 bool
INFO  18:50:14,720 - #49 t
INFO  18:50:14,720 - #7 =
INFO  18:50:14,720 - #51 true
INFO  18:50:14,720 - #9 ,
INFO  18:50:14,721 - #49 f
INFO  18:50:14,721 - #7 =
INFO  18:50:14,721 - #51 false
INFO  18:50:14,721 - #8 ;
INFO  18:50:14,721 - #49 char
INFO  18:50:14,721 - #49 niz1
INFO  18:50:14,721 - #10 [
INFO  18:50:14,721 - #11 ]
INFO  18:50:14,721 - #8 ;
INFO  18:50:14,723 - #49 int
INFO  18:50:14,723 - #49 d
INFO  18:50:14,723 - #9 ,
INFO  18:50:14,723 - #49 e
INFO  18:50:14,723 - #8 ;
INFO  18:50:14,723 - #4 {
INFO  18:50:14,723 - #49 char
INFO  18:50:14,724 - #49 dohvatPrviKarakter
INFO  18:50:14,724 - #20 (
INFO  18:50:14,724 - #49 char
INFO  18:50:14,724 - #49 niz
INFO  18:50:14,724 - #10 [
INFO  18:50:14,725 - #11 ]
INFO  18:50:14,725 - #21 )
INFO  18:50:14,725 - #49 char
INFO  18:50:14,725 - #49 s
INFO  18:50:14,726 - #8 ;
INFO  18:50:14,726 - #49 int
INFO  18:50:14,726 - #49 i
INFO  18:50:14,726 - #9 ,
INFO  18:50:14,726 - #49 j
INFO  18:50:14,726 - #8 ;
INFO  18:50:14,727 - #4 {
INFO  18:50:14,727 - #23 for
INFO  18:50:14,727 - #20 (
INFO  18:50:14,728 - #49 i
INFO  18:50:14,728 - #7 =
INFO  18:50:14,728 - #49 len
INFO  18:50:14,729 - #20 (
INFO  18:50:14,729 - #49 niz
INFO  18:50:14,729 - #21 )
INFO  18:50:14,730 - #9 ,
INFO  18:50:14,731 - #49 j
INFO  18:50:14,731 - #7 =
INFO  18:50:14,731 - #48 0
INFO  18:50:14,731 - #8 ;
INFO  18:50:14,731 - #49 i
INFO  18:50:14,732 - #33 >
INFO  18:50:14,732 - #48 0
INFO  18:50:14,734 - #8 ;
INFO  18:50:14,735 - #49 i
INFO  18:50:14,736 - #25 --
INFO  18:50:14,736 - #9 ,
INFO  18:50:14,736 - #49 j
INFO  18:50:14,736 - #24 ++
INFO  18:50:14,736 - #21 )
INFO  18:50:14,737 - #4 {
INFO  18:50:14,737 - #14 if
INFO  18:50:14,737 - #20 (
INFO  18:50:14,737 - #49 i
INFO  18:50:14,738 - #31 ==
INFO  18:50:14,738 - #48 1
INFO  18:50:14,738 - #26 &&
INFO  18:50:14,738 - #49 j
INFO  18:50:14,739 - #34 >=
INFO  18:50:14,739 - #48 0
INFO  18:50:14,739 - #27 ||
INFO  18:50:14,740 - #49 j
INFO  18:50:14,740 - #31 ==
INFO  18:50:14,740 - #48 0
INFO  18:50:14,741 - #21 )
INFO  18:50:14,741 - #4 {
INFO  18:50:14,742 - #49 s
INFO  18:50:14,742 - #7 =
INFO  18:50:14,742 - #49 niz
INFO  18:50:14,742 - #10 [
INFO  18:50:14,742 - #49 i
INFO  18:50:14,743 - #11 ]
INFO  18:50:14,743 - #8 ;
INFO  18:50:14,743 - #16 break
INFO  18:50:14,743 - #8 ;
INFO  18:50:14,743 - #5 }
INFO  18:50:14,744 - #5 }
INFO  18:50:14,745 - #18 return
INFO  18:50:14,745 - #49 s
INFO  18:50:14,745 - #8 ;
INFO  18:50:14,745 - #5 }
INFO  18:50:14,745 - #49 bool
INFO  18:50:14,746 - #49 provera
INFO  18:50:14,746 - #20 (
INFO  18:50:14,746 - #21 )
INFO  18:50:14,746 - #49 int
INFO  18:50:14,747 - #49 pom1
INFO  18:50:14,747 - #8 ;
INFO  18:50:14,747 - #4 {
INFO  18:50:14,747 - #49 pom1
INFO  18:50:14,747 - #7 =
INFO  18:50:14,747 - #28 -
INFO  18:50:14,747 - #20 (
INFO  18:50:14,747 - #48 5
INFO  18:50:14,747 - #38 *
INFO  18:50:14,747 - #48 2
INFO  18:50:14,748 - #21 )
INFO  18:50:14,748 - #37 +
INFO  18:50:14,749 - #48 11
INFO  18:50:14,750 - #8 ;
INFO  18:50:14,750 - #14 if
INFO  18:50:14,750 - #20 (
INFO  18:50:14,750 - #49 pom1
INFO  18:50:14,750 - #33 >
INFO  18:50:14,750 - #48 0
INFO  18:50:14,750 - #21 )
INFO  18:50:14,750 - #18 return
INFO  18:50:14,750 - #51 true
INFO  18:50:14,751 - #8 ;
INFO  18:50:14,751 - #15 else
INFO  18:50:14,751 - #18 return
INFO  18:50:14,752 - #51 false
INFO  18:50:14,752 - #8 ;
INFO  18:50:14,752 - #5 }
INFO  18:50:14,752 - #41 void
INFO  18:50:14,752 - #49 main
INFO  18:50:14,752 - #20 (
INFO  18:50:14,752 - #21 )
INFO  18:50:14,752 - #49 int
INFO  18:50:14,753 - #49 p1
INFO  18:50:14,753 - #9 ,
INFO  18:50:14,753 - #49 i
INFO  18:50:14,753 - #8 ;
INFO  18:50:14,753 - #6 const
INFO  18:50:14,753 - #49 int
INFO  18:50:14,753 - #49 p2
INFO  18:50:14,753 - #7 =
INFO  18:50:14,753 - #48 5
INFO  18:50:14,753 - #8 ;
INFO  18:50:14,753 - #49 char
INFO  18:50:14,753 - #49 p
INFO  18:50:14,753 - #8 ;
INFO  18:50:14,753 - #4 {
INFO  18:50:14,753 - #49 i
INFO  18:50:14,753 - #7 =
INFO  18:50:14,753 - #48 0
INFO  18:50:14,753 - #8 ;
INFO  18:50:14,754 - #14 if
INFO  18:50:14,754 - #20 (
INFO  18:50:14,754 - #49 i
INFO  18:50:14,754 - #31 ==
INFO  18:50:14,754 - #48 3
INFO  18:50:14,754 - #21 )
INFO  18:50:14,754 - #22 print
INFO  18:50:14,754 - #20 (
INFO  18:50:14,754 - #49 i
INFO  18:50:14,754 - #21 )
INFO  18:50:14,754 - #8 ;
INFO  18:50:14,754 - #15 else
INFO  18:50:14,754 - #14 if
INFO  18:50:14,754 - #20 (
INFO  18:50:14,754 - #49 i
INFO  18:50:14,754 - #31 ==
INFO  18:50:14,754 - #48 2
INFO  18:50:14,754 - #21 )
INFO  18:50:14,754 - #49 i
INFO  18:50:14,754 - #24 ++
INFO  18:50:14,754 - #8 ;
INFO  18:50:14,754 - #15 else
INFO  18:50:14,755 - #49 i
INFO  18:50:14,755 - #7 =
INFO  18:50:14,755 - #49 i
INFO  18:50:14,755 - #37 +
INFO  18:50:14,755 - #48 1
INFO  18:50:14,755 - #8 ;
INFO  18:50:14,755 - #22 print
INFO  18:50:14,755 - #20 (
INFO  18:50:14,755 - #49 i
INFO  18:50:14,755 - #21 )
INFO  18:50:14,755 - #8 ;
INFO  18:50:14,755 - #14 if
INFO  18:50:14,755 - #20 (
INFO  18:50:14,755 - #49 provera
INFO  18:50:14,755 - #20 (
INFO  18:50:14,755 - #21 )
INFO  18:50:14,756 - #21 )
INFO  18:50:14,756 - #22 print
INFO  18:50:14,756 - #20 (
INFO  18:50:14,756 - #50 t
INFO  18:50:14,756 - #21 )
INFO  18:50:14,756 - #8 ;
INFO  18:50:14,756 - #49 niz1
INFO  18:50:14,757 - #7 =
INFO  18:50:14,757 - #29 new
INFO  18:50:14,757 - #49 char
INFO  18:50:14,757 - #10 [
INFO  18:50:14,757 - #48 3
INFO  18:50:14,757 - #11 ]
INFO  18:50:14,757 - #8 ;
INFO  18:50:14,757 - #49 niz1
INFO  18:50:14,757 - #10 [
INFO  18:50:14,757 - #48 0
INFO  18:50:14,757 - #11 ]
INFO  18:50:14,757 - #7 =
INFO  18:50:14,757 - #50 a
INFO  18:50:14,757 - #8 ;
INFO  18:50:14,757 - #49 niz1
INFO  18:50:14,757 - #10 [
INFO  18:50:14,758 - #48 1
INFO  18:50:14,758 - #11 ]
INFO  18:50:14,758 - #7 =
INFO  18:50:14,758 - #50 b
INFO  18:50:14,758 - #8 ;
INFO  18:50:14,758 - #49 niz1
INFO  18:50:14,758 - #10 [
INFO  18:50:14,758 - #48 2
INFO  18:50:14,758 - #11 ]
INFO  18:50:14,758 - #7 =
INFO  18:50:14,758 - #50 c
INFO  18:50:14,758 - #8 ;
INFO  18:50:14,758 - #49 p
INFO  18:50:14,758 - #7 =
INFO  18:50:14,758 - #49 dohvatPrviKarakter
INFO  18:50:14,758 - #20 (
INFO  18:50:14,758 - #49 niz1
INFO  18:50:14,758 - #21 )
INFO  18:50:14,758 - #8 ;
INFO  18:50:14,758 - #22 print
INFO  18:50:14,758 - #20 (
INFO  18:50:14,758 - #49 p
INFO  18:50:14,758 - #21 )
INFO  18:50:14,758 - #8 ;
INFO  18:50:14,758 - #5 }
INFO  18:50:14,759 - #5 }
INFO  18:50:14,770 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:50:14,771 - ===================================
INFO  18:50:14,772 - Pocetak programa test301.
INFO  18:50:14,772 - Deklarisana je konstanta a na liniji 3
INFO  18:50:14,772 - Deklarisana je promenljiva b na liniji 4
INFO  18:50:14,772 - Deklarisana je promenljiva c na liniji 4
INFO  18:50:14,772 - Deklarisana je konstanta t na liniji 5
INFO  18:50:14,772 - Deklarisana je konstanta f na liniji 5
INFO  18:50:14,772 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:50:14,772 - Deklarisana je promenljiva d na liniji 7
INFO  18:50:14,772 - Deklarisana je promenljiva e na liniji 7
INFO  18:50:14,773 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:50:14,773 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:50:14,773 - Deklarisana je promenljiva s na liniji 12
INFO  18:50:14,773 - Deklarisana je promenljiva i na liniji 12
INFO  18:50:14,773 - Deklarisana je promenljiva j na liniji 12
ERROR 18:50:14,773 - Greska, nepoklapanje tipa parametara pozvane funkcije na liniji 14
INFO  18:50:14,773 - Pronadjen poziv funkcije len na liniji 14
INFO  18:50:14,773 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:50:14,773 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:50:14,773 - Kreiran/promenjen element niza niz
INFO  18:50:14,773 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  18:50:14,773 - Dobra povratna vrednost funkcije na liniji 21
INFO  18:50:14,773 - Obradjuje se funkcija provera na liniji 24
INFO  18:50:14,774 - Deklarisana je promenljiva pom1 na liniji 25
INFO  18:50:14,774 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  18:50:14,774 - Dobra povratna vrednost funkcije na liniji 29
INFO  18:50:14,774 - Dobra povratna vrednost funkcije na liniji 30
INFO  18:50:14,774 - Obradjuje se funkcija main na liniji 33
INFO  18:50:14,774 - Deklarisana je promenljiva p1 na liniji 34
INFO  18:50:14,774 - Deklarisana je promenljiva i na liniji 34
INFO  18:50:14,774 - Deklarisana je konstanta p2 na liniji 35
INFO  18:50:14,774 - Deklarisana je promenljiva p na liniji 36
INFO  18:50:14,774 - Designator i expr su odgovarajuceg tipa na liniji 38
INFO  18:50:14,774 - Obradjena funkcija PRINT na liniji 39
INFO  18:50:14,774 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  18:50:14,774 - Obradjena funkcija PRINT na liniji 42
INFO  18:50:14,774 - Pronadjen poziv funkcije provera na liniji 44
INFO  18:50:14,774 - Obradjena funkcija PRINT na liniji 44
INFO  18:50:14,774 - Designator i expr su odgovarajuceg tipa na liniji 46
INFO  18:50:14,774 - Kreiran/promenjen element niza niz1
INFO  18:50:14,774 - Designator i expr su odgovarajuceg tipa na liniji 47
INFO  18:50:14,774 - Kreiran/promenjen element niza niz1
INFO  18:50:14,775 - Designator i expr su odgovarajuceg tipa na liniji 48
INFO  18:50:14,775 - Kreiran/promenjen element niza niz1
INFO  18:50:14,775 - Designator i expr su odgovarajuceg tipa na liniji 49
INFO  18:50:14,775 - Pronadjen poziv funkcije dohvatPrviKarakter na liniji 51
INFO  18:50:14,775 - Designator i expr su odgovarajuceg tipa na liniji 51
INFO  18:50:14,775 - Obradjena funkcija PRINT na liniji 52
INFO  18:50:14,775 - ===================================
ERROR 18:50:14,775 - Parsiranje NIJE uspesno zavrseno!
INFO  18:51:12,227 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:51:12,317 - #2 program
INFO  18:51:12,317 - #49 test301
INFO  18:51:12,317 - #6 const
INFO  18:51:12,319 - #49 int
INFO  18:51:12,320 - #49 a
INFO  18:51:12,320 - #7 =
INFO  18:51:12,321 - #48 5
INFO  18:51:12,321 - #8 ;
INFO  18:51:12,321 - #49 int
INFO  18:51:12,322 - #49 b
INFO  18:51:12,322 - #9 ,
INFO  18:51:12,324 - #49 c
INFO  18:51:12,324 - #8 ;
INFO  18:51:12,324 - #6 const
INFO  18:51:12,325 - #49 bool
INFO  18:51:12,325 - #49 t
INFO  18:51:12,325 - #7 =
INFO  18:51:12,325 - #51 true
INFO  18:51:12,326 - #9 ,
INFO  18:51:12,326 - #49 f
INFO  18:51:12,326 - #7 =
INFO  18:51:12,326 - #51 false
INFO  18:51:12,326 - #8 ;
INFO  18:51:12,327 - #49 int
INFO  18:51:12,327 - #49 niz1
INFO  18:51:12,327 - #10 [
INFO  18:51:12,328 - #11 ]
INFO  18:51:12,328 - #8 ;
INFO  18:51:12,330 - #49 int
INFO  18:51:12,331 - #49 d
INFO  18:51:12,331 - #9 ,
INFO  18:51:12,331 - #49 e
INFO  18:51:12,331 - #8 ;
INFO  18:51:12,331 - #4 {
INFO  18:51:12,331 - #49 char
INFO  18:51:12,333 - #49 dohvatPrviKarakter
INFO  18:51:12,333 - #20 (
INFO  18:51:12,333 - #49 char
INFO  18:51:12,333 - #49 niz
INFO  18:51:12,333 - #10 [
INFO  18:51:12,333 - #11 ]
INFO  18:51:12,334 - #21 )
INFO  18:51:12,335 - #49 char
INFO  18:51:12,335 - #49 s
INFO  18:51:12,335 - #8 ;
INFO  18:51:12,335 - #49 int
INFO  18:51:12,336 - #49 i
INFO  18:51:12,336 - #9 ,
INFO  18:51:12,336 - #49 j
INFO  18:51:12,336 - #8 ;
INFO  18:51:12,336 - #4 {
INFO  18:51:12,337 - #23 for
INFO  18:51:12,337 - #20 (
INFO  18:51:12,338 - #49 i
INFO  18:51:12,338 - #7 =
INFO  18:51:12,338 - #49 len
INFO  18:51:12,340 - #20 (
INFO  18:51:12,340 - #49 niz
INFO  18:51:12,340 - #21 )
INFO  18:51:12,341 - #9 ,
INFO  18:51:12,342 - #49 j
INFO  18:51:12,342 - #7 =
INFO  18:51:12,342 - #48 0
INFO  18:51:12,342 - #8 ;
INFO  18:51:12,342 - #49 i
INFO  18:51:12,344 - #33 >
INFO  18:51:12,344 - #48 0
INFO  18:51:12,346 - #8 ;
INFO  18:51:12,347 - #49 i
INFO  18:51:12,348 - #25 --
INFO  18:51:12,349 - #9 ,
INFO  18:51:12,349 - #49 j
INFO  18:51:12,349 - #24 ++
INFO  18:51:12,349 - #21 )
INFO  18:51:12,350 - #4 {
INFO  18:51:12,351 - #14 if
INFO  18:51:12,352 - #20 (
INFO  18:51:12,352 - #49 i
INFO  18:51:12,353 - #31 ==
INFO  18:51:12,353 - #48 1
INFO  18:51:12,354 - #26 &&
INFO  18:51:12,354 - #49 j
INFO  18:51:12,354 - #34 >=
INFO  18:51:12,355 - #48 0
INFO  18:51:12,356 - #27 ||
INFO  18:51:12,356 - #49 j
INFO  18:51:12,357 - #31 ==
INFO  18:51:12,357 - #48 0
INFO  18:51:12,357 - #21 )
INFO  18:51:12,357 - #4 {
INFO  18:51:12,359 - #49 s
INFO  18:51:12,359 - #7 =
INFO  18:51:12,359 - #49 niz
INFO  18:51:12,359 - #10 [
INFO  18:51:12,360 - #49 i
INFO  18:51:12,361 - #11 ]
INFO  18:51:12,361 - #8 ;
INFO  18:51:12,361 - #16 break
INFO  18:51:12,361 - #8 ;
INFO  18:51:12,361 - #5 }
INFO  18:51:12,363 - #5 }
INFO  18:51:12,364 - #18 return
INFO  18:51:12,364 - #49 s
INFO  18:51:12,364 - #8 ;
INFO  18:51:12,364 - #5 }
INFO  18:51:12,364 - #49 bool
INFO  18:51:12,366 - #49 provera
INFO  18:51:12,366 - #20 (
INFO  18:51:12,366 - #21 )
INFO  18:51:12,367 - #49 int
INFO  18:51:12,367 - #49 pom1
INFO  18:51:12,367 - #8 ;
INFO  18:51:12,367 - #4 {
INFO  18:51:12,368 - #49 pom1
INFO  18:51:12,368 - #7 =
INFO  18:51:12,368 - #28 -
INFO  18:51:12,368 - #20 (
INFO  18:51:12,368 - #48 5
INFO  18:51:12,368 - #38 *
INFO  18:51:12,368 - #48 2
INFO  18:51:12,370 - #21 )
INFO  18:51:12,371 - #37 +
INFO  18:51:12,371 - #48 11
INFO  18:51:12,373 - #8 ;
INFO  18:51:12,373 - #14 if
INFO  18:51:12,373 - #20 (
INFO  18:51:12,373 - #49 pom1
INFO  18:51:12,373 - #33 >
INFO  18:51:12,373 - #48 0
INFO  18:51:12,374 - #21 )
INFO  18:51:12,374 - #18 return
INFO  18:51:12,374 - #51 true
INFO  18:51:12,374 - #8 ;
INFO  18:51:12,374 - #15 else
INFO  18:51:12,374 - #18 return
INFO  18:51:12,376 - #51 false
INFO  18:51:12,376 - #8 ;
INFO  18:51:12,376 - #5 }
INFO  18:51:12,376 - #41 void
INFO  18:51:12,377 - #49 main
INFO  18:51:12,377 - #20 (
INFO  18:51:12,377 - #21 )
INFO  18:51:12,377 - #49 int
INFO  18:51:12,377 - #49 p1
INFO  18:51:12,377 - #9 ,
INFO  18:51:12,377 - #49 i
INFO  18:51:12,377 - #8 ;
INFO  18:51:12,377 - #6 const
INFO  18:51:12,377 - #49 int
INFO  18:51:12,377 - #49 p2
INFO  18:51:12,377 - #7 =
INFO  18:51:12,377 - #48 5
INFO  18:51:12,378 - #8 ;
INFO  18:51:12,378 - #49 char
INFO  18:51:12,378 - #49 p
INFO  18:51:12,378 - #8 ;
INFO  18:51:12,378 - #4 {
INFO  18:51:12,378 - #49 i
INFO  18:51:12,378 - #7 =
INFO  18:51:12,378 - #48 0
INFO  18:51:12,378 - #8 ;
INFO  18:51:12,378 - #14 if
INFO  18:51:12,378 - #20 (
INFO  18:51:12,378 - #49 i
INFO  18:51:12,378 - #31 ==
INFO  18:51:12,379 - #48 3
INFO  18:51:12,379 - #21 )
INFO  18:51:12,379 - #22 print
INFO  18:51:12,379 - #20 (
INFO  18:51:12,379 - #49 i
INFO  18:51:12,379 - #21 )
INFO  18:51:12,379 - #8 ;
INFO  18:51:12,379 - #15 else
INFO  18:51:12,379 - #14 if
INFO  18:51:12,379 - #20 (
INFO  18:51:12,379 - #49 i
INFO  18:51:12,380 - #31 ==
INFO  18:51:12,380 - #48 2
INFO  18:51:12,380 - #21 )
INFO  18:51:12,380 - #49 i
INFO  18:51:12,380 - #24 ++
INFO  18:51:12,380 - #8 ;
INFO  18:51:12,380 - #15 else
INFO  18:51:12,380 - #49 i
INFO  18:51:12,380 - #7 =
INFO  18:51:12,380 - #49 i
INFO  18:51:12,380 - #37 +
INFO  18:51:12,380 - #48 1
INFO  18:51:12,380 - #8 ;
INFO  18:51:12,381 - #22 print
INFO  18:51:12,381 - #20 (
INFO  18:51:12,381 - #49 i
INFO  18:51:12,381 - #21 )
INFO  18:51:12,381 - #8 ;
INFO  18:51:12,381 - #14 if
INFO  18:51:12,381 - #20 (
INFO  18:51:12,381 - #49 provera
INFO  18:51:12,381 - #20 (
INFO  18:51:12,381 - #21 )
INFO  18:51:12,382 - #21 )
INFO  18:51:12,383 - #22 print
INFO  18:51:12,383 - #20 (
INFO  18:51:12,383 - #50 t
INFO  18:51:12,383 - #21 )
INFO  18:51:12,383 - #8 ;
INFO  18:51:12,383 - #49 niz1
INFO  18:51:12,383 - #7 =
INFO  18:51:12,383 - #29 new
INFO  18:51:12,384 - #49 char
INFO  18:51:12,384 - #10 [
INFO  18:51:12,384 - #48 3
INFO  18:51:12,384 - #11 ]
INFO  18:51:12,384 - #8 ;
INFO  18:51:12,384 - #49 niz1
INFO  18:51:12,384 - #10 [
INFO  18:51:12,384 - #48 0
INFO  18:51:12,384 - #11 ]
INFO  18:51:12,384 - #7 =
INFO  18:51:12,384 - #50 a
INFO  18:51:12,384 - #8 ;
INFO  18:51:12,384 - #49 niz1
INFO  18:51:12,384 - #10 [
INFO  18:51:12,384 - #48 1
INFO  18:51:12,384 - #11 ]
INFO  18:51:12,385 - #7 =
INFO  18:51:12,385 - #50 b
INFO  18:51:12,385 - #8 ;
INFO  18:51:12,385 - #49 niz1
INFO  18:51:12,385 - #10 [
INFO  18:51:12,385 - #48 2
INFO  18:51:12,385 - #11 ]
INFO  18:51:12,385 - #7 =
INFO  18:51:12,385 - #50 c
INFO  18:51:12,385 - #8 ;
INFO  18:51:12,385 - #49 p
INFO  18:51:12,385 - #7 =
INFO  18:51:12,385 - #49 dohvatPrviKarakter
INFO  18:51:12,385 - #20 (
INFO  18:51:12,385 - #49 niz1
INFO  18:51:12,385 - #21 )
INFO  18:51:12,385 - #8 ;
INFO  18:51:12,385 - #22 print
INFO  18:51:12,385 - #20 (
INFO  18:51:12,385 - #49 p
INFO  18:51:12,386 - #21 )
INFO  18:51:12,386 - #8 ;
INFO  18:51:12,386 - #5 }
INFO  18:51:12,386 - #5 }
INFO  18:51:12,403 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:51:12,405 - ===================================
INFO  18:51:12,406 - Pocetak programa test301.
INFO  18:51:12,406 - Deklarisana je konstanta a na liniji 3
INFO  18:51:12,406 - Deklarisana je promenljiva b na liniji 4
INFO  18:51:12,406 - Deklarisana je promenljiva c na liniji 4
INFO  18:51:12,406 - Deklarisana je konstanta t na liniji 5
INFO  18:51:12,406 - Deklarisana je konstanta f na liniji 5
INFO  18:51:12,407 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:51:12,407 - Deklarisana je promenljiva d na liniji 7
INFO  18:51:12,407 - Deklarisana je promenljiva e na liniji 7
INFO  18:51:12,407 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:51:12,407 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:51:12,407 - Deklarisana je promenljiva s na liniji 12
INFO  18:51:12,407 - Deklarisana je promenljiva i na liniji 12
INFO  18:51:12,407 - Deklarisana je promenljiva j na liniji 12
ERROR 18:51:12,408 - Greska, nepoklapanje tipa parametara pozvane funkcije na liniji 14
INFO  18:51:12,408 - Pronadjen poziv funkcije len na liniji 14
INFO  18:51:12,408 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:51:12,408 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:51:12,408 - Kreiran/promenjen element niza niz
INFO  18:51:12,409 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  18:51:12,409 - Dobra povratna vrednost funkcije na liniji 21
INFO  18:51:12,409 - Obradjuje se funkcija provera na liniji 24
INFO  18:51:12,409 - Deklarisana je promenljiva pom1 na liniji 25
INFO  18:51:12,409 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  18:51:12,409 - Dobra povratna vrednost funkcije na liniji 29
INFO  18:51:12,409 - Dobra povratna vrednost funkcije na liniji 30
INFO  18:51:12,409 - Obradjuje se funkcija main na liniji 33
INFO  18:51:12,410 - Deklarisana je promenljiva p1 na liniji 34
INFO  18:51:12,410 - Deklarisana je promenljiva i na liniji 34
INFO  18:51:12,410 - Deklarisana je konstanta p2 na liniji 35
INFO  18:51:12,410 - Deklarisana je promenljiva p na liniji 36
INFO  18:51:12,410 - Designator i expr su odgovarajuceg tipa na liniji 38
INFO  18:51:12,410 - Obradjena funkcija PRINT na liniji 39
INFO  18:51:12,410 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  18:51:12,410 - Obradjena funkcija PRINT na liniji 42
INFO  18:51:12,410 - Pronadjen poziv funkcije provera na liniji 44
INFO  18:51:12,410 - Obradjena funkcija PRINT na liniji 44
ERROR 18:51:12,410 - Greska na liniji 46 designator i expr nisu istog tipa
INFO  18:51:12,411 - Kreiran/promenjen element niza niz1
INFO  18:51:52,277 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:51:52,370 - #2 program
INFO  18:51:52,370 - #49 test301
INFO  18:51:52,370 - #6 const
INFO  18:51:52,372 - #49 int
INFO  18:51:52,372 - #49 a
INFO  18:51:52,372 - #7 =
INFO  18:51:52,373 - #48 5
INFO  18:51:52,373 - #8 ;
INFO  18:51:52,373 - #49 int
INFO  18:51:52,374 - #49 b
INFO  18:51:52,374 - #9 ,
INFO  18:51:52,376 - #49 c
INFO  18:51:52,376 - #8 ;
INFO  18:51:52,377 - #6 const
INFO  18:51:52,377 - #49 bool
INFO  18:51:52,378 - #49 t
INFO  18:51:52,378 - #7 =
INFO  18:51:52,378 - #51 true
INFO  18:51:52,378 - #9 ,
INFO  18:51:52,379 - #49 f
INFO  18:51:52,379 - #7 =
INFO  18:51:52,379 - #51 false
INFO  18:51:52,380 - #8 ;
INFO  18:51:52,380 - #49 int
INFO  18:51:52,380 - #49 niz1
INFO  18:51:52,380 - #10 [
INFO  18:51:52,380 - #11 ]
INFO  18:51:52,380 - #8 ;
INFO  18:51:52,382 - #49 int
INFO  18:51:52,382 - #49 d
INFO  18:51:52,382 - #9 ,
INFO  18:51:52,383 - #49 e
INFO  18:51:52,383 - #8 ;
INFO  18:51:52,383 - #4 {
INFO  18:51:52,383 - #49 char
INFO  18:51:52,384 - #49 dohvatPrviKarakter
INFO  18:51:52,385 - #20 (
INFO  18:51:52,385 - #49 char
INFO  18:51:52,385 - #49 niz
INFO  18:51:52,385 - #10 [
INFO  18:51:52,385 - #11 ]
INFO  18:51:52,385 - #21 )
INFO  18:51:52,386 - #49 char
INFO  18:51:52,386 - #49 s
INFO  18:51:52,386 - #8 ;
INFO  18:51:52,386 - #49 int
INFO  18:51:52,387 - #49 i
INFO  18:51:52,387 - #9 ,
INFO  18:51:52,387 - #49 j
INFO  18:51:52,387 - #8 ;
INFO  18:51:52,387 - #4 {
INFO  18:51:52,387 - #23 for
INFO  18:51:52,387 - #20 (
INFO  18:51:52,389 - #49 i
INFO  18:51:52,389 - #7 =
INFO  18:51:52,389 - #49 len
INFO  18:51:52,390 - #20 (
INFO  18:51:52,390 - #49 niz
INFO  18:51:52,391 - #21 )
INFO  18:51:52,392 - #9 ,
INFO  18:51:52,393 - #49 j
INFO  18:51:52,393 - #7 =
INFO  18:51:52,393 - #48 0
INFO  18:51:52,393 - #8 ;
INFO  18:51:52,393 - #49 i
INFO  18:51:52,394 - #33 >
INFO  18:51:52,395 - #48 0
INFO  18:51:52,398 - #8 ;
INFO  18:51:52,400 - #49 i
INFO  18:51:52,401 - #25 --
INFO  18:51:52,401 - #9 ,
INFO  18:51:52,401 - #49 j
INFO  18:51:52,401 - #24 ++
INFO  18:51:52,401 - #21 )
INFO  18:51:52,402 - #4 {
INFO  18:51:52,403 - #14 if
INFO  18:51:52,403 - #20 (
INFO  18:51:52,403 - #49 i
INFO  18:51:52,404 - #31 ==
INFO  18:51:52,404 - #48 1
INFO  18:51:52,405 - #26 &&
INFO  18:51:52,406 - #49 j
INFO  18:51:52,406 - #34 >=
INFO  18:51:52,406 - #48 0
INFO  18:51:52,407 - #27 ||
INFO  18:51:52,407 - #49 j
INFO  18:51:52,408 - #31 ==
INFO  18:51:52,409 - #48 0
INFO  18:51:52,409 - #21 )
INFO  18:51:52,409 - #4 {
INFO  18:51:52,410 - #49 s
INFO  18:51:52,410 - #7 =
INFO  18:51:52,411 - #49 niz
INFO  18:51:52,411 - #10 [
INFO  18:51:52,412 - #49 i
INFO  18:51:52,412 - #11 ]
INFO  18:51:52,412 - #8 ;
INFO  18:51:52,413 - #16 break
INFO  18:51:52,413 - #8 ;
INFO  18:51:52,413 - #5 }
INFO  18:51:52,415 - #5 }
INFO  18:51:52,416 - #18 return
INFO  18:51:52,416 - #49 s
INFO  18:51:52,416 - #8 ;
INFO  18:51:52,416 - #5 }
INFO  18:51:52,417 - #49 bool
INFO  18:51:52,418 - #49 provera
INFO  18:51:52,418 - #20 (
INFO  18:51:52,418 - #21 )
INFO  18:51:52,419 - #49 int
INFO  18:51:52,419 - #49 pom1
INFO  18:51:52,419 - #8 ;
INFO  18:51:52,419 - #4 {
INFO  18:51:52,419 - #49 pom1
INFO  18:51:52,419 - #7 =
INFO  18:51:52,420 - #28 -
INFO  18:51:52,420 - #20 (
INFO  18:51:52,420 - #48 5
INFO  18:51:52,420 - #38 *
INFO  18:51:52,420 - #48 2
INFO  18:51:52,422 - #21 )
INFO  18:51:52,422 - #37 +
INFO  18:51:52,423 - #48 11
INFO  18:51:52,425 - #8 ;
INFO  18:51:52,425 - #14 if
INFO  18:51:52,425 - #20 (
INFO  18:51:52,425 - #49 pom1
INFO  18:51:52,425 - #33 >
INFO  18:51:52,426 - #48 0
INFO  18:51:52,426 - #21 )
INFO  18:51:52,426 - #18 return
INFO  18:51:52,426 - #51 true
INFO  18:51:52,426 - #8 ;
INFO  18:51:52,426 - #15 else
INFO  18:51:52,426 - #18 return
INFO  18:51:52,428 - #51 false
INFO  18:51:52,428 - #8 ;
INFO  18:51:52,429 - #5 }
INFO  18:51:52,429 - #41 void
INFO  18:51:52,429 - #49 main
INFO  18:51:52,429 - #20 (
INFO  18:51:52,429 - #21 )
INFO  18:51:52,430 - #49 int
INFO  18:51:52,430 - #49 p1
INFO  18:51:52,430 - #9 ,
INFO  18:51:52,430 - #49 i
INFO  18:51:52,430 - #8 ;
INFO  18:51:52,430 - #6 const
INFO  18:51:52,430 - #49 int
INFO  18:51:52,430 - #49 p2
INFO  18:51:52,430 - #7 =
INFO  18:51:52,430 - #48 5
INFO  18:51:52,430 - #8 ;
INFO  18:51:52,430 - #49 char
INFO  18:51:52,431 - #49 p
INFO  18:51:52,431 - #8 ;
INFO  18:51:52,431 - #4 {
INFO  18:51:52,431 - #49 i
INFO  18:51:52,431 - #7 =
INFO  18:51:52,431 - #48 0
INFO  18:51:52,431 - #8 ;
INFO  18:51:52,431 - #14 if
INFO  18:51:52,431 - #20 (
INFO  18:51:52,431 - #49 i
INFO  18:51:52,432 - #31 ==
INFO  18:51:52,432 - #48 3
INFO  18:51:52,432 - #21 )
INFO  18:51:52,432 - #22 print
INFO  18:51:52,432 - #20 (
INFO  18:51:52,432 - #49 i
INFO  18:51:52,432 - #21 )
INFO  18:51:52,432 - #8 ;
INFO  18:51:52,433 - #15 else
INFO  18:51:52,433 - #14 if
INFO  18:51:52,433 - #20 (
INFO  18:51:52,433 - #49 i
INFO  18:51:52,433 - #31 ==
INFO  18:51:52,433 - #48 2
INFO  18:51:52,433 - #21 )
INFO  18:51:52,434 - #49 i
INFO  18:51:52,434 - #24 ++
INFO  18:51:52,434 - #8 ;
INFO  18:51:52,434 - #15 else
INFO  18:51:52,434 - #49 i
INFO  18:51:52,434 - #7 =
INFO  18:51:52,434 - #49 i
INFO  18:51:52,434 - #37 +
INFO  18:51:52,434 - #48 1
INFO  18:51:52,434 - #8 ;
INFO  18:51:52,434 - #22 print
INFO  18:51:52,435 - #20 (
INFO  18:51:52,435 - #49 i
INFO  18:51:52,435 - #21 )
INFO  18:51:52,435 - #8 ;
INFO  18:51:52,436 - #14 if
INFO  18:51:52,436 - #20 (
INFO  18:51:52,436 - #49 provera
INFO  18:51:52,437 - #20 (
INFO  18:51:52,437 - #21 )
INFO  18:51:52,439 - #21 )
INFO  18:51:52,439 - #22 print
INFO  18:51:52,439 - #20 (
INFO  18:51:52,439 - #50 t
INFO  18:51:52,439 - #21 )
INFO  18:51:52,440 - #8 ;
INFO  18:51:52,440 - #49 niz1
INFO  18:51:52,440 - #7 =
INFO  18:51:52,440 - #29 new
INFO  18:51:52,440 - #49 char
INFO  18:51:52,440 - #10 [
INFO  18:51:52,440 - #48 3
INFO  18:51:52,440 - #11 ]
INFO  18:51:52,440 - #8 ;
INFO  18:51:52,440 - #49 niz1
INFO  18:51:52,440 - #10 [
INFO  18:51:52,440 - #48 0
INFO  18:51:52,441 - #11 ]
INFO  18:51:52,441 - #7 =
INFO  18:51:52,441 - #50 a
INFO  18:51:52,441 - #8 ;
INFO  18:51:52,441 - #49 niz1
INFO  18:51:52,441 - #10 [
INFO  18:51:52,441 - #48 1
INFO  18:51:52,441 - #11 ]
INFO  18:51:52,441 - #7 =
INFO  18:51:52,441 - #50 b
INFO  18:51:52,441 - #8 ;
INFO  18:51:52,441 - #49 niz1
INFO  18:51:52,441 - #10 [
INFO  18:51:52,441 - #48 2
INFO  18:51:52,441 - #11 ]
INFO  18:51:52,442 - #7 =
INFO  18:51:52,442 - #50 c
INFO  18:51:52,442 - #8 ;
INFO  18:51:52,442 - #49 p
INFO  18:51:52,442 - #7 =
INFO  18:51:52,442 - #49 dohvatPrviKarakter
INFO  18:51:52,442 - #20 (
INFO  18:51:52,442 - #49 niz1
INFO  18:51:52,442 - #21 )
INFO  18:51:52,442 - #8 ;
INFO  18:51:52,442 - #22 print
INFO  18:51:52,442 - #20 (
INFO  18:51:52,442 - #49 p
INFO  18:51:52,442 - #21 )
INFO  18:51:52,442 - #8 ;
INFO  18:51:52,443 - #5 }
INFO  18:51:52,443 - #5 }
INFO  18:51:52,466 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:51:52,469 - ===================================
INFO  18:51:52,469 - Pocetak programa test301.
INFO  18:51:52,469 - Deklarisana je konstanta a na liniji 3
INFO  18:51:52,470 - Deklarisana je promenljiva b na liniji 4
INFO  18:51:52,470 - Deklarisana je promenljiva c na liniji 4
INFO  18:51:52,470 - Deklarisana je konstanta t na liniji 5
INFO  18:51:52,470 - Deklarisana je konstanta f na liniji 5
INFO  18:51:52,470 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:51:52,470 - Deklarisana je promenljiva d na liniji 7
INFO  18:51:52,470 - Deklarisana je promenljiva e na liniji 7
INFO  18:51:52,470 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:51:52,471 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:51:52,471 - Deklarisana je promenljiva s na liniji 12
INFO  18:51:52,471 - Deklarisana je promenljiva i na liniji 12
INFO  18:51:52,471 - Deklarisana je promenljiva j na liniji 12
ERROR 18:51:52,471 - Greska, nepoklapanje tipa parametara pozvane funkcije na liniji 14
INFO  18:51:52,471 - Pronadjen poziv funkcije len na liniji 14
INFO  18:51:52,471 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:51:52,472 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:51:52,472 - Kreiran/promenjen element niza niz
INFO  18:51:52,472 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  18:51:52,472 - Dobra povratna vrednost funkcije na liniji 21
INFO  18:51:52,472 - Obradjuje se funkcija provera na liniji 24
INFO  18:51:52,472 - Deklarisana je promenljiva pom1 na liniji 25
INFO  18:51:52,473 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  18:51:52,473 - Dobra povratna vrednost funkcije na liniji 29
INFO  18:51:52,473 - Dobra povratna vrednost funkcije na liniji 30
INFO  18:51:52,473 - Obradjuje se funkcija main na liniji 33
INFO  18:51:52,473 - Deklarisana je promenljiva p1 na liniji 34
INFO  18:51:52,473 - Deklarisana je promenljiva i na liniji 34
INFO  18:51:52,473 - Deklarisana je konstanta p2 na liniji 35
INFO  18:51:52,473 - Deklarisana je promenljiva p na liniji 36
INFO  18:51:52,473 - Designator i expr su odgovarajuceg tipa na liniji 38
INFO  18:51:52,474 - Obradjena funkcija PRINT na liniji 39
INFO  18:51:52,474 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  18:51:52,474 - Obradjena funkcija PRINT na liniji 42
INFO  18:51:52,474 - Pronadjen poziv funkcije provera na liniji 44
INFO  18:51:52,474 - Obradjena funkcija PRINT na liniji 44
ERROR 18:51:52,474 - Greska na liniji 46 designator i expr nisu istog tipa
INFO  18:51:52,474 - Kreiran/promenjen element niza niz1
ERROR 18:51:52,474 - Greska na liniji 47 designator i expr nisu istog tipa
INFO  18:51:52,474 - Kreiran/promenjen element niza niz1
ERROR 18:51:52,474 - Greska na liniji 48 designator i expr nisu istog tipa
INFO  18:51:52,474 - Kreiran/promenjen element niza niz1
ERROR 18:51:52,474 - Greska na liniji 49 designator i expr nisu istog tipa
ERROR 18:51:52,475 - Greska, nepoklapanje tipa parametara pozvane funkcije na liniji 51
INFO  18:51:52,475 - Pronadjen poziv funkcije dohvatPrviKarakter na liniji 51
INFO  18:51:52,475 - Designator i expr su odgovarajuceg tipa na liniji 51
INFO  18:51:52,475 - Obradjena funkcija PRINT na liniji 52
INFO  18:51:52,475 - ===================================
ERROR 18:51:52,476 - Parsiranje NIJE uspesno zavrseno!
INFO  18:51:59,386 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:51:59,491 - #2 program
INFO  18:51:59,491 - #49 test301
INFO  18:51:59,491 - #6 const
INFO  18:51:59,493 - #49 int
INFO  18:51:59,494 - #49 a
INFO  18:51:59,494 - #7 =
INFO  18:51:59,495 - #48 5
INFO  18:51:59,495 - #8 ;
INFO  18:51:59,495 - #49 int
INFO  18:51:59,496 - #49 b
INFO  18:51:59,496 - #9 ,
INFO  18:51:59,497 - #49 c
INFO  18:51:59,498 - #8 ;
INFO  18:51:59,498 - #6 const
INFO  18:51:59,498 - #49 bool
INFO  18:51:59,498 - #49 t
INFO  18:51:59,498 - #7 =
INFO  18:51:59,499 - #51 true
INFO  18:51:59,499 - #9 ,
INFO  18:51:59,499 - #49 f
INFO  18:51:59,499 - #7 =
INFO  18:51:59,499 - #51 false
INFO  18:51:59,499 - #8 ;
INFO  18:51:59,500 - #49 char
INFO  18:51:59,500 - #49 niz1
INFO  18:51:59,500 - #10 [
INFO  18:51:59,500 - #11 ]
INFO  18:51:59,500 - #8 ;
INFO  18:51:59,502 - #49 int
INFO  18:51:59,502 - #49 d
INFO  18:51:59,502 - #9 ,
INFO  18:51:59,502 - #49 e
INFO  18:51:59,502 - #8 ;
INFO  18:51:59,502 - #4 {
INFO  18:51:59,502 - #49 char
INFO  18:51:59,504 - #49 dohvatPrviKarakter
INFO  18:51:59,504 - #20 (
INFO  18:51:59,504 - #49 char
INFO  18:51:59,504 - #49 niz
INFO  18:51:59,504 - #10 [
INFO  18:51:59,505 - #11 ]
INFO  18:51:59,505 - #21 )
INFO  18:51:59,505 - #49 char
INFO  18:51:59,506 - #49 s
INFO  18:51:59,506 - #8 ;
INFO  18:51:59,506 - #49 int
INFO  18:51:59,506 - #49 i
INFO  18:51:59,506 - #9 ,
INFO  18:51:59,506 - #49 j
INFO  18:51:59,506 - #8 ;
INFO  18:51:59,507 - #4 {
INFO  18:51:59,507 - #23 for
INFO  18:51:59,507 - #20 (
INFO  18:51:59,508 - #49 i
INFO  18:51:59,509 - #7 =
INFO  18:51:59,509 - #49 len
INFO  18:51:59,510 - #20 (
INFO  18:51:59,510 - #49 niz
INFO  18:51:59,510 - #21 )
INFO  18:51:59,512 - #9 ,
INFO  18:51:59,512 - #49 j
INFO  18:51:59,512 - #7 =
INFO  18:51:59,512 - #48 0
INFO  18:51:59,513 - #8 ;
INFO  18:51:59,513 - #49 i
INFO  18:51:59,514 - #33 >
INFO  18:51:59,515 - #48 0
INFO  18:51:59,517 - #8 ;
INFO  18:51:59,518 - #49 i
INFO  18:51:59,519 - #25 --
INFO  18:51:59,520 - #9 ,
INFO  18:51:59,520 - #49 j
INFO  18:51:59,520 - #24 ++
INFO  18:51:59,520 - #21 )
INFO  18:51:59,521 - #4 {
INFO  18:51:59,522 - #14 if
INFO  18:51:59,522 - #20 (
INFO  18:51:59,522 - #49 i
INFO  18:51:59,523 - #31 ==
INFO  18:51:59,524 - #48 1
INFO  18:51:59,524 - #26 &&
INFO  18:51:59,524 - #49 j
INFO  18:51:59,525 - #34 >=
INFO  18:51:59,525 - #48 0
INFO  18:51:59,526 - #27 ||
INFO  18:51:59,526 - #49 j
INFO  18:51:59,527 - #31 ==
INFO  18:51:59,527 - #48 0
INFO  18:51:59,527 - #21 )
INFO  18:51:59,527 - #4 {
INFO  18:51:59,529 - #49 s
INFO  18:51:59,529 - #7 =
INFO  18:51:59,529 - #49 niz
INFO  18:51:59,529 - #10 [
INFO  18:51:59,530 - #49 i
INFO  18:51:59,531 - #11 ]
INFO  18:51:59,531 - #8 ;
INFO  18:51:59,531 - #16 break
INFO  18:51:59,531 - #8 ;
INFO  18:51:59,531 - #5 }
INFO  18:51:59,533 - #5 }
INFO  18:51:59,534 - #18 return
INFO  18:51:59,534 - #49 s
INFO  18:51:59,534 - #8 ;
INFO  18:51:59,534 - #5 }
INFO  18:51:59,534 - #49 bool
INFO  18:51:59,536 - #49 provera
INFO  18:51:59,536 - #20 (
INFO  18:51:59,536 - #21 )
INFO  18:51:59,537 - #49 int
INFO  18:51:59,537 - #49 pom1
INFO  18:51:59,537 - #8 ;
INFO  18:51:59,537 - #4 {
INFO  18:51:59,537 - #49 pom1
INFO  18:51:59,537 - #7 =
INFO  18:51:59,537 - #28 -
INFO  18:51:59,537 - #20 (
INFO  18:51:59,538 - #48 5
INFO  18:51:59,538 - #38 *
INFO  18:51:59,538 - #48 2
INFO  18:51:59,540 - #21 )
INFO  18:51:59,540 - #37 +
INFO  18:51:59,540 - #48 11
INFO  18:51:59,542 - #8 ;
INFO  18:51:59,542 - #14 if
INFO  18:51:59,542 - #20 (
INFO  18:51:59,543 - #49 pom1
INFO  18:51:59,543 - #33 >
INFO  18:51:59,543 - #48 0
INFO  18:51:59,543 - #21 )
INFO  18:51:59,543 - #18 return
INFO  18:51:59,543 - #51 true
INFO  18:51:59,543 - #8 ;
INFO  18:51:59,543 - #15 else
INFO  18:51:59,544 - #18 return
INFO  18:51:59,545 - #51 false
INFO  18:51:59,545 - #8 ;
INFO  18:51:59,545 - #5 }
INFO  18:51:59,546 - #41 void
INFO  18:51:59,546 - #49 main
INFO  18:51:59,546 - #20 (
INFO  18:51:59,546 - #21 )
INFO  18:51:59,546 - #49 int
INFO  18:51:59,546 - #49 p1
INFO  18:51:59,546 - #9 ,
INFO  18:51:59,546 - #49 i
INFO  18:51:59,546 - #8 ;
INFO  18:51:59,546 - #6 const
INFO  18:51:59,547 - #49 int
INFO  18:51:59,547 - #49 p2
INFO  18:51:59,547 - #7 =
INFO  18:51:59,547 - #48 5
INFO  18:51:59,547 - #8 ;
INFO  18:51:59,547 - #49 char
INFO  18:51:59,547 - #49 p
INFO  18:51:59,547 - #8 ;
INFO  18:51:59,547 - #4 {
INFO  18:51:59,547 - #49 i
INFO  18:51:59,547 - #7 =
INFO  18:51:59,547 - #48 0
INFO  18:51:59,548 - #8 ;
INFO  18:51:59,548 - #14 if
INFO  18:51:59,548 - #20 (
INFO  18:51:59,548 - #49 i
INFO  18:51:59,548 - #31 ==
INFO  18:51:59,548 - #48 3
INFO  18:51:59,548 - #21 )
INFO  18:51:59,548 - #22 print
INFO  18:51:59,548 - #20 (
INFO  18:51:59,548 - #49 i
INFO  18:51:59,549 - #21 )
INFO  18:51:59,549 - #8 ;
INFO  18:51:59,549 - #15 else
INFO  18:51:59,549 - #14 if
INFO  18:51:59,549 - #20 (
INFO  18:51:59,549 - #49 i
INFO  18:51:59,549 - #31 ==
INFO  18:51:59,549 - #48 2
INFO  18:51:59,549 - #21 )
INFO  18:51:59,549 - #49 i
INFO  18:51:59,550 - #24 ++
INFO  18:51:59,550 - #8 ;
INFO  18:51:59,550 - #15 else
INFO  18:51:59,550 - #49 i
INFO  18:51:59,550 - #7 =
INFO  18:51:59,550 - #49 i
INFO  18:51:59,550 - #37 +
INFO  18:51:59,550 - #48 1
INFO  18:51:59,550 - #8 ;
INFO  18:51:59,550 - #22 print
INFO  18:51:59,550 - #20 (
INFO  18:51:59,550 - #49 i
INFO  18:51:59,551 - #21 )
INFO  18:51:59,551 - #8 ;
INFO  18:51:59,551 - #14 if
INFO  18:51:59,551 - #20 (
INFO  18:51:59,551 - #49 provera
INFO  18:51:59,551 - #20 (
INFO  18:51:59,551 - #21 )
INFO  18:51:59,552 - #21 )
INFO  18:51:59,552 - #22 print
INFO  18:51:59,552 - #20 (
INFO  18:51:59,553 - #50 t
INFO  18:51:59,553 - #21 )
INFO  18:51:59,553 - #8 ;
INFO  18:51:59,553 - #49 niz1
INFO  18:51:59,553 - #7 =
INFO  18:51:59,553 - #29 new
INFO  18:51:59,553 - #49 char
INFO  18:51:59,553 - #10 [
INFO  18:51:59,553 - #48 3
INFO  18:51:59,553 - #11 ]
INFO  18:51:59,553 - #8 ;
INFO  18:51:59,554 - #49 niz1
INFO  18:51:59,554 - #10 [
INFO  18:51:59,554 - #48 0
INFO  18:51:59,554 - #11 ]
INFO  18:51:59,554 - #7 =
INFO  18:51:59,554 - #50 a
INFO  18:51:59,554 - #8 ;
INFO  18:51:59,554 - #49 niz1
INFO  18:51:59,554 - #10 [
INFO  18:51:59,554 - #48 1
INFO  18:51:59,554 - #11 ]
INFO  18:51:59,554 - #7 =
INFO  18:51:59,554 - #50 b
INFO  18:51:59,554 - #8 ;
INFO  18:51:59,554 - #49 niz1
INFO  18:51:59,554 - #10 [
INFO  18:51:59,554 - #48 2
INFO  18:51:59,555 - #11 ]
INFO  18:51:59,555 - #7 =
INFO  18:51:59,555 - #50 c
INFO  18:51:59,555 - #8 ;
INFO  18:51:59,555 - #49 p
INFO  18:51:59,555 - #7 =
INFO  18:51:59,555 - #49 dohvatPrviKarakter
INFO  18:51:59,555 - #20 (
INFO  18:51:59,555 - #49 niz1
INFO  18:51:59,555 - #21 )
INFO  18:51:59,555 - #8 ;
INFO  18:51:59,555 - #22 print
INFO  18:51:59,555 - #20 (
INFO  18:51:59,555 - #49 p
INFO  18:51:59,555 - #21 )
INFO  18:51:59,555 - #8 ;
INFO  18:51:59,555 - #5 }
INFO  18:51:59,556 - #5 }
INFO  18:51:59,573 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:51:59,575 - ===================================
INFO  18:51:59,576 - Pocetak programa test301.
INFO  18:51:59,576 - Deklarisana je konstanta a na liniji 3
INFO  18:51:59,576 - Deklarisana je promenljiva b na liniji 4
INFO  18:51:59,577 - Deklarisana je promenljiva c na liniji 4
INFO  18:51:59,577 - Deklarisana je konstanta t na liniji 5
INFO  18:51:59,577 - Deklarisana je konstanta f na liniji 5
INFO  18:51:59,577 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:51:59,577 - Deklarisana je promenljiva d na liniji 7
INFO  18:51:59,577 - Deklarisana je promenljiva e na liniji 7
INFO  18:51:59,577 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:51:59,577 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:51:59,577 - Deklarisana je promenljiva s na liniji 12
INFO  18:51:59,578 - Deklarisana je promenljiva i na liniji 12
INFO  18:51:59,578 - Deklarisana je promenljiva j na liniji 12
ERROR 18:51:59,578 - Greska, nepoklapanje tipa parametara pozvane funkcije na liniji 14
INFO  18:51:59,578 - Pronadjen poziv funkcije len na liniji 14
INFO  18:51:59,578 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:51:59,578 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:51:59,579 - Kreiran/promenjen element niza niz
INFO  18:51:59,579 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  18:51:59,579 - Dobra povratna vrednost funkcije na liniji 21
INFO  18:51:59,579 - Obradjuje se funkcija provera na liniji 24
INFO  18:51:59,580 - Deklarisana je promenljiva pom1 na liniji 25
INFO  18:51:59,580 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  18:51:59,580 - Dobra povratna vrednost funkcije na liniji 29
INFO  18:51:59,580 - Dobra povratna vrednost funkcije na liniji 30
INFO  18:51:59,580 - Obradjuje se funkcija main na liniji 33
INFO  18:51:59,580 - Deklarisana je promenljiva p1 na liniji 34
INFO  18:51:59,580 - Deklarisana je promenljiva i na liniji 34
INFO  18:51:59,580 - Deklarisana je konstanta p2 na liniji 35
INFO  18:51:59,580 - Deklarisana je promenljiva p na liniji 36
INFO  18:51:59,580 - Designator i expr su odgovarajuceg tipa na liniji 38
INFO  18:51:59,580 - Obradjena funkcija PRINT na liniji 39
INFO  18:51:59,581 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  18:51:59,581 - Obradjena funkcija PRINT na liniji 42
INFO  18:51:59,581 - Pronadjen poziv funkcije provera na liniji 44
INFO  18:51:59,581 - Obradjena funkcija PRINT na liniji 44
INFO  18:51:59,581 - Designator i expr su odgovarajuceg tipa na liniji 46
INFO  18:51:59,581 - Kreiran/promenjen element niza niz1
INFO  18:51:59,581 - Designator i expr su odgovarajuceg tipa na liniji 47
INFO  18:51:59,581 - Kreiran/promenjen element niza niz1
INFO  18:51:59,581 - Designator i expr su odgovarajuceg tipa na liniji 48
INFO  18:51:59,581 - Kreiran/promenjen element niza niz1
INFO  18:51:59,581 - Designator i expr su odgovarajuceg tipa na liniji 49
INFO  18:51:59,581 - Pronadjen poziv funkcije dohvatPrviKarakter na liniji 51
INFO  18:51:59,581 - Designator i expr su odgovarajuceg tipa na liniji 51
INFO  18:51:59,581 - Obradjena funkcija PRINT na liniji 52
INFO  18:51:59,582 - ===================================
ERROR 18:51:59,582 - Parsiranje NIJE uspesno zavrseno!
INFO  18:53:03,898 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:53:03,981 - #2 program
INFO  18:53:03,981 - #49 test301
INFO  18:53:03,981 - #6 const
INFO  18:53:03,983 - #49 int
INFO  18:53:03,983 - #49 a
INFO  18:53:03,984 - #7 =
INFO  18:53:03,984 - #48 5
INFO  18:53:03,984 - #8 ;
INFO  18:53:03,984 - #49 int
INFO  18:53:03,984 - #49 b
INFO  18:53:03,985 - #9 ,
INFO  18:53:03,986 - #49 c
INFO  18:53:03,986 - #8 ;
INFO  18:53:03,986 - #6 const
INFO  18:53:03,987 - #49 bool
INFO  18:53:03,987 - #49 t
INFO  18:53:03,987 - #7 =
INFO  18:53:03,987 - #51 true
INFO  18:53:03,987 - #9 ,
INFO  18:53:03,987 - #49 f
INFO  18:53:03,987 - #7 =
INFO  18:53:03,987 - #51 false
INFO  18:53:03,987 - #8 ;
INFO  18:53:03,988 - #49 char
INFO  18:53:03,988 - #49 niz1
INFO  18:53:03,988 - #10 [
INFO  18:53:03,988 - #11 ]
INFO  18:53:03,988 - #8 ;
INFO  18:53:03,989 - #49 int
INFO  18:53:03,989 - #49 d
INFO  18:53:03,990 - #9 ,
INFO  18:53:03,990 - #49 e
INFO  18:53:03,990 - #8 ;
INFO  18:53:03,990 - #4 {
INFO  18:53:03,990 - #49 char
INFO  18:53:03,991 - #49 dohvatPrviKarakter
INFO  18:53:03,991 - #20 (
INFO  18:53:03,991 - #49 char
INFO  18:53:03,991 - #49 niz
INFO  18:53:03,991 - #10 [
INFO  18:53:03,991 - #11 ]
INFO  18:53:03,991 - #21 )
INFO  18:53:03,992 - #49 char
INFO  18:53:03,992 - #49 s
INFO  18:53:03,992 - #8 ;
INFO  18:53:03,992 - #49 int
INFO  18:53:03,992 - #49 i
INFO  18:53:03,992 - #9 ,
INFO  18:53:03,993 - #49 j
INFO  18:53:03,993 - #8 ;
INFO  18:53:03,993 - #4 {
INFO  18:53:03,993 - #23 for
INFO  18:53:03,993 - #20 (
INFO  18:53:03,994 - #49 i
INFO  18:53:03,994 - #7 =
INFO  18:53:03,994 - #49 len
INFO  18:53:03,995 - #20 (
INFO  18:53:03,995 - #49 niz
INFO  18:53:03,995 - #21 )
INFO  18:53:03,996 - #9 ,
INFO  18:53:03,997 - #49 j
INFO  18:53:03,997 - #7 =
INFO  18:53:03,997 - #48 0
INFO  18:53:03,997 - #8 ;
INFO  18:53:03,997 - #49 i
INFO  18:53:03,998 - #33 >
INFO  18:53:03,998 - #48 0
INFO  18:53:04,000 - #8 ;
INFO  18:53:04,001 - #49 i
INFO  18:53:04,001 - #25 --
INFO  18:53:04,001 - #9 ,
INFO  18:53:04,002 - #49 j
INFO  18:53:04,002 - #24 ++
INFO  18:53:04,002 - #21 )
INFO  18:53:04,003 - #4 {
INFO  18:53:04,004 - #14 if
INFO  18:53:04,004 - #20 (
INFO  18:53:04,004 - #49 i
INFO  18:53:04,005 - #31 ==
INFO  18:53:04,005 - #48 1
INFO  18:53:04,005 - #26 &&
INFO  18:53:04,006 - #49 j
INFO  18:53:04,006 - #34 >=
INFO  18:53:04,006 - #48 0
INFO  18:53:04,007 - #27 ||
INFO  18:53:04,007 - #49 j
INFO  18:53:04,008 - #31 ==
INFO  18:53:04,008 - #48 0
INFO  18:53:04,008 - #21 )
INFO  18:53:04,008 - #4 {
INFO  18:53:04,009 - #49 s
INFO  18:53:04,009 - #7 =
INFO  18:53:04,009 - #49 niz
INFO  18:53:04,009 - #10 [
INFO  18:53:04,010 - #49 i
INFO  18:53:04,010 - #11 ]
INFO  18:53:04,010 - #8 ;
INFO  18:53:04,011 - #16 break
INFO  18:53:04,011 - #8 ;
INFO  18:53:04,011 - #5 }
INFO  18:53:04,012 - #5 }
INFO  18:53:04,013 - #18 return
INFO  18:53:04,013 - #49 s
INFO  18:53:04,013 - #8 ;
INFO  18:53:04,013 - #5 }
INFO  18:53:04,013 - #49 bool
INFO  18:53:04,014 - #49 provera
INFO  18:53:04,015 - #20 (
INFO  18:53:04,015 - #21 )
INFO  18:53:04,015 - #49 int
INFO  18:53:04,015 - #49 pom1
INFO  18:53:04,015 - #8 ;
INFO  18:53:04,016 - #4 {
INFO  18:53:04,016 - #49 pom1
INFO  18:53:04,016 - #7 =
INFO  18:53:04,016 - #28 -
INFO  18:53:04,016 - #20 (
INFO  18:53:04,016 - #48 5
INFO  18:53:04,016 - #38 *
INFO  18:53:04,016 - #48 2
INFO  18:53:04,017 - #21 )
INFO  18:53:04,017 - #37 +
INFO  18:53:04,018 - #48 11
INFO  18:53:04,018 - #8 ;
INFO  18:53:04,019 - #14 if
INFO  18:53:04,019 - #20 (
INFO  18:53:04,019 - #49 pom1
INFO  18:53:04,019 - #33 >
INFO  18:53:04,019 - #48 0
INFO  18:53:04,019 - #21 )
INFO  18:53:04,020 - #18 return
INFO  18:53:04,020 - #51 true
INFO  18:53:04,020 - #8 ;
INFO  18:53:04,020 - #15 else
INFO  18:53:04,020 - #18 return
INFO  18:53:04,021 - #51 false
INFO  18:53:04,021 - #8 ;
INFO  18:53:04,021 - #5 }
INFO  18:53:04,021 - #41 void
INFO  18:53:04,021 - #49 main
INFO  18:53:04,021 - #20 (
INFO  18:53:04,021 - #21 )
INFO  18:53:04,022 - #49 int
INFO  18:53:04,022 - #49 p1
INFO  18:53:04,022 - #9 ,
INFO  18:53:04,022 - #49 i
INFO  18:53:04,022 - #8 ;
INFO  18:53:04,022 - #6 const
INFO  18:53:04,022 - #49 int
INFO  18:53:04,022 - #49 p2
INFO  18:53:04,022 - #7 =
INFO  18:53:04,022 - #48 5
INFO  18:53:04,022 - #8 ;
INFO  18:53:04,022 - #49 char
INFO  18:53:04,022 - #49 p
INFO  18:53:04,022 - #8 ;
INFO  18:53:04,022 - #4 {
INFO  18:53:04,022 - #49 i
INFO  18:53:04,022 - #7 =
INFO  18:53:04,022 - #48 0
INFO  18:53:04,022 - #8 ;
INFO  18:53:04,023 - #14 if
INFO  18:53:04,023 - #20 (
INFO  18:53:04,023 - #49 i
INFO  18:53:04,023 - #31 ==
INFO  18:53:04,023 - #48 3
INFO  18:53:04,023 - #21 )
INFO  18:53:04,023 - #22 print
INFO  18:53:04,023 - #20 (
INFO  18:53:04,023 - #49 i
INFO  18:53:04,023 - #21 )
INFO  18:53:04,023 - #8 ;
INFO  18:53:04,023 - #15 else
INFO  18:53:04,024 - #14 if
INFO  18:53:04,024 - #20 (
INFO  18:53:04,024 - #49 i
INFO  18:53:04,024 - #31 ==
INFO  18:53:04,024 - #48 2
INFO  18:53:04,024 - #21 )
INFO  18:53:04,024 - #49 i
INFO  18:53:04,024 - #24 ++
INFO  18:53:04,024 - #8 ;
INFO  18:53:04,024 - #15 else
INFO  18:53:04,024 - #49 i
INFO  18:53:04,024 - #7 =
INFO  18:53:04,025 - #49 i
INFO  18:53:04,025 - #37 +
INFO  18:53:04,025 - #48 1
INFO  18:53:04,025 - #8 ;
INFO  18:53:04,025 - #22 print
INFO  18:53:04,025 - #20 (
INFO  18:53:04,025 - #49 i
INFO  18:53:04,025 - #21 )
INFO  18:53:04,025 - #8 ;
INFO  18:53:04,025 - #14 if
INFO  18:53:04,025 - #20 (
INFO  18:53:04,025 - #49 provera
INFO  18:53:04,025 - #20 (
INFO  18:53:04,026 - #21 )
INFO  18:53:04,026 - #21 )
INFO  18:53:04,027 - #22 print
INFO  18:53:04,027 - #20 (
INFO  18:53:04,027 - #50 t
INFO  18:53:04,027 - #21 )
INFO  18:53:04,027 - #8 ;
INFO  18:53:04,027 - #49 niz1
INFO  18:53:04,027 - #7 =
INFO  18:53:04,027 - #29 new
INFO  18:53:04,027 - #49 char
INFO  18:53:04,027 - #10 [
INFO  18:53:04,027 - #48 3
INFO  18:53:04,027 - #11 ]
INFO  18:53:04,028 - #8 ;
INFO  18:53:04,028 - #49 niz1
INFO  18:53:04,028 - #10 [
INFO  18:53:04,028 - #48 0
INFO  18:53:04,028 - #11 ]
INFO  18:53:04,028 - #7 =
INFO  18:53:04,028 - #50 a
INFO  18:53:04,028 - #8 ;
INFO  18:53:04,028 - #49 niz1
INFO  18:53:04,028 - #10 [
INFO  18:53:04,028 - #48 1
INFO  18:53:04,028 - #11 ]
INFO  18:53:04,028 - #7 =
INFO  18:53:04,029 - #50 b
INFO  18:53:04,029 - #8 ;
INFO  18:53:04,029 - #49 niz1
INFO  18:53:04,029 - #10 [
INFO  18:53:04,029 - #48 2
INFO  18:53:04,029 - #11 ]
INFO  18:53:04,029 - #7 =
INFO  18:53:04,029 - #50 c
INFO  18:53:04,029 - #8 ;
INFO  18:53:04,029 - #49 p
INFO  18:53:04,029 - #7 =
INFO  18:53:04,029 - #49 dohvatPrviKarakter
INFO  18:53:04,029 - #20 (
INFO  18:53:04,029 - #49 niz1
INFO  18:53:04,029 - #21 )
INFO  18:53:04,030 - #8 ;
INFO  18:53:04,030 - #22 print
INFO  18:53:04,030 - #20 (
INFO  18:53:04,030 - #49 p
INFO  18:53:04,030 - #21 )
INFO  18:53:04,030 - #8 ;
INFO  18:53:04,030 - #5 }
INFO  18:53:04,030 - #5 }
INFO  18:53:04,049 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:53:04,055 - ===================================
INFO  18:53:04,057 - Pocetak programa test301.
INFO  18:53:04,057 - Deklarisana je konstanta a na liniji 3
INFO  18:53:04,058 - Deklarisana je promenljiva b na liniji 4
INFO  18:53:04,059 - Deklarisana je promenljiva c na liniji 4
INFO  18:53:04,059 - Deklarisana je konstanta t na liniji 5
INFO  18:53:04,059 - Deklarisana je konstanta f na liniji 5
INFO  18:53:04,060 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:53:04,060 - Deklarisana je promenljiva d na liniji 7
INFO  18:53:04,060 - Deklarisana je promenljiva e na liniji 7
INFO  18:53:04,060 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:53:04,060 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:53:04,060 - Deklarisana je promenljiva s na liniji 12
INFO  18:53:04,060 - Deklarisana je promenljiva i na liniji 12
INFO  18:53:04,060 - Deklarisana je promenljiva j na liniji 12
INFO  18:55:51,172 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:55:51,257 - #2 program
INFO  18:55:51,258 - #49 test301
INFO  18:55:51,258 - #6 const
INFO  18:55:51,259 - #49 int
INFO  18:55:51,260 - #49 a
INFO  18:55:51,261 - #7 =
INFO  18:55:51,261 - #48 5
INFO  18:55:51,261 - #8 ;
INFO  18:55:51,261 - #49 int
INFO  18:55:51,262 - #49 b
INFO  18:55:51,262 - #9 ,
INFO  18:55:51,263 - #49 c
INFO  18:55:51,263 - #8 ;
INFO  18:55:51,264 - #6 const
INFO  18:55:51,264 - #49 bool
INFO  18:55:51,264 - #49 t
INFO  18:55:51,264 - #7 =
INFO  18:55:51,265 - #51 true
INFO  18:55:51,265 - #9 ,
INFO  18:55:51,265 - #49 f
INFO  18:55:51,265 - #7 =
INFO  18:55:51,265 - #51 false
INFO  18:55:51,265 - #8 ;
INFO  18:55:51,266 - #49 char
INFO  18:55:51,266 - #49 niz1
INFO  18:55:51,266 - #10 [
INFO  18:55:51,266 - #11 ]
INFO  18:55:51,266 - #8 ;
INFO  18:55:51,268 - #49 int
INFO  18:55:51,268 - #49 d
INFO  18:55:51,268 - #9 ,
INFO  18:55:51,268 - #49 e
INFO  18:55:51,268 - #8 ;
INFO  18:55:51,269 - #4 {
INFO  18:55:51,269 - #49 char
INFO  18:55:51,270 - #49 dohvatPrviKarakter
INFO  18:55:51,270 - #20 (
INFO  18:55:51,271 - #49 char
INFO  18:55:51,271 - #49 niz
INFO  18:55:51,271 - #10 [
INFO  18:55:51,271 - #11 ]
INFO  18:55:51,272 - #21 )
INFO  18:55:51,272 - #49 char
INFO  18:55:51,273 - #49 s
INFO  18:55:51,273 - #8 ;
INFO  18:55:51,274 - #49 int
INFO  18:55:51,274 - #49 i
INFO  18:55:51,274 - #9 ,
INFO  18:55:51,274 - #49 j
INFO  18:55:51,275 - #8 ;
INFO  18:55:51,275 - #4 {
INFO  18:55:51,275 - #23 for
INFO  18:55:51,275 - #20 (
INFO  18:55:51,277 - #49 i
INFO  18:55:51,277 - #7 =
INFO  18:55:51,277 - #49 len
INFO  18:55:51,279 - #20 (
INFO  18:55:51,280 - #49 niz
INFO  18:55:51,280 - #21 )
INFO  18:55:51,282 - #9 ,
INFO  18:55:51,283 - #49 j
INFO  18:55:51,283 - #7 =
INFO  18:55:51,283 - #48 0
INFO  18:55:51,283 - #8 ;
INFO  18:55:51,283 - #49 i
INFO  18:55:51,285 - #33 >
INFO  18:55:51,285 - #48 0
INFO  18:55:51,287 - #8 ;
INFO  18:55:51,289 - #49 i
INFO  18:55:51,290 - #25 --
INFO  18:55:51,290 - #9 ,
INFO  18:55:51,290 - #49 j
INFO  18:55:51,290 - #24 ++
INFO  18:55:51,290 - #21 )
INFO  18:55:51,292 - #4 {
INFO  18:55:51,293 - #14 if
INFO  18:55:51,293 - #20 (
INFO  18:55:51,293 - #49 i
INFO  18:55:51,294 - #31 ==
INFO  18:55:51,294 - #48 1
INFO  18:55:51,295 - #26 &&
INFO  18:55:51,296 - #49 j
INFO  18:55:51,296 - #34 >=
INFO  18:55:51,296 - #48 0
INFO  18:55:51,298 - #27 ||
INFO  18:55:51,298 - #49 j
INFO  18:55:51,299 - #31 ==
INFO  18:55:51,299 - #48 0
INFO  18:55:51,299 - #21 )
INFO  18:55:51,300 - #4 {
INFO  18:55:51,301 - #49 s
INFO  18:55:51,301 - #7 =
INFO  18:55:51,301 - #49 niz
INFO  18:55:51,301 - #10 [
INFO  18:55:51,303 - #49 i
INFO  18:55:51,303 - #11 ]
INFO  18:55:51,303 - #8 ;
INFO  18:55:51,303 - #16 break
INFO  18:55:51,303 - #8 ;
INFO  18:55:51,303 - #5 }
INFO  18:55:51,305 - #5 }
INFO  18:55:51,306 - #18 return
INFO  18:55:51,306 - #49 s
INFO  18:55:51,306 - #8 ;
INFO  18:55:51,306 - #5 }
INFO  18:55:51,306 - #49 bool
INFO  18:55:51,308 - #49 provera
INFO  18:55:51,308 - #20 (
INFO  18:55:51,308 - #21 )
INFO  18:55:51,309 - #49 int
INFO  18:55:51,309 - #49 pom1
INFO  18:55:51,309 - #8 ;
INFO  18:55:51,309 - #4 {
INFO  18:55:51,309 - #49 pom1
INFO  18:55:51,309 - #7 =
INFO  18:55:51,309 - #28 -
INFO  18:55:51,310 - #20 (
INFO  18:55:51,310 - #48 5
INFO  18:55:51,310 - #38 *
INFO  18:55:51,310 - #48 2
INFO  18:55:51,313 - #21 )
INFO  18:55:51,313 - #37 +
INFO  18:55:51,314 - #48 11
INFO  18:55:51,316 - #8 ;
INFO  18:55:51,316 - #14 if
INFO  18:55:51,316 - #20 (
INFO  18:55:51,316 - #49 pom1
INFO  18:55:51,316 - #33 >
INFO  18:55:51,317 - #48 0
INFO  18:55:51,317 - #21 )
INFO  18:55:51,317 - #18 return
INFO  18:55:51,317 - #51 true
INFO  18:55:51,317 - #8 ;
INFO  18:55:51,317 - #15 else
INFO  18:55:51,317 - #18 return
INFO  18:55:51,319 - #51 false
INFO  18:55:51,319 - #8 ;
INFO  18:55:51,319 - #5 }
INFO  18:55:51,319 - #41 void
INFO  18:55:51,319 - #49 main
INFO  18:55:51,319 - #20 (
INFO  18:55:51,319 - #21 )
INFO  18:55:51,320 - #49 int
INFO  18:55:51,320 - #49 p1
INFO  18:55:51,320 - #9 ,
INFO  18:55:51,320 - #49 i
INFO  18:55:51,320 - #8 ;
INFO  18:55:51,320 - #6 const
INFO  18:55:51,320 - #49 int
INFO  18:55:51,320 - #49 p2
INFO  18:55:51,320 - #7 =
INFO  18:55:51,320 - #48 5
INFO  18:55:51,320 - #8 ;
INFO  18:55:51,320 - #49 char
INFO  18:55:51,320 - #49 p
INFO  18:55:51,320 - #8 ;
INFO  18:55:51,320 - #4 {
INFO  18:55:51,321 - #49 i
INFO  18:55:51,321 - #7 =
INFO  18:55:51,321 - #48 0
INFO  18:55:51,321 - #8 ;
INFO  18:55:51,321 - #14 if
INFO  18:55:51,321 - #20 (
INFO  18:55:51,321 - #49 i
INFO  18:55:51,321 - #31 ==
INFO  18:55:51,321 - #48 3
INFO  18:55:51,321 - #21 )
INFO  18:55:51,321 - #22 print
INFO  18:55:51,321 - #20 (
INFO  18:55:51,322 - #49 i
INFO  18:55:51,322 - #21 )
INFO  18:55:51,322 - #8 ;
INFO  18:55:51,322 - #15 else
INFO  18:55:51,322 - #14 if
INFO  18:55:51,322 - #20 (
INFO  18:55:51,322 - #49 i
INFO  18:55:51,322 - #31 ==
INFO  18:55:51,322 - #48 2
INFO  18:55:51,322 - #21 )
INFO  18:55:51,322 - #49 i
INFO  18:55:51,323 - #24 ++
INFO  18:55:51,323 - #8 ;
INFO  18:55:51,323 - #15 else
INFO  18:55:51,323 - #49 i
INFO  18:55:51,323 - #7 =
INFO  18:55:51,323 - #49 i
INFO  18:55:51,323 - #37 +
INFO  18:55:51,323 - #48 1
INFO  18:55:51,323 - #8 ;
INFO  18:55:51,323 - #22 print
INFO  18:55:51,323 - #20 (
INFO  18:55:51,324 - #49 i
INFO  18:55:51,324 - #21 )
INFO  18:55:51,324 - #8 ;
INFO  18:55:51,324 - #14 if
INFO  18:55:51,324 - #20 (
INFO  18:55:51,324 - #49 provera
INFO  18:55:51,324 - #20 (
INFO  18:55:51,324 - #21 )
INFO  18:55:51,326 - #21 )
INFO  18:55:51,326 - #22 print
INFO  18:55:51,326 - #20 (
INFO  18:55:51,326 - #50 t
INFO  18:55:51,327 - #21 )
INFO  18:55:51,327 - #8 ;
INFO  18:55:51,327 - #49 niz1
INFO  18:55:51,327 - #7 =
INFO  18:55:51,327 - #29 new
INFO  18:55:51,327 - #49 char
INFO  18:55:51,327 - #10 [
INFO  18:55:51,327 - #48 3
INFO  18:55:51,327 - #11 ]
INFO  18:55:51,328 - #8 ;
INFO  18:55:51,328 - #49 niz1
INFO  18:55:51,328 - #10 [
INFO  18:55:51,328 - #48 0
INFO  18:55:51,328 - #11 ]
INFO  18:55:51,328 - #7 =
INFO  18:55:51,328 - #50 a
INFO  18:55:51,328 - #8 ;
INFO  18:55:51,328 - #49 niz1
INFO  18:55:51,328 - #10 [
INFO  18:55:51,329 - #48 1
INFO  18:55:51,329 - #11 ]
INFO  18:55:51,329 - #7 =
INFO  18:55:51,329 - #50 b
INFO  18:55:51,329 - #8 ;
INFO  18:55:51,329 - #49 niz1
INFO  18:55:51,329 - #10 [
INFO  18:55:51,329 - #48 2
INFO  18:55:51,329 - #11 ]
INFO  18:55:51,329 - #7 =
INFO  18:55:51,329 - #50 c
INFO  18:55:51,329 - #8 ;
INFO  18:55:51,329 - #49 p
INFO  18:55:51,329 - #7 =
INFO  18:55:51,330 - #49 dohvatPrviKarakter
INFO  18:55:51,330 - #20 (
INFO  18:55:51,330 - #49 niz1
INFO  18:55:51,330 - #21 )
INFO  18:55:51,330 - #8 ;
INFO  18:55:51,330 - #22 print
INFO  18:55:51,330 - #20 (
INFO  18:55:51,330 - #49 p
INFO  18:55:51,330 - #21 )
INFO  18:55:51,330 - #8 ;
INFO  18:55:51,330 - #5 }
INFO  18:55:51,330 - #5 }
INFO  18:55:51,349 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:55:51,352 - ===================================
INFO  18:55:51,352 - Pocetak programa test301.
INFO  18:55:51,353 - Deklarisana je konstanta a na liniji 3
INFO  18:55:51,353 - Deklarisana je promenljiva b na liniji 4
INFO  18:55:51,353 - Deklarisana je promenljiva c na liniji 4
INFO  18:55:51,353 - Deklarisana je konstanta t na liniji 5
INFO  18:55:51,353 - Deklarisana je konstanta f na liniji 5
INFO  18:55:51,353 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:55:51,353 - Deklarisana je promenljiva d na liniji 7
INFO  18:55:51,353 - Deklarisana je promenljiva e na liniji 7
INFO  18:55:51,354 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:55:51,354 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:55:51,354 - Deklarisana je promenljiva s na liniji 12
INFO  18:55:51,354 - Deklarisana je promenljiva i na liniji 12
INFO  18:55:51,354 - Deklarisana je promenljiva j na liniji 12
ERROR 18:55:51,354 - Greska, nepoklapanje tipa parametara pozvane funkcije na liniji 14
INFO  18:55:51,354 - Pronadjen poziv funkcije len na liniji 14
INFO  18:55:51,354 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:55:51,355 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:55:51,355 - Kreiran/promenjen element niza niz
INFO  18:55:51,355 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  18:55:51,355 - Dobra povratna vrednost funkcije na liniji 21
INFO  18:55:51,355 - Obradjuje se funkcija provera na liniji 24
INFO  18:55:51,355 - Deklarisana je promenljiva pom1 na liniji 25
INFO  18:55:51,356 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  18:55:51,356 - Dobra povratna vrednost funkcije na liniji 29
INFO  18:55:51,356 - Dobra povratna vrednost funkcije na liniji 30
INFO  18:55:51,356 - Obradjuje se funkcija main na liniji 33
INFO  18:55:51,356 - Deklarisana je promenljiva p1 na liniji 34
INFO  18:55:51,356 - Deklarisana je promenljiva i na liniji 34
INFO  18:55:51,356 - Deklarisana je konstanta p2 na liniji 35
INFO  18:55:51,356 - Deklarisana je promenljiva p na liniji 36
INFO  18:55:51,356 - Designator i expr su odgovarajuceg tipa na liniji 38
INFO  18:55:51,357 - Obradjena funkcija PRINT na liniji 39
INFO  18:55:51,357 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  18:55:51,357 - Obradjena funkcija PRINT na liniji 42
INFO  18:55:51,357 - Pronadjen poziv funkcije provera na liniji 44
INFO  18:55:51,357 - Obradjena funkcija PRINT na liniji 44
INFO  18:55:51,357 - Designator i expr su odgovarajuceg tipa na liniji 46
INFO  18:55:51,357 - Kreiran/promenjen element niza niz1
INFO  18:55:51,357 - Designator i expr su odgovarajuceg tipa na liniji 47
INFO  18:55:51,357 - Kreiran/promenjen element niza niz1
INFO  18:55:51,357 - Designator i expr su odgovarajuceg tipa na liniji 48
INFO  18:55:51,357 - Kreiran/promenjen element niza niz1
INFO  18:55:51,357 - Designator i expr su odgovarajuceg tipa na liniji 49
INFO  18:55:51,357 - Pronadjen poziv funkcije dohvatPrviKarakter na liniji 51
INFO  18:55:51,357 - Designator i expr su odgovarajuceg tipa na liniji 51
INFO  18:55:51,358 - Obradjena funkcija PRINT na liniji 52
INFO  18:55:51,358 - ===================================
ERROR 18:55:51,359 - Parsiranje NIJE uspesno zavrseno!
INFO  18:57:06,141 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:57:06,240 - #2 program
INFO  18:57:06,241 - #49 test301
INFO  18:57:06,241 - #6 const
INFO  18:57:06,244 - #49 int
INFO  18:57:06,244 - #49 a
INFO  18:57:06,246 - #7 =
INFO  18:57:06,246 - #48 5
INFO  18:57:06,246 - #8 ;
INFO  18:57:06,246 - #49 int
INFO  18:57:06,247 - #49 b
INFO  18:57:06,247 - #9 ,
INFO  18:57:06,249 - #49 c
INFO  18:57:06,249 - #8 ;
INFO  18:57:06,249 - #6 const
INFO  18:57:06,250 - #49 bool
INFO  18:57:06,250 - #49 t
INFO  18:57:06,250 - #7 =
INFO  18:57:06,250 - #51 true
INFO  18:57:06,250 - #9 ,
INFO  18:57:06,250 - #49 f
INFO  18:57:06,251 - #7 =
INFO  18:57:06,251 - #51 false
INFO  18:57:06,251 - #8 ;
INFO  18:57:06,252 - #49 char
INFO  18:57:06,252 - #49 niz1
INFO  18:57:06,252 - #10 [
INFO  18:57:06,252 - #11 ]
INFO  18:57:06,252 - #8 ;
INFO  18:57:06,254 - #49 int
INFO  18:57:06,254 - #49 d
INFO  18:57:06,254 - #9 ,
INFO  18:57:06,255 - #49 e
INFO  18:57:06,255 - #8 ;
INFO  18:57:06,255 - #4 {
INFO  18:57:06,255 - #49 char
INFO  18:57:06,257 - #49 dohvatPrviKarakter
INFO  18:57:06,257 - #20 (
INFO  18:57:06,257 - #49 char
INFO  18:57:06,257 - #49 niz
INFO  18:57:06,258 - #10 [
INFO  18:57:06,258 - #11 ]
INFO  18:57:06,258 - #21 )
INFO  18:57:06,258 - #49 char
INFO  18:57:06,259 - #49 s
INFO  18:57:06,259 - #8 ;
INFO  18:57:06,259 - #49 int
INFO  18:57:06,259 - #49 i
INFO  18:57:06,259 - #9 ,
INFO  18:57:06,259 - #49 j
INFO  18:57:06,259 - #8 ;
INFO  18:57:06,259 - #4 {
INFO  18:57:06,259 - #23 for
INFO  18:57:06,259 - #20 (
INFO  18:57:06,262 - #49 i
INFO  18:57:06,262 - #7 =
INFO  18:57:06,263 - #49 len
INFO  18:57:06,265 - #20 (
INFO  18:57:06,265 - #49 niz
INFO  18:57:06,265 - #21 )
INFO  18:57:06,268 - #9 ,
INFO  18:57:06,269 - #49 j
INFO  18:57:06,269 - #7 =
INFO  18:57:06,269 - #48 0
INFO  18:57:06,269 - #8 ;
INFO  18:57:06,270 - #49 i
INFO  18:57:06,272 - #33 >
INFO  18:57:06,272 - #48 0
INFO  18:57:06,274 - #8 ;
INFO  18:57:06,276 - #49 i
INFO  18:57:06,278 - #25 --
INFO  18:57:06,278 - #9 ,
INFO  18:57:06,279 - #49 j
INFO  18:57:06,279 - #24 ++
INFO  18:57:06,279 - #21 )
INFO  18:57:06,281 - #4 {
INFO  18:57:06,283 - #14 if
INFO  18:57:06,283 - #20 (
INFO  18:57:06,283 - #49 i
INFO  18:57:06,285 - #31 ==
INFO  18:57:06,285 - #48 1
INFO  18:57:06,287 - #26 &&
INFO  18:57:06,287 - #49 j
INFO  18:57:06,287 - #34 >=
INFO  18:57:06,288 - #48 0
INFO  18:57:06,289 - #27 ||
INFO  18:57:06,290 - #49 j
INFO  18:57:06,292 - #31 ==
INFO  18:57:06,294 - #48 0
INFO  18:57:06,294 - #21 )
INFO  18:57:06,297 - #4 {
INFO  18:57:06,299 - #49 s
INFO  18:57:06,300 - #7 =
INFO  18:57:06,300 - #49 niz
INFO  18:57:06,300 - #10 [
INFO  18:57:06,304 - #49 i
INFO  18:57:06,304 - #11 ]
INFO  18:57:06,305 - #8 ;
INFO  18:57:06,305 - #16 break
INFO  18:57:06,305 - #8 ;
INFO  18:57:06,306 - #5 }
INFO  18:57:06,308 - #5 }
INFO  18:57:06,309 - #18 return
INFO  18:57:06,309 - #49 s
INFO  18:57:06,309 - #8 ;
INFO  18:57:06,310 - #5 }
INFO  18:57:06,310 - #49 bool
INFO  18:57:06,312 - #49 provera
INFO  18:57:06,312 - #20 (
INFO  18:57:06,312 - #21 )
INFO  18:57:06,314 - #49 int
INFO  18:57:06,314 - #49 pom1
INFO  18:57:06,314 - #8 ;
INFO  18:57:06,315 - #4 {
INFO  18:57:06,315 - #49 pom1
INFO  18:57:06,315 - #7 =
INFO  18:57:06,315 - #28 -
INFO  18:57:06,315 - #20 (
INFO  18:57:06,316 - #48 5
INFO  18:57:06,316 - #38 *
INFO  18:57:06,316 - #48 2
INFO  18:57:06,320 - #21 )
INFO  18:57:06,321 - #37 +
INFO  18:57:06,321 - #48 11
INFO  18:57:06,324 - #8 ;
INFO  18:57:06,325 - #14 if
INFO  18:57:06,325 - #20 (
INFO  18:57:06,325 - #49 pom1
INFO  18:57:06,325 - #33 >
INFO  18:57:06,325 - #48 0
INFO  18:57:06,325 - #21 )
INFO  18:57:06,326 - #18 return
INFO  18:57:06,326 - #51 true
INFO  18:57:06,326 - #8 ;
INFO  18:57:06,326 - #15 else
INFO  18:57:06,327 - #18 return
INFO  18:57:06,328 - #51 false
INFO  18:57:06,329 - #8 ;
INFO  18:57:06,329 - #5 }
INFO  18:57:06,329 - #41 void
INFO  18:57:06,329 - #49 main
INFO  18:57:06,329 - #20 (
INFO  18:57:06,329 - #21 )
INFO  18:57:06,330 - #49 int
INFO  18:57:06,330 - #49 p1
INFO  18:57:06,330 - #9 ,
INFO  18:57:06,330 - #49 i
INFO  18:57:06,330 - #8 ;
INFO  18:57:06,330 - #6 const
INFO  18:57:06,330 - #49 int
INFO  18:57:06,331 - #49 p2
INFO  18:57:06,331 - #7 =
INFO  18:57:06,331 - #48 5
INFO  18:57:06,331 - #8 ;
INFO  18:57:06,331 - #49 char
INFO  18:57:06,331 - #49 p
INFO  18:57:06,332 - #8 ;
INFO  18:57:06,332 - #4 {
INFO  18:57:06,332 - #49 i
INFO  18:57:06,332 - #7 =
INFO  18:57:06,332 - #48 0
INFO  18:57:06,332 - #8 ;
INFO  18:57:06,332 - #14 if
INFO  18:57:06,333 - #20 (
INFO  18:57:06,333 - #49 i
INFO  18:57:06,333 - #31 ==
INFO  18:57:06,333 - #48 3
INFO  18:57:06,334 - #21 )
INFO  18:57:06,334 - #22 print
INFO  18:57:06,334 - #20 (
INFO  18:57:06,334 - #49 i
INFO  18:57:06,334 - #21 )
INFO  18:57:06,335 - #8 ;
INFO  18:57:06,335 - #15 else
INFO  18:57:06,336 - #14 if
INFO  18:57:06,337 - #20 (
INFO  18:57:06,337 - #49 i
INFO  18:57:06,337 - #31 ==
INFO  18:57:06,337 - #48 2
INFO  18:57:06,338 - #21 )
INFO  18:57:06,338 - #49 i
INFO  18:57:06,339 - #24 ++
INFO  18:57:06,339 - #8 ;
INFO  18:57:06,339 - #15 else
INFO  18:57:06,339 - #49 i
INFO  18:57:06,339 - #7 =
INFO  18:57:06,340 - #49 i
INFO  18:57:06,340 - #37 +
INFO  18:57:06,340 - #48 1
INFO  18:57:06,340 - #8 ;
INFO  18:57:06,340 - #22 print
INFO  18:57:06,340 - #20 (
INFO  18:57:06,341 - #49 i
INFO  18:57:06,341 - #21 )
INFO  18:57:06,341 - #8 ;
INFO  18:57:06,341 - #14 if
INFO  18:57:06,341 - #20 (
INFO  18:57:06,341 - #49 provera
INFO  18:57:06,341 - #20 (
INFO  18:57:06,341 - #21 )
INFO  18:57:06,343 - #21 )
INFO  18:57:06,344 - #22 print
INFO  18:57:06,344 - #20 (
INFO  18:57:06,345 - #50 t
INFO  18:57:06,345 - #21 )
INFO  18:57:06,345 - #8 ;
INFO  18:57:06,345 - #49 niz1
INFO  18:57:06,345 - #7 =
INFO  18:57:06,345 - #29 new
INFO  18:57:06,346 - #49 char
INFO  18:57:06,346 - #10 [
INFO  18:57:06,346 - #48 3
INFO  18:57:06,346 - #11 ]
INFO  18:57:06,346 - #8 ;
INFO  18:57:06,346 - #49 niz1
INFO  18:57:06,346 - #10 [
INFO  18:57:06,347 - #48 0
INFO  18:57:06,347 - #11 ]
INFO  18:57:06,347 - #7 =
INFO  18:57:06,347 - #50 a
INFO  18:57:06,347 - #8 ;
INFO  18:57:06,347 - #49 niz1
INFO  18:57:06,347 - #10 [
INFO  18:57:06,347 - #48 1
INFO  18:57:06,347 - #11 ]
INFO  18:57:06,347 - #7 =
INFO  18:57:06,348 - #50 b
INFO  18:57:06,348 - #8 ;
INFO  18:57:06,348 - #49 niz1
INFO  18:57:06,348 - #10 [
INFO  18:57:06,348 - #48 2
INFO  18:57:06,348 - #11 ]
INFO  18:57:06,348 - #7 =
INFO  18:57:06,348 - #50 c
INFO  18:57:06,348 - #8 ;
INFO  18:57:06,348 - #49 p
INFO  18:57:06,349 - #7 =
INFO  18:57:06,349 - #49 dohvatPrviKarakter
INFO  18:57:06,349 - #20 (
INFO  18:57:06,349 - #49 niz1
INFO  18:57:06,349 - #21 )
INFO  18:57:06,349 - #8 ;
INFO  18:57:06,349 - #22 print
INFO  18:57:06,349 - #20 (
INFO  18:57:06,349 - #49 p
INFO  18:57:06,349 - #21 )
INFO  18:57:06,349 - #8 ;
INFO  18:57:06,349 - #5 }
INFO  18:57:06,350 - #5 }
INFO  18:57:06,391 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:57:06,396 - ===================================
INFO  18:57:06,399 - Pocetak programa test301.
INFO  18:57:06,400 - Deklarisana je konstanta a na liniji 3
INFO  18:57:06,404 - Deklarisana je promenljiva b na liniji 4
INFO  18:57:06,404 - Deklarisana je promenljiva c na liniji 4
INFO  18:57:06,405 - Deklarisana je konstanta t na liniji 5
INFO  18:57:06,405 - Deklarisana je konstanta f na liniji 5
INFO  18:57:06,406 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:57:06,406 - Deklarisana je promenljiva d na liniji 7
INFO  18:57:06,406 - Deklarisana je promenljiva e na liniji 7
INFO  18:57:06,406 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:57:06,406 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:57:06,407 - Deklarisana je promenljiva s na liniji 12
INFO  18:57:06,408 - Deklarisana je promenljiva i na liniji 12
INFO  18:57:06,408 - Deklarisana je promenljiva j na liniji 12
INFO  18:59:21,049 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:59:21,120 - #2 program
INFO  18:59:21,120 - #49 test301
INFO  18:59:21,120 - #6 const
INFO  18:59:21,121 - #49 int
INFO  18:59:21,121 - #49 a
INFO  18:59:21,122 - #7 =
INFO  18:59:21,122 - #48 5
INFO  18:59:21,122 - #8 ;
INFO  18:59:21,122 - #49 int
INFO  18:59:21,122 - #49 b
INFO  18:59:21,123 - #9 ,
INFO  18:59:21,123 - #49 c
INFO  18:59:21,123 - #8 ;
INFO  18:59:21,124 - #6 const
INFO  18:59:21,124 - #49 bool
INFO  18:59:21,124 - #49 t
INFO  18:59:21,124 - #7 =
INFO  18:59:21,124 - #51 true
INFO  18:59:21,124 - #9 ,
INFO  18:59:21,125 - #49 f
INFO  18:59:21,125 - #7 =
INFO  18:59:21,125 - #51 false
INFO  18:59:21,125 - #8 ;
INFO  18:59:21,125 - #49 char
INFO  18:59:21,125 - #49 niz1
INFO  18:59:21,125 - #10 [
INFO  18:59:21,125 - #11 ]
INFO  18:59:21,126 - #8 ;
INFO  18:59:21,127 - #49 int
INFO  18:59:21,127 - #49 d
INFO  18:59:21,127 - #9 ,
INFO  18:59:21,127 - #49 e
INFO  18:59:21,127 - #8 ;
INFO  18:59:21,127 - #4 {
INFO  18:59:21,127 - #49 char
INFO  18:59:21,128 - #49 dohvatPrviKarakter
INFO  18:59:21,128 - #20 (
INFO  18:59:21,128 - #49 char
INFO  18:59:21,128 - #49 niz
INFO  18:59:21,128 - #10 [
INFO  18:59:21,128 - #11 ]
INFO  18:59:21,128 - #21 )
INFO  18:59:21,129 - #49 char
INFO  18:59:21,129 - #49 s
INFO  18:59:21,129 - #8 ;
INFO  18:59:21,129 - #49 int
INFO  18:59:21,129 - #49 i
INFO  18:59:21,129 - #9 ,
INFO  18:59:21,130 - #49 j
INFO  18:59:21,130 - #8 ;
INFO  18:59:21,130 - #4 {
INFO  18:59:21,130 - #23 for
INFO  18:59:21,130 - #20 (
INFO  18:59:21,131 - #49 i
INFO  18:59:21,131 - #7 =
INFO  18:59:21,131 - #49 len
INFO  18:59:21,132 - #20 (
INFO  18:59:21,132 - #49 niz
INFO  18:59:21,132 - #21 )
INFO  18:59:21,133 - #9 ,
INFO  18:59:21,133 - #49 j
INFO  18:59:21,133 - #7 =
INFO  18:59:21,133 - #48 0
INFO  18:59:21,134 - #8 ;
INFO  18:59:21,134 - #49 i
INFO  18:59:21,135 - #33 >
INFO  18:59:21,135 - #48 0
INFO  18:59:21,136 - #8 ;
INFO  18:59:21,137 - #49 i
INFO  18:59:21,138 - #25 --
INFO  18:59:21,138 - #9 ,
INFO  18:59:21,138 - #49 j
INFO  18:59:21,138 - #24 ++
INFO  18:59:21,138 - #21 )
INFO  18:59:21,139 - #4 {
INFO  18:59:21,140 - #14 if
INFO  18:59:21,140 - #20 (
INFO  18:59:21,140 - #49 i
INFO  18:59:21,140 - #31 ==
INFO  18:59:21,141 - #48 1
INFO  18:59:21,141 - #26 &&
INFO  18:59:21,141 - #49 j
INFO  18:59:21,141 - #34 >=
INFO  18:59:21,142 - #48 0
INFO  18:59:21,142 - #27 ||
INFO  18:59:21,142 - #49 j
INFO  18:59:21,143 - #31 ==
INFO  18:59:21,143 - #48 0
INFO  18:59:21,143 - #21 )
INFO  18:59:21,143 - #4 {
INFO  18:59:21,144 - #49 s
INFO  18:59:21,144 - #7 =
INFO  18:59:21,144 - #49 niz
INFO  18:59:21,144 - #10 [
INFO  18:59:21,145 - #49 i
INFO  18:59:21,145 - #11 ]
INFO  18:59:21,146 - #8 ;
INFO  18:59:21,146 - #16 break
INFO  18:59:21,146 - #8 ;
INFO  18:59:21,146 - #5 }
INFO  18:59:21,148 - #5 }
INFO  18:59:21,148 - #18 return
INFO  18:59:21,148 - #49 s
INFO  18:59:21,148 - #8 ;
INFO  18:59:21,148 - #5 }
INFO  18:59:21,149 - #49 bool
INFO  18:59:21,150 - #49 provera
INFO  18:59:21,150 - #20 (
INFO  18:59:21,150 - #21 )
INFO  18:59:21,151 - #49 int
INFO  18:59:21,151 - #49 pom1
INFO  18:59:21,151 - #8 ;
INFO  18:59:21,151 - #4 {
INFO  18:59:21,151 - #49 pom1
INFO  18:59:21,151 - #7 =
INFO  18:59:21,151 - #28 -
INFO  18:59:21,151 - #20 (
INFO  18:59:21,151 - #48 5
INFO  18:59:21,152 - #38 *
INFO  18:59:21,152 - #48 2
INFO  18:59:21,153 - #21 )
INFO  18:59:21,153 - #37 +
INFO  18:59:21,154 - #48 11
INFO  18:59:21,155 - #8 ;
INFO  18:59:21,155 - #14 if
INFO  18:59:21,155 - #20 (
INFO  18:59:21,155 - #49 pom1
INFO  18:59:21,155 - #33 >
INFO  18:59:21,155 - #48 0
INFO  18:59:21,155 - #21 )
INFO  18:59:21,156 - #18 return
INFO  18:59:21,156 - #51 true
INFO  18:59:21,156 - #8 ;
INFO  18:59:21,156 - #15 else
INFO  18:59:21,156 - #18 return
INFO  18:59:21,157 - #51 false
INFO  18:59:21,157 - #8 ;
INFO  18:59:21,157 - #5 }
INFO  18:59:21,157 - #41 void
INFO  18:59:21,157 - #49 main
INFO  18:59:21,158 - #20 (
INFO  18:59:21,158 - #21 )
INFO  18:59:21,158 - #49 int
INFO  18:59:21,158 - #49 p1
INFO  18:59:21,158 - #9 ,
INFO  18:59:21,158 - #49 i
INFO  18:59:21,158 - #8 ;
INFO  18:59:21,158 - #6 const
INFO  18:59:21,158 - #49 int
INFO  18:59:21,158 - #49 p2
INFO  18:59:21,158 - #7 =
INFO  18:59:21,158 - #48 5
INFO  18:59:21,158 - #8 ;
INFO  18:59:21,158 - #49 char
INFO  18:59:21,158 - #49 p
INFO  18:59:21,158 - #8 ;
INFO  18:59:21,158 - #4 {
INFO  18:59:21,158 - #49 i
INFO  18:59:21,158 - #7 =
INFO  18:59:21,159 - #48 0
INFO  18:59:21,159 - #8 ;
INFO  18:59:21,159 - #14 if
INFO  18:59:21,159 - #20 (
INFO  18:59:21,159 - #49 i
INFO  18:59:21,159 - #31 ==
INFO  18:59:21,159 - #48 3
INFO  18:59:21,159 - #21 )
INFO  18:59:21,159 - #22 print
INFO  18:59:21,159 - #20 (
INFO  18:59:21,159 - #49 i
INFO  18:59:21,159 - #21 )
INFO  18:59:21,159 - #8 ;
INFO  18:59:21,159 - #15 else
INFO  18:59:21,159 - #14 if
INFO  18:59:21,159 - #20 (
INFO  18:59:21,160 - #49 i
INFO  18:59:21,160 - #31 ==
INFO  18:59:21,160 - #48 2
INFO  18:59:21,160 - #21 )
INFO  18:59:21,160 - #49 i
INFO  18:59:21,160 - #24 ++
INFO  18:59:21,160 - #8 ;
INFO  18:59:21,160 - #15 else
INFO  18:59:21,160 - #49 i
INFO  18:59:21,160 - #7 =
INFO  18:59:21,160 - #49 i
INFO  18:59:21,160 - #37 +
INFO  18:59:21,160 - #48 1
INFO  18:59:21,160 - #8 ;
INFO  18:59:21,160 - #22 print
INFO  18:59:21,160 - #20 (
INFO  18:59:21,160 - #49 i
INFO  18:59:21,161 - #21 )
INFO  18:59:21,161 - #8 ;
INFO  18:59:21,161 - #14 if
INFO  18:59:21,161 - #20 (
INFO  18:59:21,161 - #49 provera
INFO  18:59:21,161 - #20 (
INFO  18:59:21,161 - #21 )
INFO  18:59:21,161 - #21 )
INFO  18:59:21,162 - #22 print
INFO  18:59:21,162 - #20 (
INFO  18:59:21,162 - #50 t
INFO  18:59:21,162 - #21 )
INFO  18:59:21,162 - #8 ;
INFO  18:59:21,162 - #49 niz1
INFO  18:59:21,162 - #7 =
INFO  18:59:21,162 - #29 new
INFO  18:59:21,162 - #49 char
INFO  18:59:21,162 - #10 [
INFO  18:59:21,162 - #48 3
INFO  18:59:21,162 - #11 ]
INFO  18:59:21,162 - #8 ;
INFO  18:59:21,162 - #49 niz1
INFO  18:59:21,162 - #10 [
INFO  18:59:21,163 - #48 0
INFO  18:59:21,163 - #11 ]
INFO  18:59:21,163 - #7 =
INFO  18:59:21,163 - #50 a
INFO  18:59:21,163 - #8 ;
INFO  18:59:21,163 - #49 niz1
INFO  18:59:21,163 - #10 [
INFO  18:59:21,163 - #48 1
INFO  18:59:21,163 - #11 ]
INFO  18:59:21,163 - #7 =
INFO  18:59:21,163 - #50 b
INFO  18:59:21,163 - #8 ;
INFO  18:59:21,163 - #49 niz1
INFO  18:59:21,163 - #10 [
INFO  18:59:21,163 - #48 2
INFO  18:59:21,163 - #11 ]
INFO  18:59:21,163 - #7 =
INFO  18:59:21,163 - #50 c
INFO  18:59:21,163 - #8 ;
INFO  18:59:21,163 - #49 p
INFO  18:59:21,163 - #7 =
INFO  18:59:21,163 - #49 dohvatPrviKarakter
INFO  18:59:21,163 - #20 (
INFO  18:59:21,164 - #49 niz1
INFO  18:59:21,164 - #21 )
INFO  18:59:21,164 - #8 ;
INFO  18:59:21,164 - #22 print
INFO  18:59:21,164 - #20 (
INFO  18:59:21,164 - #49 p
INFO  18:59:21,164 - #21 )
INFO  18:59:21,164 - #8 ;
INFO  18:59:21,164 - #5 }
INFO  18:59:21,164 - #5 }
INFO  18:59:21,176 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:59:21,178 - ===================================
INFO  18:59:21,178 - Pocetak programa test301.
INFO  18:59:21,178 - Deklarisana je konstanta a na liniji 3
INFO  18:59:21,178 - Deklarisana je promenljiva b na liniji 4
INFO  18:59:21,178 - Deklarisana je promenljiva c na liniji 4
INFO  18:59:21,179 - Deklarisana je konstanta t na liniji 5
INFO  18:59:21,179 - Deklarisana je konstanta f na liniji 5
INFO  18:59:21,179 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:59:21,179 - Deklarisana je promenljiva d na liniji 7
INFO  18:59:21,179 - Deklarisana je promenljiva e na liniji 7
INFO  18:59:21,179 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:59:21,179 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:59:21,179 - Deklarisana je promenljiva s na liniji 12
INFO  18:59:21,179 - Deklarisana je promenljiva i na liniji 12
INFO  18:59:21,179 - Deklarisana je promenljiva j na liniji 12
ERROR 18:59:21,179 - Greska, nepoklapanje tipa parametara pozvane funkcije na liniji 14
INFO  18:59:21,179 - Pronadjen poziv funkcije len na liniji 14
INFO  18:59:21,179 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:59:21,180 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:59:21,180 - Kreiran/promenjen element niza niz
INFO  18:59:21,180 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  18:59:21,180 - Dobra povratna vrednost funkcije na liniji 21
INFO  18:59:21,180 - Obradjuje se funkcija provera na liniji 24
INFO  18:59:21,180 - Deklarisana je promenljiva pom1 na liniji 25
INFO  18:59:21,180 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  18:59:21,180 - Dobra povratna vrednost funkcije na liniji 29
INFO  18:59:21,180 - Dobra povratna vrednost funkcije na liniji 30
INFO  18:59:21,180 - Obradjuje se funkcija main na liniji 33
INFO  18:59:21,180 - Deklarisana je promenljiva p1 na liniji 34
INFO  18:59:21,180 - Deklarisana je promenljiva i na liniji 34
INFO  18:59:21,180 - Deklarisana je konstanta p2 na liniji 35
INFO  18:59:21,180 - Deklarisana je promenljiva p na liniji 36
INFO  18:59:21,181 - Designator i expr su odgovarajuceg tipa na liniji 38
INFO  18:59:21,181 - Obradjena funkcija PRINT na liniji 39
INFO  18:59:21,181 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  18:59:21,181 - Obradjena funkcija PRINT na liniji 42
INFO  18:59:21,181 - Pronadjen poziv funkcije provera na liniji 44
INFO  18:59:21,181 - Obradjena funkcija PRINT na liniji 44
INFO  18:59:21,181 - Designator i expr su odgovarajuceg tipa na liniji 46
INFO  18:59:21,181 - Kreiran/promenjen element niza niz1
INFO  18:59:21,181 - Designator i expr su odgovarajuceg tipa na liniji 47
INFO  18:59:21,181 - Kreiran/promenjen element niza niz1
INFO  18:59:21,181 - Designator i expr su odgovarajuceg tipa na liniji 48
INFO  18:59:21,181 - Kreiran/promenjen element niza niz1
INFO  18:59:21,181 - Designator i expr su odgovarajuceg tipa na liniji 49
INFO  18:59:21,181 - Pronadjen poziv funkcije dohvatPrviKarakter na liniji 51
INFO  18:59:21,181 - Designator i expr su odgovarajuceg tipa na liniji 51
INFO  18:59:21,181 - Obradjena funkcija PRINT na liniji 52
INFO  18:59:21,181 - ===================================
ERROR 18:59:21,182 - Parsiranje NIJE uspesno zavrseno!
INFO  18:59:44,785 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:59:44,846 - #2 program
INFO  18:59:44,846 - #49 test301
INFO  18:59:44,846 - #6 const
INFO  18:59:44,847 - #49 int
INFO  18:59:44,848 - #49 a
INFO  18:59:44,848 - #7 =
INFO  18:59:44,848 - #48 5
INFO  18:59:44,848 - #8 ;
INFO  18:59:44,849 - #49 int
INFO  18:59:44,849 - #49 b
INFO  18:59:44,849 - #9 ,
INFO  18:59:44,850 - #49 c
INFO  18:59:44,851 - #8 ;
INFO  18:59:44,851 - #6 const
INFO  18:59:44,851 - #49 bool
INFO  18:59:44,852 - #49 t
INFO  18:59:44,852 - #7 =
INFO  18:59:44,852 - #51 true
INFO  18:59:44,852 - #9 ,
INFO  18:59:44,852 - #49 f
INFO  18:59:44,852 - #7 =
INFO  18:59:44,853 - #51 false
INFO  18:59:44,853 - #8 ;
INFO  18:59:44,853 - #49 char
INFO  18:59:44,853 - #49 niz1
INFO  18:59:44,853 - #10 [
INFO  18:59:44,853 - #11 ]
INFO  18:59:44,853 - #8 ;
INFO  18:59:44,854 - #49 int
INFO  18:59:44,855 - #49 d
INFO  18:59:44,855 - #9 ,
INFO  18:59:44,855 - #49 e
INFO  18:59:44,855 - #8 ;
INFO  18:59:44,855 - #4 {
INFO  18:59:44,855 - #49 char
INFO  18:59:44,856 - #49 dohvatPrviKarakter
INFO  18:59:44,856 - #20 (
INFO  18:59:44,857 - #49 char
INFO  18:59:44,857 - #49 niz
INFO  18:59:44,857 - #10 [
INFO  18:59:44,857 - #11 ]
INFO  18:59:44,857 - #21 )
INFO  18:59:44,857 - #49 char
INFO  18:59:44,858 - #49 s
INFO  18:59:44,858 - #8 ;
INFO  18:59:44,858 - #49 int
INFO  18:59:44,858 - #49 i
INFO  18:59:44,858 - #9 ,
INFO  18:59:44,858 - #49 j
INFO  18:59:44,858 - #8 ;
INFO  18:59:44,858 - #4 {
INFO  18:59:44,858 - #23 for
INFO  18:59:44,858 - #20 (
INFO  18:59:44,860 - #49 i
INFO  18:59:44,860 - #7 =
INFO  18:59:44,860 - #49 len
INFO  18:59:44,861 - #20 (
INFO  18:59:44,861 - #49 niz
INFO  18:59:44,861 - #21 )
INFO  18:59:44,862 - #9 ,
INFO  18:59:44,862 - #49 j
INFO  18:59:44,862 - #7 =
INFO  18:59:44,863 - #48 0
INFO  18:59:44,863 - #8 ;
INFO  18:59:44,864 - #49 i
INFO  18:59:44,865 - #33 >
INFO  18:59:44,865 - #48 0
INFO  18:59:44,867 - #8 ;
INFO  18:59:44,868 - #49 i
INFO  18:59:44,869 - #25 --
INFO  18:59:44,869 - #9 ,
INFO  18:59:44,869 - #49 j
INFO  18:59:44,869 - #24 ++
INFO  18:59:44,869 - #21 )
INFO  18:59:44,871 - #4 {
INFO  18:59:44,872 - #14 if
INFO  18:59:44,872 - #20 (
INFO  18:59:44,872 - #49 i
INFO  18:59:44,873 - #31 ==
INFO  18:59:44,873 - #48 1
INFO  18:59:44,874 - #26 &&
INFO  18:59:44,874 - #49 j
INFO  18:59:44,874 - #34 >=
INFO  18:59:44,874 - #48 0
INFO  18:59:44,875 - #27 ||
INFO  18:59:44,875 - #49 j
INFO  18:59:44,876 - #31 ==
INFO  18:59:44,876 - #48 0
INFO  18:59:44,876 - #21 )
INFO  18:59:44,877 - #4 {
INFO  18:59:44,878 - #49 s
INFO  18:59:44,878 - #7 =
INFO  18:59:44,878 - #49 niz
INFO  18:59:44,878 - #10 [
INFO  18:59:44,879 - #49 i
INFO  18:59:44,879 - #11 ]
INFO  18:59:44,879 - #8 ;
INFO  18:59:44,879 - #16 break
INFO  18:59:44,880 - #8 ;
INFO  18:59:44,880 - #5 }
INFO  18:59:44,881 - #5 }
INFO  18:59:44,882 - #18 return
INFO  18:59:44,882 - #49 s
INFO  18:59:44,882 - #8 ;
INFO  18:59:44,882 - #5 }
INFO  18:59:44,882 - #49 bool
INFO  18:59:44,883 - #49 provera
INFO  18:59:44,883 - #20 (
INFO  18:59:44,884 - #21 )
INFO  18:59:44,884 - #49 int
INFO  18:59:44,885 - #49 pom1
INFO  18:59:44,885 - #8 ;
INFO  18:59:44,885 - #4 {
INFO  18:59:44,885 - #49 pom1
INFO  18:59:44,885 - #7 =
INFO  18:59:44,885 - #28 -
INFO  18:59:44,885 - #20 (
INFO  18:59:44,885 - #48 5
INFO  18:59:44,885 - #38 *
INFO  18:59:44,885 - #48 2
INFO  18:59:44,887 - #21 )
INFO  18:59:44,887 - #37 +
INFO  18:59:44,887 - #48 11
INFO  18:59:44,888 - #8 ;
INFO  18:59:44,888 - #14 if
INFO  18:59:44,889 - #20 (
INFO  18:59:44,889 - #49 pom1
INFO  18:59:44,889 - #33 >
INFO  18:59:44,889 - #48 0
INFO  18:59:44,889 - #21 )
INFO  18:59:44,889 - #18 return
INFO  18:59:44,889 - #51 true
INFO  18:59:44,889 - #8 ;
INFO  18:59:44,889 - #15 else
INFO  18:59:44,889 - #18 return
INFO  18:59:44,890 - #51 false
INFO  18:59:44,890 - #8 ;
INFO  18:59:44,890 - #5 }
INFO  18:59:44,890 - #41 void
INFO  18:59:44,890 - #49 main
INFO  18:59:44,890 - #20 (
INFO  18:59:44,890 - #21 )
INFO  18:59:44,890 - #49 int
INFO  18:59:44,891 - #49 p1
INFO  18:59:44,891 - #9 ,
INFO  18:59:44,891 - #49 i
INFO  18:59:44,891 - #8 ;
INFO  18:59:44,891 - #6 const
INFO  18:59:44,891 - #49 int
INFO  18:59:44,891 - #49 p2
INFO  18:59:44,891 - #7 =
INFO  18:59:44,891 - #48 5
INFO  18:59:44,891 - #8 ;
INFO  18:59:44,891 - #49 char
INFO  18:59:44,891 - #49 p
INFO  18:59:44,891 - #8 ;
INFO  18:59:44,891 - #4 {
INFO  18:59:44,891 - #49 i
INFO  18:59:44,891 - #7 =
INFO  18:59:44,892 - #48 0
INFO  18:59:44,892 - #8 ;
INFO  18:59:44,892 - #14 if
INFO  18:59:44,892 - #20 (
INFO  18:59:44,892 - #49 i
INFO  18:59:44,892 - #31 ==
INFO  18:59:44,892 - #48 3
INFO  18:59:44,892 - #21 )
INFO  18:59:44,892 - #22 print
INFO  18:59:44,892 - #20 (
INFO  18:59:44,892 - #49 i
INFO  18:59:44,892 - #21 )
INFO  18:59:44,892 - #8 ;
INFO  18:59:44,892 - #15 else
INFO  18:59:44,893 - #14 if
INFO  18:59:44,893 - #20 (
INFO  18:59:44,893 - #49 i
INFO  18:59:44,893 - #31 ==
INFO  18:59:44,893 - #48 2
INFO  18:59:44,893 - #21 )
INFO  18:59:44,893 - #49 i
INFO  18:59:44,893 - #24 ++
INFO  18:59:44,893 - #8 ;
INFO  18:59:44,893 - #15 else
INFO  18:59:44,893 - #49 i
INFO  18:59:44,893 - #7 =
INFO  18:59:44,893 - #49 i
INFO  18:59:44,893 - #37 +
INFO  18:59:44,893 - #48 1
INFO  18:59:44,893 - #8 ;
INFO  18:59:44,894 - #22 print
INFO  18:59:44,894 - #20 (
INFO  18:59:44,894 - #49 i
INFO  18:59:44,894 - #21 )
INFO  18:59:44,894 - #8 ;
INFO  18:59:44,894 - #14 if
INFO  18:59:44,894 - #20 (
INFO  18:59:44,894 - #49 provera
INFO  18:59:44,894 - #20 (
INFO  18:59:44,894 - #21 )
INFO  18:59:44,895 - #21 )
INFO  18:59:44,895 - #22 print
INFO  18:59:44,895 - #20 (
INFO  18:59:44,895 - #50 t
INFO  18:59:44,895 - #21 )
INFO  18:59:44,896 - #8 ;
INFO  18:59:44,896 - #49 niz1
INFO  18:59:44,896 - #7 =
INFO  18:59:44,896 - #29 new
INFO  18:59:44,896 - #49 char
INFO  18:59:44,896 - #10 [
INFO  18:59:44,896 - #48 3
INFO  18:59:44,896 - #11 ]
INFO  18:59:44,896 - #8 ;
INFO  18:59:44,896 - #49 niz1
INFO  18:59:44,896 - #10 [
INFO  18:59:44,896 - #48 0
INFO  18:59:44,897 - #11 ]
INFO  18:59:44,897 - #7 =
INFO  18:59:44,897 - #50 a
INFO  18:59:44,897 - #8 ;
INFO  18:59:44,897 - #49 niz1
INFO  18:59:44,897 - #10 [
INFO  18:59:44,897 - #48 1
INFO  18:59:44,897 - #11 ]
INFO  18:59:44,897 - #7 =
INFO  18:59:44,897 - #50 b
INFO  18:59:44,897 - #8 ;
INFO  18:59:44,897 - #49 niz1
INFO  18:59:44,897 - #10 [
INFO  18:59:44,897 - #48 2
INFO  18:59:44,897 - #11 ]
INFO  18:59:44,897 - #7 =
INFO  18:59:44,897 - #50 c
INFO  18:59:44,897 - #8 ;
INFO  18:59:44,897 - #49 p
INFO  18:59:44,897 - #7 =
INFO  18:59:44,898 - #49 dohvatPrviKarakter
INFO  18:59:44,898 - #20 (
INFO  18:59:44,898 - #49 niz1
INFO  18:59:44,898 - #21 )
INFO  18:59:44,898 - #8 ;
INFO  18:59:44,898 - #22 print
INFO  18:59:44,898 - #20 (
INFO  18:59:44,898 - #49 p
INFO  18:59:44,898 - #21 )
INFO  18:59:44,898 - #8 ;
INFO  18:59:44,898 - #5 }
INFO  18:59:44,898 - #5 }
INFO  18:59:44,910 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:59:44,912 - ===================================
INFO  18:59:44,912 - Pocetak programa test301.
INFO  18:59:44,912 - Deklarisana je konstanta a na liniji 3
INFO  18:59:44,913 - Deklarisana je promenljiva b na liniji 4
INFO  18:59:44,913 - Deklarisana je promenljiva c na liniji 4
INFO  18:59:44,913 - Deklarisana je konstanta t na liniji 5
INFO  18:59:44,913 - Deklarisana je konstanta f na liniji 5
INFO  18:59:44,913 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:59:44,913 - Deklarisana je promenljiva d na liniji 7
INFO  18:59:44,914 - Deklarisana je promenljiva e na liniji 7
INFO  18:59:44,914 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:59:44,914 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:59:44,914 - Deklarisana je promenljiva s na liniji 12
INFO  18:59:44,914 - Deklarisana je promenljiva i na liniji 12
INFO  18:59:44,914 - Deklarisana je promenljiva j na liniji 12
ERROR 18:59:44,914 - Greska, nepoklapanje tipa parametara pozvane funkcije na liniji 14
INFO  18:59:44,915 - Pronadjen poziv funkcije len na liniji 14
INFO  18:59:44,915 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:59:44,915 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  18:59:44,915 - Kreiran/promenjen element niza niz
INFO  18:59:44,915 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  18:59:44,915 - Dobra povratna vrednost funkcije na liniji 21
INFO  18:59:44,916 - Obradjuje se funkcija provera na liniji 24
INFO  18:59:44,916 - Deklarisana je promenljiva pom1 na liniji 25
INFO  18:59:44,916 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  18:59:44,916 - Dobra povratna vrednost funkcije na liniji 29
INFO  18:59:44,916 - Dobra povratna vrednost funkcije na liniji 30
INFO  18:59:44,916 - Obradjuje se funkcija main na liniji 33
INFO  18:59:44,916 - Deklarisana je promenljiva p1 na liniji 34
INFO  18:59:44,916 - Deklarisana je promenljiva i na liniji 34
INFO  18:59:44,916 - Deklarisana je konstanta p2 na liniji 35
INFO  18:59:44,916 - Deklarisana je promenljiva p na liniji 36
INFO  18:59:44,916 - Designator i expr su odgovarajuceg tipa na liniji 38
INFO  18:59:44,916 - Obradjena funkcija PRINT na liniji 39
INFO  18:59:44,916 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  18:59:44,917 - Obradjena funkcija PRINT na liniji 42
INFO  18:59:44,917 - Pronadjen poziv funkcije provera na liniji 44
INFO  18:59:44,917 - Obradjena funkcija PRINT na liniji 44
INFO  18:59:44,917 - Designator i expr su odgovarajuceg tipa na liniji 46
INFO  18:59:44,917 - Kreiran/promenjen element niza niz1
INFO  18:59:44,917 - Designator i expr su odgovarajuceg tipa na liniji 47
INFO  18:59:44,917 - Kreiran/promenjen element niza niz1
INFO  18:59:44,917 - Designator i expr su odgovarajuceg tipa na liniji 48
INFO  18:59:44,917 - Kreiran/promenjen element niza niz1
INFO  18:59:44,917 - Designator i expr su odgovarajuceg tipa na liniji 49
INFO  18:59:44,917 - Pronadjen poziv funkcije dohvatPrviKarakter na liniji 51
INFO  18:59:44,917 - Designator i expr su odgovarajuceg tipa na liniji 51
INFO  18:59:44,917 - Obradjena funkcija PRINT na liniji 52
INFO  18:59:44,917 - ===================================
ERROR 18:59:44,918 - Parsiranje NIJE uspesno zavrseno!
INFO  18:59:54,833 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  18:59:54,914 - #2 program
INFO  18:59:54,914 - #49 test301
INFO  18:59:54,914 - #6 const
INFO  18:59:54,916 - #49 int
INFO  18:59:54,916 - #49 a
INFO  18:59:54,917 - #7 =
INFO  18:59:54,917 - #48 5
INFO  18:59:54,917 - #8 ;
INFO  18:59:54,917 - #49 int
INFO  18:59:54,917 - #49 b
INFO  18:59:54,918 - #9 ,
INFO  18:59:54,919 - #49 c
INFO  18:59:54,919 - #8 ;
INFO  18:59:54,919 - #6 const
INFO  18:59:54,919 - #49 bool
INFO  18:59:54,919 - #49 t
INFO  18:59:54,919 - #7 =
INFO  18:59:54,919 - #51 true
INFO  18:59:54,920 - #9 ,
INFO  18:59:54,920 - #49 f
INFO  18:59:54,920 - #7 =
INFO  18:59:54,920 - #51 false
INFO  18:59:54,920 - #8 ;
INFO  18:59:54,920 - #49 char
INFO  18:59:54,920 - #49 niz1
INFO  18:59:54,920 - #10 [
INFO  18:59:54,920 - #11 ]
INFO  18:59:54,920 - #8 ;
INFO  18:59:54,921 - #49 int
INFO  18:59:54,921 - #49 d
INFO  18:59:54,921 - #9 ,
INFO  18:59:54,922 - #49 e
INFO  18:59:54,922 - #8 ;
INFO  18:59:54,922 - #4 {
INFO  18:59:54,922 - #49 char
INFO  18:59:54,923 - #49 dohvatPrviKarakter
INFO  18:59:54,923 - #20 (
INFO  18:59:54,923 - #49 char
INFO  18:59:54,923 - #49 niz
INFO  18:59:54,923 - #10 [
INFO  18:59:54,923 - #11 ]
INFO  18:59:54,923 - #21 )
INFO  18:59:54,924 - #49 char
INFO  18:59:54,924 - #49 s
INFO  18:59:54,924 - #8 ;
INFO  18:59:54,924 - #49 int
INFO  18:59:54,924 - #49 i
INFO  18:59:54,924 - #9 ,
INFO  18:59:54,925 - #49 j
INFO  18:59:54,925 - #8 ;
INFO  18:59:54,925 - #4 {
INFO  18:59:54,925 - #23 for
INFO  18:59:54,925 - #20 (
INFO  18:59:54,926 - #49 i
INFO  18:59:54,926 - #7 =
INFO  18:59:54,927 - #49 len
INFO  18:59:54,928 - #20 (
INFO  18:59:54,928 - #49 niz
INFO  18:59:54,928 - #21 )
INFO  18:59:54,930 - #9 ,
INFO  18:59:54,930 - #49 j
INFO  18:59:54,930 - #7 =
INFO  18:59:54,930 - #48 0
INFO  18:59:54,931 - #8 ;
INFO  18:59:54,931 - #49 i
INFO  18:59:54,932 - #33 >
INFO  18:59:54,932 - #48 0
INFO  18:59:54,933 - #8 ;
INFO  18:59:54,934 - #49 i
INFO  18:59:54,935 - #25 --
INFO  18:59:54,935 - #9 ,
INFO  18:59:54,935 - #49 j
INFO  18:59:54,935 - #24 ++
INFO  18:59:54,935 - #21 )
INFO  18:59:54,936 - #4 {
INFO  18:59:54,937 - #14 if
INFO  18:59:54,937 - #20 (
INFO  18:59:54,937 - #49 i
INFO  18:59:54,937 - #31 ==
INFO  18:59:54,937 - #48 1
INFO  18:59:54,938 - #26 &&
INFO  18:59:54,938 - #49 j
INFO  18:59:54,938 - #34 >=
INFO  18:59:54,938 - #48 0
INFO  18:59:54,939 - #27 ||
INFO  18:59:54,939 - #49 j
INFO  18:59:54,940 - #31 ==
INFO  18:59:54,940 - #48 0
INFO  18:59:54,941 - #21 )
INFO  18:59:54,941 - #4 {
INFO  18:59:54,942 - #49 s
INFO  18:59:54,942 - #7 =
INFO  18:59:54,942 - #49 niz
INFO  18:59:54,942 - #10 [
INFO  18:59:54,943 - #49 i
INFO  18:59:54,943 - #11 ]
INFO  18:59:54,943 - #8 ;
INFO  18:59:54,943 - #16 break
INFO  18:59:54,944 - #8 ;
INFO  18:59:54,944 - #5 }
INFO  18:59:54,945 - #5 }
INFO  18:59:54,946 - #18 return
INFO  18:59:54,946 - #49 s
INFO  18:59:54,946 - #8 ;
INFO  18:59:54,946 - #5 }
INFO  18:59:54,946 - #49 bool
INFO  18:59:54,947 - #49 provera
INFO  18:59:54,947 - #20 (
INFO  18:59:54,947 - #21 )
INFO  18:59:54,948 - #49 int
INFO  18:59:54,948 - #49 pom1
INFO  18:59:54,948 - #8 ;
INFO  18:59:54,948 - #4 {
INFO  18:59:54,948 - #49 pom1
INFO  18:59:54,948 - #7 =
INFO  18:59:54,948 - #28 -
INFO  18:59:54,948 - #20 (
INFO  18:59:54,948 - #48 5
INFO  18:59:54,948 - #38 *
INFO  18:59:54,948 - #48 2
INFO  18:59:54,950 - #21 )
INFO  18:59:54,950 - #37 +
INFO  18:59:54,950 - #48 11
INFO  18:59:54,951 - #8 ;
INFO  18:59:54,952 - #14 if
INFO  18:59:54,952 - #20 (
INFO  18:59:54,952 - #49 pom1
INFO  18:59:54,952 - #33 >
INFO  18:59:54,952 - #48 0
INFO  18:59:54,952 - #21 )
INFO  18:59:54,952 - #18 return
INFO  18:59:54,952 - #51 true
INFO  18:59:54,952 - #8 ;
INFO  18:59:54,953 - #15 else
INFO  18:59:54,953 - #18 return
INFO  18:59:54,953 - #51 false
INFO  18:59:54,954 - #8 ;
INFO  18:59:54,954 - #5 }
INFO  18:59:54,954 - #41 void
INFO  18:59:54,954 - #49 main
INFO  18:59:54,954 - #20 (
INFO  18:59:54,954 - #21 )
INFO  18:59:54,954 - #49 int
INFO  18:59:54,954 - #49 p1
INFO  18:59:54,954 - #9 ,
INFO  18:59:54,954 - #49 i
INFO  18:59:54,954 - #8 ;
INFO  18:59:54,955 - #6 const
INFO  18:59:54,955 - #49 int
INFO  18:59:54,955 - #49 p2
INFO  18:59:54,955 - #7 =
INFO  18:59:54,955 - #48 5
INFO  18:59:54,955 - #8 ;
INFO  18:59:54,955 - #49 char
INFO  18:59:54,955 - #49 p
INFO  18:59:54,955 - #8 ;
INFO  18:59:54,955 - #4 {
INFO  18:59:54,955 - #49 i
INFO  18:59:54,955 - #7 =
INFO  18:59:54,955 - #48 0
INFO  18:59:54,955 - #8 ;
INFO  18:59:54,955 - #14 if
INFO  18:59:54,956 - #20 (
INFO  18:59:54,956 - #49 i
INFO  18:59:54,956 - #31 ==
INFO  18:59:54,956 - #48 3
INFO  18:59:54,956 - #21 )
INFO  18:59:54,956 - #22 print
INFO  18:59:54,956 - #20 (
INFO  18:59:54,956 - #49 i
INFO  18:59:54,956 - #21 )
INFO  18:59:54,956 - #8 ;
INFO  18:59:54,956 - #15 else
INFO  18:59:54,957 - #14 if
INFO  18:59:54,957 - #20 (
INFO  18:59:54,957 - #49 i
INFO  18:59:54,957 - #31 ==
INFO  18:59:54,957 - #48 2
INFO  18:59:54,957 - #21 )
INFO  18:59:54,957 - #49 i
INFO  18:59:54,957 - #24 ++
INFO  18:59:54,957 - #8 ;
INFO  18:59:54,957 - #15 else
INFO  18:59:54,957 - #49 i
INFO  18:59:54,957 - #7 =
INFO  18:59:54,957 - #49 i
INFO  18:59:54,957 - #37 +
INFO  18:59:54,957 - #48 1
INFO  18:59:54,958 - #8 ;
INFO  18:59:54,958 - #22 print
INFO  18:59:54,958 - #20 (
INFO  18:59:54,958 - #49 i
INFO  18:59:54,958 - #21 )
INFO  18:59:54,958 - #8 ;
INFO  18:59:54,958 - #14 if
INFO  18:59:54,958 - #20 (
INFO  18:59:54,958 - #49 provera
INFO  18:59:54,958 - #20 (
INFO  18:59:54,958 - #21 )
INFO  18:59:54,959 - #21 )
INFO  18:59:54,959 - #22 print
INFO  18:59:54,959 - #20 (
INFO  18:59:54,960 - #50 t
INFO  18:59:54,960 - #21 )
INFO  18:59:54,960 - #8 ;
INFO  18:59:54,960 - #49 niz1
INFO  18:59:54,960 - #7 =
INFO  18:59:54,960 - #29 new
INFO  18:59:54,960 - #49 char
INFO  18:59:54,960 - #10 [
INFO  18:59:54,960 - #48 3
INFO  18:59:54,960 - #11 ]
INFO  18:59:54,960 - #8 ;
INFO  18:59:54,960 - #49 niz1
INFO  18:59:54,960 - #10 [
INFO  18:59:54,960 - #48 0
INFO  18:59:54,960 - #11 ]
INFO  18:59:54,960 - #7 =
INFO  18:59:54,960 - #50 a
INFO  18:59:54,960 - #8 ;
INFO  18:59:54,961 - #49 niz1
INFO  18:59:54,961 - #10 [
INFO  18:59:54,961 - #48 1
INFO  18:59:54,961 - #11 ]
INFO  18:59:54,961 - #7 =
INFO  18:59:54,961 - #50 b
INFO  18:59:54,961 - #8 ;
INFO  18:59:54,961 - #49 niz1
INFO  18:59:54,961 - #10 [
INFO  18:59:54,961 - #48 2
INFO  18:59:54,961 - #11 ]
INFO  18:59:54,961 - #7 =
INFO  18:59:54,961 - #50 c
INFO  18:59:54,961 - #8 ;
INFO  18:59:54,961 - #49 p
INFO  18:59:54,961 - #7 =
INFO  18:59:54,961 - #49 dohvatPrviKarakter
INFO  18:59:54,961 - #20 (
INFO  18:59:54,961 - #49 niz1
INFO  18:59:54,962 - #21 )
INFO  18:59:54,962 - #8 ;
INFO  18:59:54,962 - #22 print
INFO  18:59:54,962 - #20 (
INFO  18:59:54,962 - #49 p
INFO  18:59:54,962 - #21 )
INFO  18:59:54,962 - #8 ;
INFO  18:59:54,962 - #5 }
INFO  18:59:54,962 - #5 }
INFO  18:59:54,982 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  18:59:54,990 - ===================================
INFO  18:59:54,991 - Pocetak programa test301.
INFO  18:59:54,991 - Deklarisana je konstanta a na liniji 3
INFO  18:59:54,991 - Deklarisana je promenljiva b na liniji 4
INFO  18:59:54,991 - Deklarisana je promenljiva c na liniji 4
INFO  18:59:54,992 - Deklarisana je konstanta t na liniji 5
INFO  18:59:54,992 - Deklarisana je konstanta f na liniji 5
INFO  18:59:54,992 - Deklarisana je promenljiva niz1 na liniji 6
INFO  18:59:54,992 - Deklarisana je promenljiva d na liniji 7
INFO  18:59:54,992 - Deklarisana je promenljiva e na liniji 7
INFO  18:59:54,993 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  18:59:54,993 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  18:59:54,993 - Deklarisana je promenljiva s na liniji 12
INFO  18:59:54,993 - Deklarisana je promenljiva i na liniji 12
INFO  18:59:54,993 - Deklarisana je promenljiva j na liniji 12
INFO  19:00:36,210 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  19:00:36,311 - #2 program
INFO  19:00:36,312 - #49 test301
INFO  19:00:36,312 - #6 const
INFO  19:00:36,314 - #49 int
INFO  19:00:36,314 - #49 a
INFO  19:00:36,315 - #7 =
INFO  19:00:36,315 - #48 5
INFO  19:00:36,315 - #8 ;
INFO  19:00:36,316 - #49 int
INFO  19:00:36,316 - #49 b
INFO  19:00:36,316 - #9 ,
INFO  19:00:36,318 - #49 c
INFO  19:00:36,318 - #8 ;
INFO  19:00:36,318 - #6 const
INFO  19:00:36,319 - #49 bool
INFO  19:00:36,319 - #49 t
INFO  19:00:36,319 - #7 =
INFO  19:00:36,319 - #51 true
INFO  19:00:36,319 - #9 ,
INFO  19:00:36,321 - #49 f
INFO  19:00:36,321 - #7 =
INFO  19:00:36,322 - #51 false
INFO  19:00:36,322 - #8 ;
INFO  19:00:36,323 - #49 char
INFO  19:00:36,323 - #49 niz1
INFO  19:00:36,323 - #10 [
INFO  19:00:36,323 - #11 ]
INFO  19:00:36,324 - #8 ;
INFO  19:00:36,326 - #49 int
INFO  19:00:36,326 - #49 d
INFO  19:00:36,327 - #9 ,
INFO  19:00:36,327 - #49 e
INFO  19:00:36,327 - #8 ;
INFO  19:00:36,327 - #4 {
INFO  19:00:36,327 - #49 char
INFO  19:00:36,331 - #49 dohvatPrviKarakter
INFO  19:00:36,331 - #20 (
INFO  19:00:36,332 - #49 char
INFO  19:00:36,332 - #49 niz
INFO  19:00:36,332 - #10 [
INFO  19:00:36,332 - #11 ]
INFO  19:00:36,332 - #21 )
INFO  19:00:36,333 - #49 char
INFO  19:00:36,333 - #49 s
INFO  19:00:36,333 - #8 ;
INFO  19:00:36,334 - #49 int
INFO  19:00:36,334 - #49 i
INFO  19:00:36,334 - #9 ,
INFO  19:00:36,334 - #49 j
INFO  19:00:36,334 - #8 ;
INFO  19:00:36,334 - #4 {
INFO  19:00:36,334 - #23 for
INFO  19:00:36,334 - #20 (
INFO  19:00:36,336 - #49 i
INFO  19:00:36,336 - #7 =
INFO  19:00:36,337 - #49 len
INFO  19:00:36,338 - #20 (
INFO  19:00:36,338 - #49 niz
INFO  19:00:36,339 - #21 )
INFO  19:00:36,341 - #9 ,
INFO  19:00:36,341 - #49 j
INFO  19:00:36,341 - #7 =
INFO  19:00:36,341 - #48 0
INFO  19:00:36,342 - #8 ;
INFO  19:00:36,342 - #49 i
INFO  19:00:36,344 - #33 >
INFO  19:00:36,344 - #48 0
INFO  19:00:36,346 - #8 ;
INFO  19:00:36,348 - #49 i
INFO  19:00:36,349 - #25 --
INFO  19:00:36,349 - #9 ,
INFO  19:00:36,349 - #49 j
INFO  19:00:36,349 - #24 ++
INFO  19:00:36,350 - #21 )
INFO  19:00:36,351 - #4 {
INFO  19:00:36,352 - #14 if
INFO  19:00:36,352 - #20 (
INFO  19:00:36,352 - #49 i
INFO  19:00:36,353 - #31 ==
INFO  19:00:36,353 - #48 1
INFO  19:00:36,354 - #26 &&
INFO  19:00:36,354 - #49 j
INFO  19:00:36,354 - #34 >=
INFO  19:00:36,354 - #48 0
INFO  19:00:36,355 - #27 ||
INFO  19:00:36,356 - #49 j
INFO  19:00:36,357 - #31 ==
INFO  19:00:36,357 - #48 0
INFO  19:00:36,357 - #21 )
INFO  19:00:36,357 - #4 {
INFO  19:00:36,358 - #49 s
INFO  19:00:36,359 - #7 =
INFO  19:00:36,359 - #49 niz
INFO  19:00:36,359 - #10 [
INFO  19:00:36,360 - #49 i
INFO  19:00:36,360 - #11 ]
INFO  19:00:36,360 - #8 ;
INFO  19:00:36,361 - #16 break
INFO  19:00:36,361 - #8 ;
INFO  19:00:36,361 - #5 }
INFO  19:00:36,363 - #5 }
INFO  19:00:36,363 - #18 return
INFO  19:00:36,364 - #49 s
INFO  19:00:36,364 - #8 ;
INFO  19:00:36,364 - #5 }
INFO  19:00:36,364 - #49 bool
INFO  19:00:36,365 - #49 provera
INFO  19:00:36,365 - #20 (
INFO  19:00:36,365 - #21 )
INFO  19:00:36,366 - #49 int
INFO  19:00:36,366 - #49 pom1
INFO  19:00:36,366 - #8 ;
INFO  19:00:36,366 - #4 {
INFO  19:00:36,367 - #49 pom1
INFO  19:00:36,367 - #7 =
INFO  19:00:36,367 - #28 -
INFO  19:00:36,367 - #20 (
INFO  19:00:36,367 - #48 5
INFO  19:00:36,367 - #38 *
INFO  19:00:36,367 - #48 2
INFO  19:00:36,369 - #21 )
INFO  19:00:36,370 - #37 +
INFO  19:00:36,370 - #48 11
INFO  19:00:36,372 - #8 ;
INFO  19:00:36,372 - #14 if
INFO  19:00:36,372 - #20 (
INFO  19:00:36,372 - #49 pom1
INFO  19:00:36,372 - #33 >
INFO  19:00:36,372 - #48 0
INFO  19:00:36,373 - #21 )
INFO  19:00:36,373 - #18 return
INFO  19:00:36,373 - #51 true
INFO  19:00:36,373 - #8 ;
INFO  19:00:36,373 - #15 else
INFO  19:00:36,373 - #18 return
INFO  19:00:36,374 - #51 false
INFO  19:00:36,375 - #8 ;
INFO  19:00:36,375 - #5 }
INFO  19:00:36,375 - #41 void
INFO  19:00:36,375 - #49 main
INFO  19:00:36,375 - #20 (
INFO  19:00:36,375 - #21 )
INFO  19:00:36,375 - #49 int
INFO  19:00:36,376 - #49 p1
INFO  19:00:36,376 - #9 ,
INFO  19:00:36,376 - #49 i
INFO  19:00:36,376 - #8 ;
INFO  19:00:36,376 - #6 const
INFO  19:00:36,376 - #49 int
INFO  19:00:36,376 - #49 p2
INFO  19:00:36,376 - #7 =
INFO  19:00:36,376 - #48 5
INFO  19:00:36,376 - #8 ;
INFO  19:00:36,376 - #49 char
INFO  19:00:36,376 - #49 p
INFO  19:00:36,376 - #8 ;
INFO  19:00:36,377 - #4 {
INFO  19:00:36,377 - #49 i
INFO  19:00:36,377 - #7 =
INFO  19:00:36,377 - #48 0
INFO  19:00:36,377 - #8 ;
INFO  19:00:36,377 - #14 if
INFO  19:00:36,377 - #20 (
INFO  19:00:36,377 - #49 i
INFO  19:00:36,377 - #31 ==
INFO  19:00:36,377 - #48 3
INFO  19:00:36,377 - #21 )
INFO  19:00:36,377 - #22 print
INFO  19:00:36,378 - #20 (
INFO  19:00:36,378 - #49 i
INFO  19:00:36,378 - #21 )
INFO  19:00:36,378 - #8 ;
INFO  19:00:36,378 - #15 else
INFO  19:00:36,378 - #14 if
INFO  19:00:36,378 - #20 (
INFO  19:00:36,378 - #49 i
INFO  19:00:36,378 - #31 ==
INFO  19:00:36,378 - #48 2
INFO  19:00:36,378 - #21 )
INFO  19:00:36,379 - #49 i
INFO  19:00:36,379 - #24 ++
INFO  19:00:36,379 - #8 ;
INFO  19:00:36,379 - #15 else
INFO  19:00:36,379 - #49 i
INFO  19:00:36,379 - #7 =
INFO  19:00:36,379 - #49 i
INFO  19:00:36,379 - #37 +
INFO  19:00:36,379 - #48 1
INFO  19:00:36,379 - #8 ;
INFO  19:00:36,379 - #22 print
INFO  19:00:36,379 - #20 (
INFO  19:00:36,380 - #49 i
INFO  19:00:36,380 - #21 )
INFO  19:00:36,380 - #8 ;
INFO  19:00:36,380 - #14 if
INFO  19:00:36,380 - #20 (
INFO  19:00:36,380 - #49 provera
INFO  19:00:36,380 - #20 (
INFO  19:00:36,380 - #21 )
INFO  19:00:36,381 - #21 )
INFO  19:00:36,381 - #22 print
INFO  19:00:36,381 - #20 (
INFO  19:00:36,382 - #50 t
INFO  19:00:36,382 - #21 )
INFO  19:00:36,382 - #8 ;
INFO  19:00:36,382 - #49 niz1
INFO  19:00:36,382 - #7 =
INFO  19:00:36,382 - #29 new
INFO  19:00:36,382 - #49 char
INFO  19:00:36,382 - #10 [
INFO  19:00:36,382 - #48 3
INFO  19:00:36,382 - #11 ]
INFO  19:00:36,382 - #8 ;
INFO  19:00:36,383 - #49 niz1
INFO  19:00:36,383 - #10 [
INFO  19:00:36,383 - #48 0
INFO  19:00:36,383 - #11 ]
INFO  19:00:36,383 - #7 =
INFO  19:00:36,383 - #50 a
INFO  19:00:36,383 - #8 ;
INFO  19:00:36,383 - #49 niz1
INFO  19:00:36,383 - #10 [
INFO  19:00:36,383 - #48 1
INFO  19:00:36,383 - #11 ]
INFO  19:00:36,383 - #7 =
INFO  19:00:36,383 - #50 b
INFO  19:00:36,383 - #8 ;
INFO  19:00:36,383 - #49 niz1
INFO  19:00:36,383 - #10 [
INFO  19:00:36,383 - #48 2
INFO  19:00:36,384 - #11 ]
INFO  19:00:36,384 - #7 =
INFO  19:00:36,384 - #50 c
INFO  19:00:36,384 - #8 ;
INFO  19:00:36,384 - #49 p
INFO  19:00:36,384 - #7 =
INFO  19:00:36,384 - #49 dohvatPrviKarakter
INFO  19:00:36,384 - #20 (
INFO  19:00:36,384 - #49 niz1
INFO  19:00:36,384 - #21 )
INFO  19:00:36,384 - #8 ;
INFO  19:00:36,384 - #22 print
INFO  19:00:36,385 - #20 (
INFO  19:00:36,385 - #49 p
INFO  19:00:36,385 - #21 )
INFO  19:00:36,385 - #8 ;
INFO  19:00:36,385 - #5 }
INFO  19:00:36,385 - #5 }
INFO  19:00:36,401 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignatorActPars(
                              DesignatorIdent(
                               len
                              ) [DesignatorIdent]
                              ActualParsList(
                                ActParsEnd(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             niz
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [ActParsEnd]
                              ) [ActualParsList]
                            ) [FactorDesignatorActPars]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  19:00:36,404 - ===================================
INFO  19:00:36,404 - Pocetak programa test301.
INFO  19:00:36,404 - Deklarisana je konstanta a na liniji 3
INFO  19:00:36,405 - Deklarisana je promenljiva b na liniji 4
INFO  19:00:36,405 - Deklarisana je promenljiva c na liniji 4
INFO  19:00:36,405 - Deklarisana je konstanta t na liniji 5
INFO  19:00:36,405 - Deklarisana je konstanta f na liniji 5
INFO  19:00:36,405 - Deklarisana je promenljiva niz1 na liniji 6
INFO  19:00:36,405 - Deklarisana je promenljiva d na liniji 7
INFO  19:00:36,405 - Deklarisana je promenljiva e na liniji 7
INFO  19:00:36,405 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  19:00:36,405 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  19:00:36,405 - Deklarisana je promenljiva s na liniji 12
INFO  19:00:36,406 - Deklarisana je promenljiva i na liniji 12
INFO  19:00:36,406 - Deklarisana je promenljiva j na liniji 12
INFO  19:00:36,406 - Pronadjen poziv funkcije len na liniji 14
INFO  19:00:36,406 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  19:00:36,406 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  19:00:36,406 - Kreiran/promenjen element niza niz
INFO  19:00:36,407 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  19:00:36,407 - Dobra povratna vrednost funkcije na liniji 21
INFO  19:00:36,407 - Obradjuje se funkcija provera na liniji 24
INFO  19:00:36,407 - Deklarisana je promenljiva pom1 na liniji 25
INFO  19:00:36,407 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  19:00:36,407 - Dobra povratna vrednost funkcije na liniji 29
INFO  19:00:36,407 - Dobra povratna vrednost funkcije na liniji 30
INFO  19:00:36,407 - Obradjuje se funkcija main na liniji 33
INFO  19:00:36,407 - Deklarisana je promenljiva p1 na liniji 34
INFO  19:00:36,407 - Deklarisana je promenljiva i na liniji 34
INFO  19:00:36,408 - Deklarisana je konstanta p2 na liniji 35
INFO  19:00:36,408 - Deklarisana je promenljiva p na liniji 36
INFO  19:00:36,408 - Designator i expr su odgovarajuceg tipa na liniji 38
INFO  19:00:36,408 - Obradjena funkcija PRINT na liniji 39
INFO  19:00:36,408 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  19:00:36,408 - Obradjena funkcija PRINT na liniji 42
INFO  19:00:36,408 - Pronadjen poziv funkcije provera na liniji 44
INFO  19:00:36,408 - Obradjena funkcija PRINT na liniji 44
INFO  19:00:36,408 - Designator i expr su odgovarajuceg tipa na liniji 46
INFO  19:00:36,408 - Kreiran/promenjen element niza niz1
INFO  19:00:36,408 - Designator i expr su odgovarajuceg tipa na liniji 47
INFO  19:00:36,409 - Kreiran/promenjen element niza niz1
INFO  19:00:36,409 - Designator i expr su odgovarajuceg tipa na liniji 48
INFO  19:00:36,409 - Kreiran/promenjen element niza niz1
INFO  19:00:36,409 - Designator i expr su odgovarajuceg tipa na liniji 49
INFO  19:00:36,409 - Pronadjen poziv funkcije dohvatPrviKarakter na liniji 51
INFO  19:00:36,409 - Designator i expr su odgovarajuceg tipa na liniji 51
INFO  19:00:36,409 - Obradjena funkcija PRINT na liniji 52
INFO  19:00:36,409 - ===================================
INFO  19:00:36,428 - Parsiranje uspesno zavrseno!
INFO  19:07:31,532 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  19:07:31,680 - #2 program
INFO  19:07:31,680 - #49 test301
INFO  19:07:31,680 - #6 const
INFO  19:07:31,684 - #49 int
INFO  19:07:31,684 - #49 a
INFO  19:07:31,686 - #7 =
INFO  19:07:31,686 - #48 5
INFO  19:07:31,686 - #8 ;
INFO  19:07:31,687 - #49 int
INFO  19:07:31,687 - #49 b
INFO  19:07:31,687 - #9 ,
INFO  19:07:31,689 - #49 c
INFO  19:07:31,690 - #8 ;
INFO  19:07:31,690 - #6 const
INFO  19:07:31,690 - #49 bool
INFO  19:07:31,690 - #49 t
INFO  19:07:31,691 - #7 =
INFO  19:07:31,691 - #51 true
INFO  19:07:31,691 - #9 ,
INFO  19:07:31,691 - #49 f
INFO  19:07:31,691 - #7 =
INFO  19:07:31,691 - #51 false
INFO  19:07:31,691 - #8 ;
INFO  19:07:31,691 - #49 char
INFO  19:07:31,692 - #49 niz1
INFO  19:07:31,692 - #10 [
INFO  19:07:31,692 - #11 ]
INFO  19:07:31,692 - #8 ;
INFO  19:07:31,693 - #49 int
INFO  19:07:31,693 - #49 d
INFO  19:07:31,693 - #9 ,
INFO  19:07:31,693 - #49 e
INFO  19:07:31,693 - #8 ;
INFO  19:07:31,693 - #4 {
INFO  19:07:31,693 - #49 char
INFO  19:07:31,694 - #49 dohvatPrviKarakter
INFO  19:07:31,694 - #20 (
INFO  19:07:31,694 - #49 char
INFO  19:07:31,694 - #49 niz
INFO  19:07:31,694 - #10 [
INFO  19:07:31,694 - #11 ]
INFO  19:07:31,694 - #21 )
INFO  19:07:31,695 - #49 char
INFO  19:07:31,695 - #49 s
INFO  19:07:31,695 - #8 ;
INFO  19:07:31,695 - #49 int
INFO  19:07:31,695 - #49 i
INFO  19:07:31,695 - #9 ,
INFO  19:07:31,695 - #49 j
INFO  19:07:31,695 - #8 ;
INFO  19:07:31,695 - #4 {
INFO  19:07:31,695 - #23 for
INFO  19:07:31,695 - #20 (
INFO  19:07:31,696 - #49 i
INFO  19:07:31,696 - #7 =
INFO  19:07:31,696 - #49 len
INFO  19:07:31,697 - #20 (
INFO  19:07:31,697 - #49 niz
INFO  19:07:31,697 - #21 )
INFO  19:07:31,699 - #28 -
INFO  19:07:31,699 - #48 1
INFO  19:07:31,700 - #9 ,
INFO  19:07:31,700 - #49 j
INFO  19:07:31,701 - #7 =
INFO  19:07:31,701 - #48 0
INFO  19:07:31,701 - #8 ;
INFO  19:07:31,701 - #49 i
INFO  19:07:31,702 - #33 >
INFO  19:07:31,702 - #48 0
INFO  19:07:31,703 - #8 ;
INFO  19:07:31,704 - #49 i
INFO  19:07:31,705 - #25 --
INFO  19:07:31,705 - #9 ,
INFO  19:07:31,705 - #49 j
INFO  19:07:31,705 - #24 ++
INFO  19:07:31,705 - #21 )
INFO  19:07:31,706 - #4 {
INFO  19:07:31,707 - #14 if
INFO  19:07:31,707 - #20 (
INFO  19:07:31,707 - #49 i
INFO  19:07:31,707 - #31 ==
INFO  19:07:31,708 - #48 1
INFO  19:07:31,708 - #26 &&
INFO  19:07:31,708 - #49 j
INFO  19:07:31,708 - #34 >=
INFO  19:07:31,709 - #48 0
INFO  19:07:31,709 - #27 ||
INFO  19:07:31,709 - #49 j
INFO  19:07:31,710 - #31 ==
INFO  19:07:31,710 - #48 0
INFO  19:07:31,710 - #21 )
INFO  19:07:31,711 - #4 {
INFO  19:07:31,711 - #49 s
INFO  19:07:31,712 - #7 =
INFO  19:07:31,712 - #49 niz
INFO  19:07:31,712 - #10 [
INFO  19:07:31,713 - #49 i
INFO  19:07:31,713 - #11 ]
INFO  19:07:31,713 - #8 ;
INFO  19:07:31,713 - #16 break
INFO  19:07:31,714 - #8 ;
INFO  19:07:31,714 - #5 }
INFO  19:07:31,715 - #5 }
INFO  19:07:31,716 - #18 return
INFO  19:07:31,716 - #49 s
INFO  19:07:31,716 - #8 ;
INFO  19:07:31,716 - #5 }
INFO  19:07:31,716 - #49 bool
INFO  19:07:31,717 - #49 provera
INFO  19:07:31,717 - #20 (
INFO  19:07:31,717 - #21 )
INFO  19:07:31,718 - #49 int
INFO  19:07:31,718 - #49 pom1
INFO  19:07:31,718 - #8 ;
INFO  19:07:31,718 - #4 {
INFO  19:07:31,718 - #49 pom1
INFO  19:07:31,719 - #7 =
INFO  19:07:31,719 - #28 -
INFO  19:07:31,719 - #20 (
INFO  19:07:31,719 - #48 5
INFO  19:07:31,719 - #38 *
INFO  19:07:31,719 - #48 2
INFO  19:07:31,720 - #21 )
INFO  19:07:31,720 - #37 +
INFO  19:07:31,721 - #48 11
INFO  19:07:31,722 - #8 ;
INFO  19:07:31,722 - #14 if
INFO  19:07:31,722 - #20 (
INFO  19:07:31,722 - #49 pom1
INFO  19:07:31,722 - #33 >
INFO  19:07:31,722 - #48 0
INFO  19:07:31,722 - #21 )
INFO  19:07:31,722 - #18 return
INFO  19:07:31,722 - #51 true
INFO  19:07:31,722 - #8 ;
INFO  19:07:31,722 - #15 else
INFO  19:07:31,722 - #18 return
INFO  19:07:31,723 - #51 false
INFO  19:07:31,723 - #8 ;
INFO  19:07:31,723 - #5 }
INFO  19:07:31,724 - #41 void
INFO  19:07:31,724 - #49 main
INFO  19:07:31,724 - #20 (
INFO  19:07:31,724 - #21 )
INFO  19:07:31,724 - #49 int
INFO  19:07:31,724 - #49 p1
INFO  19:07:31,724 - #9 ,
INFO  19:07:31,724 - #49 i
INFO  19:07:31,724 - #8 ;
INFO  19:07:31,724 - #6 const
INFO  19:07:31,724 - #49 int
INFO  19:07:31,724 - #49 p2
INFO  19:07:31,725 - #7 =
INFO  19:07:31,725 - #48 5
INFO  19:07:31,725 - #8 ;
INFO  19:07:31,725 - #49 char
INFO  19:07:31,725 - #49 p
INFO  19:07:31,725 - #8 ;
INFO  19:07:31,725 - #4 {
INFO  19:07:31,725 - #49 i
INFO  19:07:31,725 - #7 =
INFO  19:07:31,725 - #48 0
INFO  19:07:31,725 - #8 ;
INFO  19:07:31,725 - #14 if
INFO  19:07:31,725 - #20 (
INFO  19:07:31,725 - #49 i
INFO  19:07:31,726 - #31 ==
INFO  19:07:31,726 - #48 3
INFO  19:07:31,726 - #21 )
INFO  19:07:31,726 - #22 print
INFO  19:07:31,726 - #20 (
INFO  19:07:31,726 - #49 i
INFO  19:07:31,726 - #21 )
INFO  19:07:31,726 - #8 ;
INFO  19:07:31,726 - #15 else
INFO  19:07:31,726 - #14 if
INFO  19:07:31,726 - #20 (
INFO  19:07:31,727 - #49 i
INFO  19:07:31,727 - #31 ==
INFO  19:07:31,727 - #48 2
INFO  19:07:31,727 - #21 )
INFO  19:07:31,727 - #49 i
INFO  19:07:31,727 - #24 ++
INFO  19:07:31,727 - #8 ;
INFO  19:07:31,727 - #15 else
INFO  19:07:31,727 - #49 i
INFO  19:07:31,727 - #7 =
INFO  19:07:31,727 - #49 i
INFO  19:07:31,728 - #37 +
INFO  19:07:31,728 - #48 1
INFO  19:07:31,728 - #8 ;
INFO  19:07:31,728 - #22 print
INFO  19:07:31,728 - #20 (
INFO  19:07:31,728 - #49 i
INFO  19:07:31,728 - #21 )
INFO  19:07:31,728 - #8 ;
INFO  19:07:31,728 - #14 if
INFO  19:07:31,728 - #20 (
INFO  19:07:31,728 - #49 provera
INFO  19:07:31,728 - #20 (
INFO  19:07:31,728 - #21 )
INFO  19:07:31,729 - #21 )
INFO  19:07:31,730 - #22 print
INFO  19:07:31,730 - #20 (
INFO  19:07:31,730 - #50 t
INFO  19:07:31,730 - #21 )
INFO  19:07:31,730 - #8 ;
INFO  19:07:31,730 - #49 niz1
INFO  19:07:31,730 - #7 =
INFO  19:07:31,730 - #29 new
INFO  19:07:31,730 - #49 char
INFO  19:07:31,730 - #10 [
INFO  19:07:31,730 - #48 3
INFO  19:07:31,731 - #11 ]
INFO  19:07:31,731 - #8 ;
INFO  19:07:31,731 - #49 niz1
INFO  19:07:31,731 - #10 [
INFO  19:07:31,731 - #48 0
INFO  19:07:31,731 - #11 ]
INFO  19:07:31,731 - #7 =
INFO  19:07:31,731 - #50 a
INFO  19:07:31,731 - #8 ;
INFO  19:07:31,731 - #49 niz1
INFO  19:07:31,731 - #10 [
INFO  19:07:31,731 - #48 1
INFO  19:07:31,731 - #11 ]
INFO  19:07:31,731 - #7 =
INFO  19:07:31,731 - #50 b
INFO  19:07:31,732 - #8 ;
INFO  19:07:31,732 - #49 niz1
INFO  19:07:31,732 - #10 [
INFO  19:07:31,732 - #48 2
INFO  19:07:31,732 - #11 ]
INFO  19:07:31,732 - #7 =
INFO  19:07:31,732 - #50 c
INFO  19:07:31,732 - #8 ;
INFO  19:07:31,732 - #49 p
INFO  19:07:31,732 - #7 =
INFO  19:07:31,732 - #49 dohvatPrviKarakter
INFO  19:07:31,732 - #20 (
INFO  19:07:31,732 - #49 niz1
INFO  19:07:31,733 - #21 )
INFO  19:07:31,733 - #8 ;
INFO  19:07:31,733 - #22 print
INFO  19:07:31,733 - #20 (
INFO  19:07:31,733 - #49 p
INFO  19:07:31,733 - #21 )
INFO  19:07:31,733 - #8 ;
INFO  19:07:31,733 - #5 }
INFO  19:07:31,733 - #5 }
INFO  19:07:31,758 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 len
                                ) [DesignatorIdent]
                                ActualParsList(
                                  ActParsEnd(
                                    ExprPositive(
                                      AddopEnd(
                                        Term(
                                          MulopEnd(
                                            FactorDesignator(
                                              DesignatorIdent(
                                               niz
                                              ) [DesignatorIdent]
                                            ) [FactorDesignator]
                                          ) [MulopEnd]
                                        ) [Term]
                                      ) [AddopEnd]
                                    ) [ExprPositive]
                                  ) [ActParsEnd]
                                ) [ActualParsList]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Minus(
                        ) [Minus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  19:07:31,762 - ===================================
INFO  19:07:31,763 - Pocetak programa test301.
INFO  19:07:31,763 - Deklarisana je konstanta a na liniji 3
INFO  19:07:31,763 - Deklarisana je promenljiva b na liniji 4
INFO  19:07:31,763 - Deklarisana je promenljiva c na liniji 4
INFO  19:07:31,764 - Deklarisana je konstanta t na liniji 5
INFO  19:07:31,764 - Deklarisana je konstanta f na liniji 5
INFO  19:07:31,764 - Deklarisana je promenljiva niz1 na liniji 6
INFO  19:07:31,764 - Deklarisana je promenljiva d na liniji 7
INFO  19:07:31,764 - Deklarisana je promenljiva e na liniji 7
INFO  19:07:31,764 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  19:07:31,765 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  19:07:31,765 - Deklarisana je promenljiva s na liniji 12
INFO  19:07:31,765 - Deklarisana je promenljiva i na liniji 12
INFO  19:07:31,765 - Deklarisana je promenljiva j na liniji 12
INFO  19:07:41,130 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  19:07:41,191 - #2 program
INFO  19:07:41,191 - #49 test301
INFO  19:07:41,191 - #6 const
INFO  19:07:41,192 - #49 int
INFO  19:07:41,192 - #49 a
INFO  19:07:41,193 - #7 =
INFO  19:07:41,193 - #48 5
INFO  19:07:41,193 - #8 ;
INFO  19:07:41,193 - #49 int
INFO  19:07:41,193 - #49 b
INFO  19:07:41,193 - #9 ,
INFO  19:07:41,195 - #49 c
INFO  19:07:41,195 - #8 ;
INFO  19:07:41,195 - #6 const
INFO  19:07:41,195 - #49 bool
INFO  19:07:41,195 - #49 t
INFO  19:07:41,196 - #7 =
INFO  19:07:41,196 - #51 true
INFO  19:07:41,196 - #9 ,
INFO  19:07:41,197 - #49 f
INFO  19:07:41,198 - #7 =
INFO  19:07:41,198 - #51 false
INFO  19:07:41,199 - #8 ;
INFO  19:07:41,199 - #49 char
INFO  19:07:41,199 - #49 niz1
INFO  19:07:41,199 - #10 [
INFO  19:07:41,199 - #11 ]
INFO  19:07:41,199 - #8 ;
INFO  19:07:41,201 - #49 int
INFO  19:07:41,202 - #49 d
INFO  19:07:41,202 - #9 ,
INFO  19:07:41,202 - #49 e
INFO  19:07:41,202 - #8 ;
INFO  19:07:41,202 - #4 {
INFO  19:07:41,202 - #49 char
INFO  19:07:41,204 - #49 dohvatPrviKarakter
INFO  19:07:41,204 - #20 (
INFO  19:07:41,205 - #49 char
INFO  19:07:41,205 - #49 niz
INFO  19:07:41,205 - #10 [
INFO  19:07:41,205 - #11 ]
INFO  19:07:41,206 - #21 )
INFO  19:07:41,206 - #49 char
INFO  19:07:41,206 - #49 s
INFO  19:07:41,207 - #8 ;
INFO  19:07:41,207 - #49 int
INFO  19:07:41,207 - #49 i
INFO  19:07:41,207 - #9 ,
INFO  19:07:41,207 - #49 j
INFO  19:07:41,207 - #8 ;
INFO  19:07:41,207 - #4 {
INFO  19:07:41,207 - #23 for
INFO  19:07:41,208 - #20 (
INFO  19:07:41,209 - #49 i
INFO  19:07:41,209 - #7 =
INFO  19:07:41,210 - #49 len
INFO  19:07:41,211 - #20 (
INFO  19:07:41,211 - #49 niz
INFO  19:07:41,212 - #21 )
INFO  19:07:41,214 - #28 -
INFO  19:07:41,214 - #48 1
INFO  19:07:41,216 - #9 ,
INFO  19:07:41,217 - #49 j
INFO  19:07:41,217 - #7 =
INFO  19:07:41,217 - #48 0
INFO  19:07:41,218 - #8 ;
INFO  19:07:41,218 - #49 i
INFO  19:07:41,219 - #33 >
INFO  19:07:41,219 - #48 0
INFO  19:07:41,221 - #8 ;
INFO  19:07:41,222 - #49 i
INFO  19:07:41,223 - #25 --
INFO  19:07:41,223 - #9 ,
INFO  19:07:41,223 - #49 j
INFO  19:07:41,223 - #24 ++
INFO  19:07:41,223 - #21 )
INFO  19:07:41,224 - #4 {
INFO  19:07:41,225 - #14 if
INFO  19:07:41,225 - #20 (
INFO  19:07:41,225 - #49 i
INFO  19:07:41,226 - #31 ==
INFO  19:07:41,226 - #48 1
INFO  19:07:41,227 - #26 &&
INFO  19:07:41,227 - #49 j
INFO  19:07:41,228 - #34 >=
INFO  19:07:41,228 - #48 0
INFO  19:07:41,229 - #27 ||
INFO  19:07:41,229 - #49 j
INFO  19:07:41,231 - #31 ==
INFO  19:07:41,231 - #48 0
INFO  19:07:41,231 - #21 )
INFO  19:07:41,231 - #4 {
INFO  19:07:41,233 - #49 s
INFO  19:07:41,233 - #7 =
INFO  19:07:41,233 - #49 niz
INFO  19:07:41,233 - #10 [
INFO  19:07:41,234 - #49 i
INFO  19:07:41,234 - #11 ]
INFO  19:07:41,234 - #8 ;
INFO  19:07:41,235 - #16 break
INFO  19:07:41,235 - #8 ;
INFO  19:07:41,235 - #5 }
INFO  19:07:41,237 - #5 }
INFO  19:07:41,237 - #18 return
INFO  19:07:41,238 - #49 s
INFO  19:07:41,238 - #8 ;
INFO  19:07:41,238 - #5 }
INFO  19:07:41,238 - #49 bool
INFO  19:07:41,239 - #49 provera
INFO  19:07:41,239 - #20 (
INFO  19:07:41,239 - #21 )
INFO  19:07:41,240 - #49 int
INFO  19:07:41,241 - #49 pom1
INFO  19:07:41,241 - #8 ;
INFO  19:07:41,241 - #4 {
INFO  19:07:41,241 - #49 pom1
INFO  19:07:41,241 - #7 =
INFO  19:07:41,241 - #28 -
INFO  19:07:41,241 - #20 (
INFO  19:07:41,241 - #48 5
INFO  19:07:41,241 - #38 *
INFO  19:07:41,242 - #48 2
INFO  19:07:41,244 - #21 )
INFO  19:07:41,244 - #37 +
INFO  19:07:41,245 - #48 11
INFO  19:07:41,246 - #8 ;
INFO  19:07:41,246 - #14 if
INFO  19:07:41,246 - #20 (
INFO  19:07:41,246 - #49 pom1
INFO  19:07:41,246 - #33 >
INFO  19:07:41,246 - #48 0
INFO  19:07:41,247 - #21 )
INFO  19:07:41,247 - #18 return
INFO  19:07:41,247 - #51 true
INFO  19:07:41,247 - #8 ;
INFO  19:07:41,247 - #15 else
INFO  19:07:41,247 - #18 return
INFO  19:07:41,248 - #51 false
INFO  19:07:41,249 - #8 ;
INFO  19:07:41,249 - #5 }
INFO  19:07:41,249 - #41 void
INFO  19:07:41,249 - #49 main
INFO  19:07:41,249 - #20 (
INFO  19:07:41,249 - #21 )
INFO  19:07:41,249 - #49 int
INFO  19:07:41,249 - #49 p1
INFO  19:07:41,249 - #9 ,
INFO  19:07:41,250 - #49 i
INFO  19:07:41,250 - #8 ;
INFO  19:07:41,250 - #6 const
INFO  19:07:41,250 - #49 int
INFO  19:07:41,250 - #49 p2
INFO  19:07:41,250 - #7 =
INFO  19:07:41,250 - #48 5
INFO  19:07:41,250 - #8 ;
INFO  19:07:41,250 - #49 char
INFO  19:07:41,250 - #49 p
INFO  19:07:41,250 - #8 ;
INFO  19:07:41,250 - #4 {
INFO  19:07:41,250 - #49 i
INFO  19:07:41,250 - #7 =
INFO  19:07:41,250 - #48 0
INFO  19:07:41,251 - #8 ;
INFO  19:07:41,251 - #14 if
INFO  19:07:41,251 - #20 (
INFO  19:07:41,251 - #49 i
INFO  19:07:41,251 - #31 ==
INFO  19:07:41,251 - #48 3
INFO  19:07:41,251 - #21 )
INFO  19:07:41,251 - #22 print
INFO  19:07:41,251 - #20 (
INFO  19:07:41,251 - #49 i
INFO  19:07:41,251 - #21 )
INFO  19:07:41,251 - #8 ;
INFO  19:07:41,251 - #15 else
INFO  19:07:41,252 - #14 if
INFO  19:07:41,252 - #20 (
INFO  19:07:41,252 - #49 i
INFO  19:07:41,252 - #31 ==
INFO  19:07:41,252 - #48 2
INFO  19:07:41,252 - #21 )
INFO  19:07:41,252 - #49 i
INFO  19:07:41,252 - #24 ++
INFO  19:07:41,252 - #8 ;
INFO  19:07:41,252 - #15 else
INFO  19:07:41,252 - #49 i
INFO  19:07:41,252 - #7 =
INFO  19:07:41,252 - #49 i
INFO  19:07:41,252 - #37 +
INFO  19:07:41,252 - #48 1
INFO  19:07:41,253 - #8 ;
INFO  19:07:41,253 - #22 print
INFO  19:07:41,253 - #20 (
INFO  19:07:41,253 - #49 i
INFO  19:07:41,253 - #21 )
INFO  19:07:41,253 - #8 ;
INFO  19:07:41,253 - #14 if
INFO  19:07:41,253 - #20 (
INFO  19:07:41,253 - #49 provera
INFO  19:07:41,253 - #20 (
INFO  19:07:41,253 - #21 )
INFO  19:07:41,254 - #21 )
INFO  19:07:41,255 - #22 print
INFO  19:07:41,255 - #20 (
INFO  19:07:41,255 - #50 t
INFO  19:07:41,255 - #21 )
INFO  19:07:41,255 - #8 ;
INFO  19:07:41,255 - #49 niz1
INFO  19:07:41,255 - #7 =
INFO  19:07:41,255 - #29 new
INFO  19:07:41,255 - #49 char
INFO  19:07:41,255 - #10 [
INFO  19:07:41,255 - #48 3
INFO  19:07:41,255 - #11 ]
INFO  19:07:41,256 - #8 ;
INFO  19:07:41,256 - #49 niz1
INFO  19:07:41,256 - #10 [
INFO  19:07:41,256 - #48 0
INFO  19:07:41,256 - #11 ]
INFO  19:07:41,256 - #7 =
INFO  19:07:41,256 - #50 a
INFO  19:07:41,256 - #8 ;
INFO  19:07:41,256 - #49 niz1
INFO  19:07:41,256 - #10 [
INFO  19:07:41,256 - #48 1
INFO  19:07:41,256 - #11 ]
INFO  19:07:41,256 - #7 =
INFO  19:07:41,256 - #50 b
INFO  19:07:41,256 - #8 ;
INFO  19:07:41,256 - #49 niz1
INFO  19:07:41,257 - #10 [
INFO  19:07:41,257 - #48 2
INFO  19:07:41,257 - #11 ]
INFO  19:07:41,257 - #7 =
INFO  19:07:41,257 - #50 c
INFO  19:07:41,257 - #8 ;
INFO  19:07:41,257 - #49 p
INFO  19:07:41,257 - #7 =
INFO  19:07:41,257 - #49 dohvatPrviKarakter
INFO  19:07:41,257 - #20 (
INFO  19:07:41,257 - #49 niz1
INFO  19:07:41,257 - #21 )
INFO  19:07:41,257 - #8 ;
INFO  19:07:41,257 - #22 print
INFO  19:07:41,257 - #20 (
INFO  19:07:41,257 - #49 p
INFO  19:07:41,258 - #21 )
INFO  19:07:41,258 - #8 ;
INFO  19:07:41,258 - #5 }
INFO  19:07:41,258 - #5 }
INFO  19:07:41,277 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstDeclaration(
              ConstDeclarationList(
                Type(
                 int
                ) [Type]
                ConstDeclarationsEnd(
                  ConstNum(
                   a
                   5
                  ) [ConstNum]
                ) [ConstDeclarationsEnd]
              ) [ConstDeclarationList]
            ) [ConstDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarations(
                VarIdent(
                  VarName(
                   b
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     c
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             bool
            ) [Type]
            ConstDeclarations(
              ConstDeclarationsEnd(
                ConstBool(
                 t
                 true
                ) [ConstBool]
              ) [ConstDeclarationsEnd]
              ConstBool(
               f
               false
              ) [ConstBool]
            ) [ConstDeclarations]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           char
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz1
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarations(
          VarIdent(
            VarName(
             d
            ) [VarName]
          ) [VarIdent]
          VarDeclarationsEnd(
            VarIdent(
              VarName(
               e
              ) [VarName]
            ) [VarIdent]
          ) [VarDeclarationsEnd]
        ) [VarDeclarations]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        NoMethodDeclaration(
        ) [NoMethodDeclaration]
        MethodDecl(
          MethodNameAnyType(
            Type(
             char
            ) [Type]
           dohvatPrviKarakter
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsEnd(
              FormParsArr(
                Type(
                 char
                ) [Type]
               niz
              ) [FormParsArr]
            ) [FormParsEnd]
          ) [MethodParameters]
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              VarDeclaration(
                VarDeclarationList(
                  Type(
                   char
                  ) [Type]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       s
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarationList]
              ) [VarDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       j
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementForCondFact(
              ForSt(
              ) [ForSt]
              DesignatorStatements(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 len
                                ) [DesignatorIdent]
                                ActualParsList(
                                  ActParsEnd(
                                    ExprPositive(
                                      AddopEnd(
                                        Term(
                                          MulopEnd(
                                            FactorDesignator(
                                              DesignatorIdent(
                                               niz
                                              ) [DesignatorIdent]
                                            ) [FactorDesignator]
                                          ) [MulopEnd]
                                        ) [Term]
                                      ) [AddopEnd]
                                    ) [ExprPositive]
                                  ) [ActParsEnd]
                                ) [ActualParsList]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Minus(
                        ) [Minus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       j
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
              ) [DesignatorStatements]
              LSemiFor(
              ) [LSemiFor]
              CondFactFor(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  Greater(
                  ) [Greater]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [CondFactFor]
              RSemiFor(
              ) [RSemiFor]
              DesignatorStatementListSecond(
                DesignatorStatements(
                  DesignatorStatementMatched(
                    DesignatorStatementDecrement(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [DesignatorStatementDecrement]
                  ) [DesignatorStatementMatched]
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         j
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatements]
              ) [DesignatorStatementListSecond]
              RParenFor(
              ) [RParenFor]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    Conditions(
                      OneCondTerm(
                        CondTerms(
                          OneCondFact(
                            CondFactRelop(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         i
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                              EqualTo(
                              ) [EqualTo]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [CondFactRelop]
                          ) [OneCondFact]
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       j
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            GreaterEqual(
                            ) [GreaterEqual]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [CondTerms]
                      ) [OneCondTerm]
                      OrCond(
                      ) [OrCond]
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     j
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   0
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [Conditions]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               s
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ArrayDecl(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       i
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ArrayDecl]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementBreak(
                          ) [StatementBreak]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementForCondFact]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           s
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         provera
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               int
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   pom1
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 pom1
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopList(
                    AddopEndMinus(
                      Term(
                        MulopEnd(
                          FactorExpr(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       5
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [FactorExpr]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEndMinus]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorNum(
                         11
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               pom1
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Greater(
                    ) [Greater]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             0
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         true
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              ElseSt(
              ) [ElseSt]
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
            ) [StatementIfElse]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarations(
                  VarIdent(
                    VarName(
                     p1
                    ) [VarName]
                  ) [VarIdent]
                  VarDeclarationsEnd(
                    VarIdent(
                      VarName(
                       i
                      ) [VarName]
                    ) [VarIdent]
                  ) [VarDeclarationsEnd]
                ) [VarDeclarations]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 p2
                 5
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             char
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 p
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementIfElse(
            LParenIf(
            ) [LParenIf]
            OneCondTerm(
              OneCondFact(
                CondFactRelop(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                  EqualTo(
                  ) [EqualTo]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           3
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [CondFactRelop]
              ) [OneCondFact]
            ) [OneCondTerm]
            RParenIf(
            ) [RParenIf]
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            ElseSt(
            ) [ElseSt]
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             2
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementIncrement(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                  ) [DesignatorStatementIncrement]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     i
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopList(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 i
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                        Plus(
                        ) [Plus]
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopList]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
            ) [StatementIfElse]
          ) [StatementIfElse]
          Statements(
            StatementPrint(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementPrint]
            Statements(
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactExpr(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignatorActPars(
                                DesignatorIdent(
                                 provera
                                ) [DesignatorIdent]
                                NoActPars(
                                ) [NoActPars]
                              ) [FactorDesignatorActPars]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactExpr]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementPrint(
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorChar(
                           t
                          ) [FactorChar]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [StatementPrint]
              ) [StatementIf]
              Statements(
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       niz1
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNew(
                                Type(
                                 char
                                ) [Type]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         3
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [FactorNew]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorExpr(
                          DesignatorName(
                           niz1
                          ) [DesignatorName]
                          ArrayDecl(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     0
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ArrayDecl]
                        ) [DesignatorExpr]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorChar(
                                 a
                                ) [FactorChar]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorExpr(
                            DesignatorName(
                             niz1
                            ) [DesignatorName]
                            ArrayDecl(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ArrayDecl]
                          ) [DesignatorExpr]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   b
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz1
                              ) [DesignatorName]
                              ArrayDecl(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ArrayDecl]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorChar(
                                     c
                                    ) [FactorChar]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorIdent(
                               p
                              ) [DesignatorIdent]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignatorActPars(
                                        DesignatorIdent(
                                         dohvatPrviKarakter
                                        ) [DesignatorIdent]
                                        ActualParsList(
                                          ActParsEnd(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignator(
                                                      DesignatorIdent(
                                                       niz1
                                                      ) [DesignatorIdent]
                                                    ) [FactorDesignator]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [ActParsEnd]
                                        ) [ActualParsList]
                                      ) [FactorDesignatorActPars]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementPrint(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       p
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [StatementPrint]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  19:07:41,283 - ===================================
INFO  19:07:41,284 - Pocetak programa test301.
INFO  19:07:41,285 - Deklarisana je konstanta a na liniji 3
INFO  19:07:41,286 - Deklarisana je promenljiva b na liniji 4
INFO  19:07:41,286 - Deklarisana je promenljiva c na liniji 4
INFO  19:07:41,286 - Deklarisana je konstanta t na liniji 5
INFO  19:07:41,286 - Deklarisana je konstanta f na liniji 5
INFO  19:07:41,286 - Deklarisana je promenljiva niz1 na liniji 6
INFO  19:07:41,287 - Deklarisana je promenljiva d na liniji 7
INFO  19:07:41,287 - Deklarisana je promenljiva e na liniji 7
INFO  19:07:41,287 - Obradjuje se funkcija dohvatPrviKarakter na liniji 11
INFO  19:07:41,287 - Deklarisan je parametar funkcije (niz) niz na liniji 11
INFO  19:07:41,287 - Deklarisana je promenljiva s na liniji 12
INFO  19:07:41,287 - Deklarisana je promenljiva i na liniji 12
INFO  19:07:41,287 - Deklarisana je promenljiva j na liniji 12
INFO  19:07:41,288 - Pronadjen poziv funkcije len na liniji 14
INFO  19:07:41,288 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  19:07:41,288 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  19:07:41,289 - Kreiran/promenjen element niza niz
INFO  19:07:41,289 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  19:07:41,289 - Dobra povratna vrednost funkcije na liniji 21
INFO  19:07:41,289 - Obradjuje se funkcija provera na liniji 24
INFO  19:07:41,289 - Deklarisana je promenljiva pom1 na liniji 25
INFO  19:07:41,289 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  19:07:41,290 - Dobra povratna vrednost funkcije na liniji 29
INFO  19:07:41,290 - Dobra povratna vrednost funkcije na liniji 30
INFO  19:07:41,290 - Obradjuje se funkcija main na liniji 33
INFO  19:07:41,290 - Deklarisana je promenljiva p1 na liniji 34
INFO  19:07:41,290 - Deklarisana je promenljiva i na liniji 34
INFO  19:07:41,290 - Deklarisana je konstanta p2 na liniji 35
INFO  19:07:41,290 - Deklarisana je promenljiva p na liniji 36
INFO  19:07:41,290 - Designator i expr su odgovarajuceg tipa na liniji 38
INFO  19:07:41,290 - Obradjena funkcija PRINT na liniji 39
INFO  19:07:41,290 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  19:07:41,291 - Obradjena funkcija PRINT na liniji 42
INFO  19:07:41,291 - Pronadjen poziv funkcije provera na liniji 44
INFO  19:07:41,291 - Obradjena funkcija PRINT na liniji 44
INFO  19:07:41,291 - Designator i expr su odgovarajuceg tipa na liniji 46
INFO  19:07:41,291 - Kreiran/promenjen element niza niz1
INFO  19:07:41,291 - Designator i expr su odgovarajuceg tipa na liniji 47
INFO  19:07:41,291 - Kreiran/promenjen element niza niz1
INFO  19:07:41,291 - Designator i expr su odgovarajuceg tipa na liniji 48
INFO  19:07:41,292 - Kreiran/promenjen element niza niz1
INFO  19:07:41,292 - Designator i expr su odgovarajuceg tipa na liniji 49
INFO  19:07:41,292 - Pronadjen poziv funkcije dohvatPrviKarakter na liniji 51
INFO  19:07:41,292 - Designator i expr su odgovarajuceg tipa na liniji 51
INFO  19:07:41,292 - Obradjena funkcija PRINT na liniji 52
INFO  19:07:41,292 - ===================================
INFO  19:07:41,308 - Parsiranje uspesno zavrseno!
