INFO  10:56:44,103 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  10:56:45,449 - #2 program
INFO  10:56:45,449 - #49 test301
INFO  10:56:45,449 - #6 const
INFO  10:56:45,474 - #49 int
INFO  10:56:45,474 - #49 N
INFO  10:56:45,486 - #7 =
INFO  10:56:45,487 - #48 2
INFO  10:56:45,487 - #8 ;
INFO  10:56:45,487 - #49 int
INFO  10:56:45,488 - #49 mat
INFO  10:56:45,488 - #10 [
INFO  10:56:45,507 - #11 ]
INFO  10:56:45,508 - #10 [
INFO  10:56:45,528 - #11 ]
INFO  10:56:45,528 - #8 ;
INFO  10:56:45,529 - #49 int
INFO  10:56:45,529 - #49 niz
INFO  10:56:45,529 - #10 [
INFO  10:56:45,529 - #11 ]
INFO  10:56:45,530 - #8 ;
INFO  10:56:45,530 - #49 int
INFO  10:56:45,539 - #49 i
INFO  10:56:45,539 - #8 ;
INFO  10:56:45,540 - #4 {
INFO  10:56:45,540 - #41 void
INFO  10:56:45,557 - #49 main
INFO  10:56:45,557 - #20 (
INFO  10:56:45,557 - #21 )
INFO  10:56:45,573 - #4 {
INFO  10:56:45,573 - #23 for
INFO  10:56:45,573 - #20 (
INFO  10:56:45,602 - #49 i
INFO  10:56:45,607 - #7 =
INFO  10:56:45,607 - #48 0
INFO  10:56:45,626 - #8 ;
INFO  10:56:45,638 - #49 i
INFO  10:56:45,652 - #35 <
INFO  10:56:45,652 - #48 5
INFO  10:56:45,678 - #8 ;
INFO  10:56:45,692 - #49 i
INFO  10:56:45,706 - #24 ++
INFO  10:56:45,706 - #21 )
INFO  10:56:45,720 - #22 print
INFO  10:56:45,733 - #20 (
INFO  10:56:45,733 - #49 i
INFO  10:56:45,733 - #21 )
INFO  10:56:45,734 - #8 ;
INFO  10:56:45,734 - #5 }
INFO  10:56:45,744 - #5 }
INFO  10:56:45,847 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          NoDeclarations(
          ) [NoDeclarations]
          ConstDeclaration(
            ConstDeclarationList(
              Type(
               int
              ) [Type]
              ConstDeclarationsEnd(
                ConstNum(
                 N
                 2
                ) [ConstNum]
              ) [ConstDeclarationsEnd]
            ) [ConstDeclarationList]
          ) [ConstDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarationsEnd(
              VarMatrix(
                Arr(
                  VarName(
                   mat
                  ) [VarName]
                ) [Arr]
              ) [VarMatrix]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarationsEnd(
            VarArr(
              Arr(
                VarName(
                 niz
                ) [VarName]
              ) [Arr]
            ) [VarArr]
          ) [VarDeclarationsEnd]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarationsEnd(
          VarIdent(
            VarName(
             i
            ) [VarName]
          ) [VarIdent]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      NoDeclarations(
      ) [NoDeclarations]
      Statements(
        StatementForCondFact(
          ForSt(
          ) [ForSt]
          DesignatorStatementOne(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 i
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         0
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [DesignatorStatementOne]
          LSemiFor(
          ) [LSemiFor]
          CondFactFor(
            CondFactRelop(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignator(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [FactorDesignator]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
              Less(
              ) [Less]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       5
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [CondFactRelop]
          ) [CondFactFor]
          RSemiFor(
          ) [RSemiFor]
          DesignatorStatementListSecond(
            DesignatorStatementOne(
              DesignatorStatementMatched(
                DesignatorStatementIncrement(
                  DesignatorIdent(
                   i
                  ) [DesignatorIdent]
                ) [DesignatorStatementIncrement]
              ) [DesignatorStatementMatched]
            ) [DesignatorStatementOne]
          ) [DesignatorStatementListSecond]
          RParenFor(
          ) [RParenFor]
          StatementPrint(
            ExprPositive(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorDesignator(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                    ) [FactorDesignator]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprPositive]
          ) [StatementPrint]
        ) [StatementForCondFact]
        NoStatement(
        ) [NoStatement]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  10:56:45,849 - ===================================
INFO  10:56:45,850 - Pocetak programa test301.
INFO  10:56:45,858 - Deklarisana je konstanta N na liniji 5
INFO  10:56:45,858 - Deklarisana je promenljiva mat na liniji 7
INFO  10:56:45,858 - Deklarisana je promenljiva niz na liniji 8
INFO  10:56:45,859 - Deklarisana je promenljiva i na liniji 9
INFO  10:56:45,859 - Obradjuje se funkcija main na liniji 11
INFO  10:56:45,859 - Designator i expr su odgovarajuceg tipa na liniji 14
INFO  10:56:45,859 - Obradjena funkcija PRINT na liniji 15
INFO  10:56:45,860 - ===================================
INFO  10:56:45,984 - Parsiranje uspesno zavrseno!
