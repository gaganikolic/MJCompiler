INFO  00:07:03,431 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  00:07:03,490 - #2 program
INFO  00:07:03,490 - #49 test302
INFO  00:07:03,490 - #6 const
INFO  00:07:03,492 - #49 int
INFO  00:07:03,492 - #49 jedan
INFO  00:07:03,492 - #7 =
INFO  00:07:03,492 - #48 1
INFO  00:07:03,493 - #8 ;
INFO  00:07:03,493 - #49 int
INFO  00:07:03,493 - #49 i
INFO  00:07:03,493 - #8 ;
INFO  00:07:03,494 - #49 bool
INFO  00:07:03,494 - #49 ibool
INFO  00:07:03,494 - #8 ;
INFO  00:07:03,494 - #49 int
INFO  00:07:03,494 - #49 niz2
INFO  00:07:03,495 - #8 ;
INFO  00:07:03,495 - #49 int
INFO  00:07:03,495 - #49 niz
INFO  00:07:03,495 - #10 [
INFO  00:07:03,495 - #11 ]
INFO  00:07:03,497 - #9 ,
INFO  00:07:03,497 - #49 niz_2
INFO  00:07:03,497 - #10 [
INFO  00:07:03,498 - #11 ]
INFO  00:07:03,498 - #9 ,
INFO  00:07:03,498 - #49 niz_3
INFO  00:07:03,498 - #10 [
INFO  00:07:03,498 - #11 ]
INFO  00:07:03,498 - #8 ;
INFO  00:07:03,499 - #49 int
INFO  00:07:03,499 - #49 a
INFO  00:07:03,499 - #8 ;
INFO  00:07:03,499 - #4 {
INFO  00:07:03,499 - #49 int
INFO  00:07:03,500 - #49 sum
INFO  00:07:03,500 - #20 (
INFO  00:07:03,500 - #49 int
INFO  00:07:03,500 - #49 z
INFO  00:07:03,500 - #9 ,
INFO  00:07:03,500 - #49 int
INFO  00:07:03,500 - #49 d
INFO  00:07:03,500 - #21 )
INFO  00:07:03,501 - #4 {
INFO  00:07:03,501 - #18 return
INFO  00:07:03,501 - #49 z
INFO  00:07:03,501 - #37 +
INFO  00:07:03,502 - #49 d
INFO  00:07:03,503 - #8 ;
INFO  00:07:03,503 - #5 }
INFO  00:07:03,504 - #49 int
INFO  00:07:03,505 - #49 inkrement
INFO  00:07:03,505 - #20 (
INFO  00:07:03,506 - #49 int
INFO  00:07:03,506 - #49 a
INFO  00:07:03,506 - #9 ,
INFO  00:07:03,506 - #49 int
INFO  00:07:03,506 - #49 inc
INFO  00:07:03,506 - #21 )
INFO  00:07:03,506 - #49 int
INFO  00:07:03,506 - #49 pom
INFO  00:07:03,506 - #8 ;
INFO  00:07:03,506 - #4 {
INFO  00:07:03,506 - #14 if
INFO  00:07:03,506 - #20 (
INFO  00:07:03,506 - #49 inc
INFO  00:07:03,507 - #31 ==
INFO  00:07:03,507 - #49 jedan
INFO  00:07:03,508 - #21 )
INFO  00:07:03,509 - #49 pom
INFO  00:07:03,509 - #7 =
INFO  00:07:03,509 - #48 1
INFO  00:07:03,510 - #8 ;
INFO  00:07:03,510 - #15 else
INFO  00:07:03,510 - #14 if
INFO  00:07:03,511 - #20 (
INFO  00:07:03,511 - #49 inc
INFO  00:07:03,511 - #31 ==
INFO  00:07:03,511 - #48 2
INFO  00:07:03,511 - #21 )
INFO  00:07:03,512 - #49 pom
INFO  00:07:03,512 - #7 =
INFO  00:07:03,512 - #49 a
INFO  00:07:03,512 - #8 ;
INFO  00:07:03,512 - #18 return
INFO  00:07:03,512 - #49 sum
INFO  00:07:03,513 - #20 (
INFO  00:07:03,513 - #49 a
INFO  00:07:03,513 - #9 ,
INFO  00:07:03,513 - #49 pom
INFO  00:07:03,513 - #21 )
INFO  00:07:03,513 - #8 ;
INFO  00:07:03,514 - #5 }
INFO  00:07:03,514 - #49 bool
INFO  00:07:03,514 - #49 verify
INFO  00:07:03,514 - #20 (
INFO  00:07:03,514 - #21 )
INFO  00:07:03,515 - #4 {
INFO  00:07:03,515 - #22 print
INFO  00:07:03,515 - #20 (
INFO  00:07:03,515 - #50 v
INFO  00:07:03,515 - #21 )
INFO  00:07:03,515 - #8 ;
INFO  00:07:03,516 - #18 return
INFO  00:07:03,516 - #51 false
INFO  00:07:03,516 - #8 ;
INFO  00:07:03,516 - #5 }
INFO  00:07:03,516 - #41 void
INFO  00:07:03,516 - #49 main
INFO  00:07:03,516 - #20 (
INFO  00:07:03,516 - #21 )
INFO  00:07:03,516 - #4 {
INFO  00:07:03,516 - #14 if
INFO  00:07:03,516 - #20 (
INFO  00:07:03,517 - #48 1
INFO  00:07:03,517 - #32 !=
INFO  00:07:03,517 - #48 1
INFO  00:07:03,517 - #21 )
INFO  00:07:03,517 - #22 print
INFO  00:07:03,517 - #20 (
INFO  00:07:03,518 - #28 -
INFO  00:07:03,518 - #48 6
INFO  00:07:03,518 - #21 )
INFO  00:07:03,518 - #8 ;
INFO  00:07:03,518 - #15 else
INFO  00:07:03,518 - #22 print
INFO  00:07:03,518 - #20 (
INFO  00:07:03,518 - #48 0
INFO  00:07:03,518 - #21 )
INFO  00:07:03,518 - #8 ;
INFO  00:07:03,518 - #49 ibool
INFO  00:07:03,518 - #7 =
INFO  00:07:03,518 - #51 false
INFO  00:07:03,519 - #8 ;
INFO  00:07:03,519 - #49 i
INFO  00:07:03,519 - #7 =
INFO  00:07:03,519 - #48 0
INFO  00:07:03,519 - #8 ;
INFO  00:07:03,519 - #23 for
INFO  00:07:03,519 - #20 (
INFO  00:07:03,520 - #49 i
INFO  00:07:03,520 - #7 =
INFO  00:07:03,520 - #48 0
INFO  00:07:03,520 - #8 ;
INFO  00:07:03,521 - #49 i
INFO  00:07:03,521 - #35 <
INFO  00:07:03,521 - #48 10
INFO  00:07:03,522 - #8 ;
INFO  00:07:03,523 - #49 i
INFO  00:07:03,524 - #24 ++
INFO  00:07:03,524 - #21 )
INFO  00:07:03,524 - #4 {
INFO  00:07:03,525 - #14 if
INFO  00:07:03,525 - #20 (
INFO  00:07:03,525 - #49 i
INFO  00:07:03,525 - #31 ==
INFO  00:07:03,525 - #48 2
INFO  00:07:03,526 - #21 )
INFO  00:07:03,526 - #49 ibool
INFO  00:07:03,526 - #7 =
INFO  00:07:03,526 - #51 true
INFO  00:07:03,526 - #8 ;
INFO  00:07:03,526 - #49 i
INFO  00:07:03,526 - #24 ++
INFO  00:07:03,526 - #8 ;
INFO  00:07:03,526 - #5 }
INFO  00:07:03,526 - #14 if
INFO  00:07:03,526 - #20 (
INFO  00:07:03,527 - #49 ibool
INFO  00:07:03,527 - #21 )
INFO  00:07:03,527 - #14 if
INFO  00:07:03,527 - #20 (
INFO  00:07:03,527 - #49 i
INFO  00:07:03,527 - #31 ==
INFO  00:07:03,527 - #48 5
INFO  00:07:03,527 - #21 )
INFO  00:07:03,527 - #22 print
INFO  00:07:03,527 - #20 (
INFO  00:07:03,527 - #48 1
INFO  00:07:03,527 - #21 )
INFO  00:07:03,527 - #8 ;
INFO  00:07:03,528 - #15 else
INFO  00:07:03,528 - #22 print
INFO  00:07:03,528 - #20 (
INFO  00:07:03,528 - #28 -
INFO  00:07:03,528 - #48 1
INFO  00:07:03,528 - #21 )
INFO  00:07:03,528 - #8 ;
INFO  00:07:03,528 - #49 a
INFO  00:07:03,528 - #7 =
INFO  00:07:03,528 - #48 2
INFO  00:07:03,528 - #8 ;
INFO  00:07:03,528 - #49 niz
INFO  00:07:03,528 - #7 =
INFO  00:07:03,528 - #29 new
INFO  00:07:03,528 - #49 niz
INFO  00:07:03,528 - #10 [
INFO  00:07:03,529 - #48 3
INFO  00:07:03,529 - #11 ]
INFO  00:07:03,529 - #8 ;
INFO  00:07:03,529 - #49 niz
INFO  00:07:03,529 - #10 [
INFO  00:07:03,530 - #48 0
INFO  00:07:03,530 - #11 ]
INFO  00:07:03,530 - #7 =
INFO  00:07:03,530 - #48 1
INFO  00:07:03,530 - #38 *
INFO  00:07:03,530 - #49 a
INFO  00:07:03,531 - #8 ;
INFO  00:07:03,531 - #49 niz
INFO  00:07:03,531 - #10 [
INFO  00:07:03,531 - #48 1
INFO  00:07:03,531 - #11 ]
INFO  00:07:03,531 - #7 =
INFO  00:07:03,531 - #48 2
INFO  00:07:03,532 - #38 *
INFO  00:07:03,532 - #49 a
INFO  00:07:03,532 - #8 ;
INFO  00:07:03,532 - #49 niz
INFO  00:07:03,532 - #10 [
INFO  00:07:03,532 - #48 2
INFO  00:07:03,532 - #11 ]
INFO  00:07:03,532 - #7 =
INFO  00:07:03,532 - #49 sum
INFO  00:07:03,532 - #20 (
INFO  00:07:03,532 - #49 niz
INFO  00:07:03,532 - #10 [
INFO  00:07:03,532 - #48 1
INFO  00:07:03,532 - #11 ]
INFO  00:07:03,532 - #9 ,
INFO  00:07:03,532 - #49 niz
INFO  00:07:03,532 - #10 [
INFO  00:07:03,532 - #48 0
INFO  00:07:03,532 - #11 ]
INFO  00:07:03,533 - #21 )
INFO  00:07:03,533 - #38 *
INFO  00:07:03,533 - #49 a
INFO  00:07:03,533 - #37 +
INFO  00:07:03,533 - #48 1
INFO  00:07:03,533 - #8 ;
INFO  00:07:03,533 - #22 print
INFO  00:07:03,533 - #20 (
INFO  00:07:03,533 - #49 niz
INFO  00:07:03,533 - #10 [
INFO  00:07:03,533 - #48 0
INFO  00:07:03,533 - #11 ]
INFO  00:07:03,533 - #21 )
INFO  00:07:03,533 - #8 ;
INFO  00:07:03,534 - #22 print
INFO  00:07:03,534 - #20 (
INFO  00:07:03,534 - #49 niz
INFO  00:07:03,534 - #10 [
INFO  00:07:03,534 - #48 1
INFO  00:07:03,534 - #11 ]
INFO  00:07:03,534 - #21 )
INFO  00:07:03,534 - #8 ;
INFO  00:07:03,534 - #22 print
INFO  00:07:03,534 - #20 (
INFO  00:07:03,534 - #49 niz
INFO  00:07:03,534 - #10 [
INFO  00:07:03,534 - #48 2
INFO  00:07:03,534 - #11 ]
INFO  00:07:03,535 - #21 )
INFO  00:07:03,535 - #8 ;
INFO  00:07:03,535 - #14 if
INFO  00:07:03,535 - #20 (
INFO  00:07:03,535 - #49 verify
INFO  00:07:03,535 - #20 (
INFO  00:07:03,535 - #21 )
INFO  00:07:03,536 - #27 ||
INFO  00:07:03,536 - #49 niz
INFO  00:07:03,537 - #10 [
INFO  00:07:03,537 - #48 2
INFO  00:07:03,537 - #11 ]
INFO  00:07:03,537 - #31 ==
INFO  00:07:03,537 - #48 4
INFO  00:07:03,537 - #21 )
INFO  00:07:03,537 - #22 print
INFO  00:07:03,538 - #20 (
INFO  00:07:03,538 - #49 ord
INFO  00:07:03,538 - #20 (
INFO  00:07:03,538 - #50 A
INFO  00:07:03,539 - #21 )
INFO  00:07:03,539 - #21 )
INFO  00:07:03,539 - #8 ;
INFO  00:07:03,539 - #15 else
INFO  00:07:03,539 - #22 print
INFO  00:07:03,539 - #20 (
INFO  00:07:03,539 - #49 ord
INFO  00:07:03,539 - #20 (
INFO  00:07:03,539 - #50 a
INFO  00:07:03,539 - #21 )
INFO  00:07:03,539 - #21 )
INFO  00:07:03,539 - #8 ;
INFO  00:07:03,539 - #22 print
INFO  00:07:03,539 - #20 (
INFO  00:07:03,539 - #49 eol
INFO  00:07:03,540 - #21 )
INFO  00:07:03,540 - #8 ;
INFO  00:07:03,540 - #49 i
INFO  00:07:03,540 - #7 =
INFO  00:07:03,540 - #48 0
INFO  00:07:03,540 - #8 ;
INFO  00:07:03,540 - #23 for
INFO  00:07:03,540 - #20 (
INFO  00:07:03,540 - #49 i
INFO  00:07:03,540 - #7 =
INFO  00:07:03,540 - #48 0
INFO  00:07:03,540 - #8 ;
INFO  00:07:03,540 - #49 i
INFO  00:07:03,540 - #35 <
INFO  00:07:03,540 - #48 10
INFO  00:07:03,540 - #8 ;
INFO  00:07:03,540 - #21 )
INFO  00:07:03,541 - #4 {
INFO  00:07:03,541 - #14 if
INFO  00:07:03,541 - #20 (
INFO  00:07:03,541 - #49 i
INFO  00:07:03,541 - #31 ==
INFO  00:07:03,541 - #48 3
INFO  00:07:03,541 - #21 )
INFO  00:07:03,542 - #4 {
INFO  00:07:03,542 - #49 i
INFO  00:07:03,542 - #24 ++
INFO  00:07:03,542 - #8 ;
INFO  00:07:03,542 - #17 continue
INFO  00:07:03,542 - #8 ;
INFO  00:07:03,542 - #5 }
INFO  00:07:03,543 - #14 if
INFO  00:07:03,543 - #20 (
INFO  00:07:03,543 - #49 i
INFO  00:07:03,543 - #31 ==
INFO  00:07:03,544 - #48 4
INFO  00:07:03,544 - #21 )
INFO  00:07:03,544 - #16 break
INFO  00:07:03,544 - #8 ;
INFO  00:07:03,544 - #49 i
INFO  00:07:03,545 - #7 =
INFO  00:07:03,545 - #49 inkrement
INFO  00:07:03,545 - #20 (
INFO  00:07:03,545 - #49 i
INFO  00:07:03,545 - #9 ,
INFO  00:07:03,545 - #48 1
INFO  00:07:03,545 - #21 )
INFO  00:07:03,545 - #8 ;
INFO  00:07:03,546 - #5 }
INFO  00:07:03,546 - #14 if
INFO  00:07:03,546 - #20 (
INFO  00:07:03,546 - #49 i
INFO  00:07:03,546 - #31 ==
INFO  00:07:03,546 - #48 3
INFO  00:07:03,546 - #26 &&
INFO  00:07:03,546 - #49 verify
INFO  00:07:03,546 - #20 (
INFO  00:07:03,546 - #21 )
INFO  00:07:03,546 - #21 )
INFO  00:07:03,546 - #22 print
INFO  00:07:03,546 - #20 (
INFO  00:07:03,546 - #28 -
INFO  00:07:03,546 - #48 4
INFO  00:07:03,546 - #21 )
INFO  00:07:03,546 - #8 ;
INFO  00:07:03,547 - #15 else
INFO  00:07:03,547 - #22 print
INFO  00:07:03,547 - #20 (
INFO  00:07:03,547 - #48 4
INFO  00:07:03,547 - #21 )
INFO  00:07:03,547 - #8 ;
INFO  00:07:03,547 - #5 }
INFO  00:07:03,547 - #5 }
INFO  00:07:03,565 - Program(
  ProgramName(
   test302
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstNum(
                     jedan
                     1
                    ) [ConstNum]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               bool
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   ibool
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 niz2
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarations(
            VarArr(
              VarName(
               niz
              ) [VarName]
            ) [VarArr]
            VarDeclarations(
              VarArr(
                VarName(
                 niz_2
                ) [VarName]
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                  VarName(
                   niz_3
                  ) [VarName]
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarations]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarationsEnd(
          VarIdent(
            VarName(
             a
            ) [VarName]
          ) [VarIdent]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        MethodDeclarationList(
          NoMethodDeclaration(
          ) [NoMethodDeclaration]
          MethodDecl(
            MethodNameAnyType(
              Type(
               int
              ) [Type]
             sum
            ) [MethodNameAnyType]
            MethodParameters(
              FormParsList(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 z
                ) [FormParsVar]
                FormParsEnd(
                  FormParsVar(
                    Type(
                     int
                    ) [Type]
                   d
                  ) [FormParsVar]
                ) [FormParsEnd]
              ) [FormParsList]
            ) [MethodParameters]
            NoDeclarations(
            ) [NoDeclarations]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopList(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             z
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           d
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [MethodDecl]
        ) [MethodDeclarationList]
        MethodDecl(
          MethodNameAnyType(
            Type(
             int
            ) [Type]
           inkrement
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsList(
              FormParsVar(
                Type(
                 int
                ) [Type]
               a
              ) [FormParsVar]
              FormParsEnd(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 inc
                ) [FormParsVar]
              ) [FormParsEnd]
            ) [FormParsList]
          ) [MethodParameters]
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     pom
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementIfElse(
              LParenIf(
              ) [LParenIf]
              OneCondTerm(
                OneCondFact(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               inc
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    EqualTo(
                    ) [EqualTo]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               jedan
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [OneCondFact]
              ) [OneCondTerm]
              RParenIf(
              ) [RParenIf]
              StatementDesignator(
                DesignatorStatementMatched(
                  DesignatorStatementAssignop(
                    DesignatorIdent(
                     pom
                    ) [DesignatorIdent]
                    Assignop(
                    ) [Assignop]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             1
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [DesignatorStatementAssignop]
                ) [DesignatorStatementMatched]
              ) [StatementDesignator]
              ElseSt(
              ) [ElseSt]
              StatementIf(
                LParenIf(
                ) [LParenIf]
                OneCondTerm(
                  OneCondFact(
                    CondFactRelop(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 inc
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                      EqualTo(
                      ) [EqualTo]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               2
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [CondFactRelop]
                  ) [OneCondFact]
                ) [OneCondTerm]
                RParenIf(
                ) [RParenIf]
                StatementDesignator(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       pom
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorDesignator(
                                DesignatorIdent(
                                 a
                                ) [DesignatorIdent]
                              ) [FactorDesignator]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [StatementDesignator]
              ) [StatementIf]
            ) [StatementIfElse]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignatorActPars(
                          DesignatorIdent(
                           sum
                          ) [DesignatorIdent]
                          ActualParsList(
                            ActParsList(
                              ActParsEnd(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorDesignator(
                                          DesignatorIdent(
                                           a
                                          ) [DesignatorIdent]
                                        ) [FactorDesignator]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [ActParsEnd]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         pom
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ActParsList]
                          ) [ActualParsList]
                        ) [FactorDesignatorActPars]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         verify
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        NoDeclarations(
        ) [NoDeclarations]
        Statements(
          StatementPrint(
            ExprPositive(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorChar(
                     v
                    ) [FactorChar]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprPositive]
          ) [StatementPrint]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorBool(
                       false
                      ) [FactorBool]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      NoDeclarations(
      ) [NoDeclarations]
      Statements(
        StatementIfElse(
          LParenIf(
          ) [LParenIf]
          OneCondTerm(
            OneCondFact(
              CondFactRelop(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         1
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
                NotEqualTo(
                ) [NotEqualTo]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         1
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [CondFactRelop]
            ) [OneCondFact]
          ) [OneCondTerm]
          RParenIf(
          ) [RParenIf]
          StatementPrint(
            ExprNegativ(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorNum(
                     6
                    ) [FactorNum]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprNegativ]
          ) [StatementPrint]
          ElseSt(
          ) [ElseSt]
          StatementPrint(
            ExprPositive(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorNum(
                     0
                    ) [FactorNum]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprPositive]
          ) [StatementPrint]
        ) [StatementIfElse]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 ibool
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorBool(
                         false
                        ) [FactorBool]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementDesignator(
              DesignatorStatementMatched(
                DesignatorStatementAssignop(
                  DesignatorIdent(
                   i
                  ) [DesignatorIdent]
                  Assignop(
                  ) [Assignop]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementMatched]
            ) [StatementDesignator]
            Statements(
              StatementForCondFact(
                ForSt(
                ) [ForSt]
                DesignatorStatementOne(
                  DesignatorStatementMatched(
                    DesignatorStatementAssignop(
                      DesignatorIdent(
                       i
                      ) [DesignatorIdent]
                      Assignop(
                      ) [Assignop]
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               0
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [DesignatorStatementAssignop]
                  ) [DesignatorStatementMatched]
                ) [DesignatorStatementOne]
                LSemiFor(
                ) [LSemiFor]
                CondFactFor(
                  CondFactRelop(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorDesignator(
                              DesignatorIdent(
                               i
                              ) [DesignatorIdent]
                            ) [FactorDesignator]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                    Less(
                    ) [Less]
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorNum(
                             10
                            ) [FactorNum]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [CondFactRelop]
                ) [CondFactFor]
                RSemiFor(
                ) [RSemiFor]
                DesignatorStatementListSecond(
                  DesignatorStatementOne(
                    DesignatorStatementMatched(
                      DesignatorStatementIncrement(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                      ) [DesignatorStatementIncrement]
                    ) [DesignatorStatementMatched]
                  ) [DesignatorStatementOne]
                ) [DesignatorStatementListSecond]
                RParenFor(
                ) [RParenFor]
                StatementStatementList(
                  Statements(
                    StatementIf(
                      LParenIf(
                      ) [LParenIf]
                      OneCondTerm(
                        OneCondFact(
                          CondFactRelop(
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       i
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                            EqualTo(
                            ) [EqualTo]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorNum(
                                     2
                                    ) [FactorNum]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [CondFactRelop]
                        ) [OneCondFact]
                      ) [OneCondTerm]
                      RParenIf(
                      ) [RParenIf]
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorIdent(
                             ibool
                            ) [DesignatorIdent]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorBool(
                                     true
                                    ) [FactorBool]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                    ) [StatementIf]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementIncrement(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [DesignatorStatementIncrement]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      NoStatement(
                      ) [NoStatement]
                    ) [Statements]
                  ) [Statements]
                ) [StatementStatementList]
              ) [StatementForCondFact]
              Statements(
                StatementIf(
                  LParenIf(
                  ) [LParenIf]
                  OneCondTerm(
                    OneCondFact(
                      CondFactExpr(
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorDesignator(
                                  DesignatorIdent(
                                   ibool
                                  ) [DesignatorIdent]
                                ) [FactorDesignator]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [CondFactExpr]
                    ) [OneCondFact]
                  ) [OneCondTerm]
                  RParenIf(
                  ) [RParenIf]
                  StatementIfElse(
                    LParenIf(
                    ) [LParenIf]
                    OneCondTerm(
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     i
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          EqualTo(
                          ) [EqualTo]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   5
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [OneCondTerm]
                    RParenIf(
                    ) [RParenIf]
                    StatementPrint(
                      ExprPositive(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               1
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprPositive]
                    ) [StatementPrint]
                    ElseSt(
                    ) [ElseSt]
                    StatementPrint(
                      ExprNegativ(
                        AddopEnd(
                          Term(
                            MulopEnd(
                              FactorNum(
                               1
                              ) [FactorNum]
                            ) [MulopEnd]
                          ) [Term]
                        ) [AddopEnd]
                      ) [ExprNegativ]
                    ) [StatementPrint]
                  ) [StatementIfElse]
                ) [StatementIf]
                Statements(
                  StatementDesignator(
                    DesignatorStatementMatched(
                      DesignatorStatementAssignop(
                        DesignatorIdent(
                         a
                        ) [DesignatorIdent]
                        Assignop(
                        ) [Assignop]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorNum(
                                 2
                                ) [FactorNum]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [DesignatorStatementAssignop]
                    ) [DesignatorStatementMatched]
                  ) [StatementDesignator]
                  Statements(
                    StatementDesignator(
                      DesignatorStatementMatched(
                        DesignatorStatementAssignop(
                          DesignatorIdent(
                           niz
                          ) [DesignatorIdent]
                          Assignop(
                          ) [Assignop]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNew(
                                    Type(
                                     niz
                                    ) [Type]
                                    ExprPositive(
                                      AddopEnd(
                                        Term(
                                          MulopEnd(
                                            FactorNum(
                                             3
                                            ) [FactorNum]
                                          ) [MulopEnd]
                                        ) [Term]
                                      ) [AddopEnd]
                                    ) [ExprPositive]
                                  ) [FactorNew]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [DesignatorStatementAssignop]
                      ) [DesignatorStatementMatched]
                    ) [StatementDesignator]
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementAssignop(
                            DesignatorExpr(
                              DesignatorName(
                               niz
                              ) [DesignatorName]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorNum(
                                       0
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorExpr]
                            Assignop(
                            ) [Assignop]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopList(
                                    MulopEnd(
                                      FactorNum(
                                       1
                                      ) [FactorNum]
                                    ) [MulopEnd]
                                    Star(
                                    ) [Star]
                                    FactorDesignator(
                                      DesignatorIdent(
                                       a
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopList]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [DesignatorStatementAssignop]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementDesignator(
                          DesignatorStatementMatched(
                            DesignatorStatementAssignop(
                              DesignatorExpr(
                                DesignatorName(
                                 niz
                                ) [DesignatorName]
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         1
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [DesignatorExpr]
                              Assignop(
                              ) [Assignop]
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopList(
                                      MulopEnd(
                                        FactorNum(
                                         2
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                      Star(
                                      ) [Star]
                                      FactorDesignator(
                                        DesignatorIdent(
                                         a
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopList]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [DesignatorStatementAssignop]
                          ) [DesignatorStatementMatched]
                        ) [StatementDesignator]
                        Statements(
                          StatementDesignator(
                            DesignatorStatementMatched(
                              DesignatorStatementAssignop(
                                DesignatorExpr(
                                  DesignatorName(
                                   niz
                                  ) [DesignatorName]
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorNum(
                                           2
                                          ) [FactorNum]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [DesignatorExpr]
                                Assignop(
                                ) [Assignop]
                                ExprPositive(
                                  AddopList(
                                    AddopEnd(
                                      Term(
                                        MulopList(
                                          MulopEnd(
                                            FactorDesignatorActPars(
                                              DesignatorIdent(
                                               sum
                                              ) [DesignatorIdent]
                                              ActualParsList(
                                                ActParsList(
                                                  ActParsEnd(
                                                    ExprPositive(
                                                      AddopEnd(
                                                        Term(
                                                          MulopEnd(
                                                            FactorDesignator(
                                                              DesignatorExpr(
                                                                DesignatorName(
                                                                 niz
                                                                ) [DesignatorName]
                                                                ExprPositive(
                                                                  AddopEnd(
                                                                    Term(
                                                                      MulopEnd(
                                                                        FactorNum(
                                                                         1
                                                                        ) [FactorNum]
                                                                      ) [MulopEnd]
                                                                    ) [Term]
                                                                  ) [AddopEnd]
                                                                ) [ExprPositive]
                                                              ) [DesignatorExpr]
                                                            ) [FactorDesignator]
                                                          ) [MulopEnd]
                                                        ) [Term]
                                                      ) [AddopEnd]
                                                    ) [ExprPositive]
                                                  ) [ActParsEnd]
                                                  ExprPositive(
                                                    AddopEnd(
                                                      Term(
                                                        MulopEnd(
                                                          FactorDesignator(
                                                            DesignatorExpr(
                                                              DesignatorName(
                                                               niz
                                                              ) [DesignatorName]
                                                              ExprPositive(
                                                                AddopEnd(
                                                                  Term(
                                                                    MulopEnd(
                                                                      FactorNum(
                                                                       0
                                                                      ) [FactorNum]
                                                                    ) [MulopEnd]
                                                                  ) [Term]
                                                                ) [AddopEnd]
                                                              ) [ExprPositive]
                                                            ) [DesignatorExpr]
                                                          ) [FactorDesignator]
                                                        ) [MulopEnd]
                                                      ) [Term]
                                                    ) [AddopEnd]
                                                  ) [ExprPositive]
                                                ) [ActParsList]
                                              ) [ActualParsList]
                                            ) [FactorDesignatorActPars]
                                          ) [MulopEnd]
                                          Star(
                                          ) [Star]
                                          FactorDesignator(
                                            DesignatorIdent(
                                             a
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopList]
                                      ) [Term]
                                    ) [AddopEnd]
                                    Plus(
                                    ) [Plus]
                                    Term(
                                      MulopEnd(
                                        FactorNum(
                                         1
                                        ) [FactorNum]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopList]
                                ) [ExprPositive]
                              ) [DesignatorStatementAssignop]
                            ) [DesignatorStatementMatched]
                          ) [StatementDesignator]
                          Statements(
                            StatementPrint(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorExpr(
                                          DesignatorName(
                                           niz
                                          ) [DesignatorName]
                                          ExprPositive(
                                            AddopEnd(
                                              Term(
                                                MulopEnd(
                                                  FactorNum(
                                                   0
                                                  ) [FactorNum]
                                                ) [MulopEnd]
                                              ) [Term]
                                            ) [AddopEnd]
                                          ) [ExprPositive]
                                        ) [DesignatorExpr]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [StatementPrint]
                            Statements(
                              StatementPrint(
                                ExprPositive(
                                  AddopEnd(
                                    Term(
                                      MulopEnd(
                                        FactorDesignator(
                                          DesignatorExpr(
                                            DesignatorName(
                                             niz
                                            ) [DesignatorName]
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorNum(
                                                     1
                                                    ) [FactorNum]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [DesignatorExpr]
                                        ) [FactorDesignator]
                                      ) [MulopEnd]
                                    ) [Term]
                                  ) [AddopEnd]
                                ) [ExprPositive]
                              ) [StatementPrint]
                              Statements(
                                StatementPrint(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorExpr(
                                              DesignatorName(
                                               niz
                                              ) [DesignatorName]
                                              ExprPositive(
                                                AddopEnd(
                                                  Term(
                                                    MulopEnd(
                                                      FactorNum(
                                                       2
                                                      ) [FactorNum]
                                                    ) [MulopEnd]
                                                  ) [Term]
                                                ) [AddopEnd]
                                              ) [ExprPositive]
                                            ) [DesignatorExpr]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [StatementPrint]
                                Statements(
                                  StatementIfElse(
                                    LParenIf(
                                    ) [LParenIf]
                                    Conditions(
                                      OneCondTerm(
                                        OneCondFact(
                                          CondFactExpr(
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorDesignatorActPars(
                                                      DesignatorIdent(
                                                       verify
                                                      ) [DesignatorIdent]
                                                      NoActPars(
                                                      ) [NoActPars]
                                                    ) [FactorDesignatorActPars]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [CondFactExpr]
                                        ) [OneCondFact]
                                      ) [OneCondTerm]
                                      OrCond(
                                      ) [OrCond]
                                      OneCondFact(
                                        CondFactRelop(
                                          ExprPositive(
                                            AddopEnd(
                                              Term(
                                                MulopEnd(
                                                  FactorDesignator(
                                                    DesignatorExpr(
                                                      DesignatorName(
                                                       niz
                                                      ) [DesignatorName]
                                                      ExprPositive(
                                                        AddopEnd(
                                                          Term(
                                                            MulopEnd(
                                                              FactorNum(
                                                               2
                                                              ) [FactorNum]
                                                            ) [MulopEnd]
                                                          ) [Term]
                                                        ) [AddopEnd]
                                                      ) [ExprPositive]
                                                    ) [DesignatorExpr]
                                                  ) [FactorDesignator]
                                                ) [MulopEnd]
                                              ) [Term]
                                            ) [AddopEnd]
                                          ) [ExprPositive]
                                          EqualTo(
                                          ) [EqualTo]
                                          ExprPositive(
                                            AddopEnd(
                                              Term(
                                                MulopEnd(
                                                  FactorNum(
                                                   4
                                                  ) [FactorNum]
                                                ) [MulopEnd]
                                              ) [Term]
                                            ) [AddopEnd]
                                          ) [ExprPositive]
                                        ) [CondFactRelop]
                                      ) [OneCondFact]
                                    ) [Conditions]
                                    RParenIf(
                                    ) [RParenIf]
                                    StatementPrint(
                                      ExprPositive(
                                        AddopEnd(
                                          Term(
                                            MulopEnd(
                                              FactorDesignatorActPars(
                                                DesignatorIdent(
                                                 ord
                                                ) [DesignatorIdent]
                                                ActualParsList(
                                                  ActParsEnd(
                                                    ExprPositive(
                                                      AddopEnd(
                                                        Term(
                                                          MulopEnd(
                                                            FactorChar(
                                                             A
                                                            ) [FactorChar]
                                                          ) [MulopEnd]
                                                        ) [Term]
                                                      ) [AddopEnd]
                                                    ) [ExprPositive]
                                                  ) [ActParsEnd]
                                                ) [ActualParsList]
                                              ) [FactorDesignatorActPars]
                                            ) [MulopEnd]
                                          ) [Term]
                                        ) [AddopEnd]
                                      ) [ExprPositive]
                                    ) [StatementPrint]
                                    ElseSt(
                                    ) [ElseSt]
                                    StatementPrint(
                                      ExprPositive(
                                        AddopEnd(
                                          Term(
                                            MulopEnd(
                                              FactorDesignatorActPars(
                                                DesignatorIdent(
                                                 ord
                                                ) [DesignatorIdent]
                                                ActualParsList(
                                                  ActParsEnd(
                                                    ExprPositive(
                                                      AddopEnd(
                                                        Term(
                                                          MulopEnd(
                                                            FactorChar(
                                                             a
                                                            ) [FactorChar]
                                                          ) [MulopEnd]
                                                        ) [Term]
                                                      ) [AddopEnd]
                                                    ) [ExprPositive]
                                                  ) [ActParsEnd]
                                                ) [ActualParsList]
                                              ) [FactorDesignatorActPars]
                                            ) [MulopEnd]
                                          ) [Term]
                                        ) [AddopEnd]
                                      ) [ExprPositive]
                                    ) [StatementPrint]
                                  ) [StatementIfElse]
                                  Statements(
                                    StatementPrint(
                                      ExprPositive(
                                        AddopEnd(
                                          Term(
                                            MulopEnd(
                                              FactorDesignator(
                                                DesignatorIdent(
                                                 eol
                                                ) [DesignatorIdent]
                                              ) [FactorDesignator]
                                            ) [MulopEnd]
                                          ) [Term]
                                        ) [AddopEnd]
                                      ) [ExprPositive]
                                    ) [StatementPrint]
                                    Statements(
                                      StatementDesignator(
                                        DesignatorStatementMatched(
                                          DesignatorStatementAssignop(
                                            DesignatorIdent(
                                             i
                                            ) [DesignatorIdent]
                                            Assignop(
                                            ) [Assignop]
                                            ExprPositive(
                                              AddopEnd(
                                                Term(
                                                  MulopEnd(
                                                    FactorNum(
                                                     0
                                                    ) [FactorNum]
                                                  ) [MulopEnd]
                                                ) [Term]
                                              ) [AddopEnd]
                                            ) [ExprPositive]
                                          ) [DesignatorStatementAssignop]
                                        ) [DesignatorStatementMatched]
                                      ) [StatementDesignator]
                                      Statements(
                                        StatementForCondFact(
                                          ForSt(
                                          ) [ForSt]
                                          DesignatorStatementOne(
                                            DesignatorStatementMatched(
                                              DesignatorStatementAssignop(
                                                DesignatorIdent(
                                                 i
                                                ) [DesignatorIdent]
                                                Assignop(
                                                ) [Assignop]
                                                ExprPositive(
                                                  AddopEnd(
                                                    Term(
                                                      MulopEnd(
                                                        FactorNum(
                                                         0
                                                        ) [FactorNum]
                                                      ) [MulopEnd]
                                                    ) [Term]
                                                  ) [AddopEnd]
                                                ) [ExprPositive]
                                              ) [DesignatorStatementAssignop]
                                            ) [DesignatorStatementMatched]
                                          ) [DesignatorStatementOne]
                                          LSemiFor(
                                          ) [LSemiFor]
                                          CondFactFor(
                                            CondFactRelop(
                                              ExprPositive(
                                                AddopEnd(
                                                  Term(
                                                    MulopEnd(
                                                      FactorDesignator(
                                                        DesignatorIdent(
                                                         i
                                                        ) [DesignatorIdent]
                                                      ) [FactorDesignator]
                                                    ) [MulopEnd]
                                                  ) [Term]
                                                ) [AddopEnd]
                                              ) [ExprPositive]
                                              Less(
                                              ) [Less]
                                              ExprPositive(
                                                AddopEnd(
                                                  Term(
                                                    MulopEnd(
                                                      FactorNum(
                                                       10
                                                      ) [FactorNum]
                                                    ) [MulopEnd]
                                                  ) [Term]
                                                ) [AddopEnd]
                                              ) [ExprPositive]
                                            ) [CondFactRelop]
                                          ) [CondFactFor]
                                          RSemiFor(
                                          ) [RSemiFor]
                                          DesignatorStatementListSecond(
                                            DesignatorStatementEnd(
                                            ) [DesignatorStatementEnd]
                                          ) [DesignatorStatementListSecond]
                                          RParenFor(
                                          ) [RParenFor]
                                          StatementStatementList(
                                            Statements(
                                              StatementIf(
                                                LParenIf(
                                                ) [LParenIf]
                                                OneCondTerm(
                                                  OneCondFact(
                                                    CondFactRelop(
                                                      ExprPositive(
                                                        AddopEnd(
                                                          Term(
                                                            MulopEnd(
                                                              FactorDesignator(
                                                                DesignatorIdent(
                                                                 i
                                                                ) [DesignatorIdent]
                                                              ) [FactorDesignator]
                                                            ) [MulopEnd]
                                                          ) [Term]
                                                        ) [AddopEnd]
                                                      ) [ExprPositive]
                                                      EqualTo(
                                                      ) [EqualTo]
                                                      ExprPositive(
                                                        AddopEnd(
                                                          Term(
                                                            MulopEnd(
                                                              FactorNum(
                                                               3
                                                              ) [FactorNum]
                                                            ) [MulopEnd]
                                                          ) [Term]
                                                        ) [AddopEnd]
                                                      ) [ExprPositive]
                                                    ) [CondFactRelop]
                                                  ) [OneCondFact]
                                                ) [OneCondTerm]
                                                RParenIf(
                                                ) [RParenIf]
                                                StatementStatementList(
                                                  Statements(
                                                    StatementDesignator(
                                                      DesignatorStatementMatched(
                                                        DesignatorStatementIncrement(
                                                          DesignatorIdent(
                                                           i
                                                          ) [DesignatorIdent]
                                                        ) [DesignatorStatementIncrement]
                                                      ) [DesignatorStatementMatched]
                                                    ) [StatementDesignator]
                                                    Statements(
                                                      StatementContinue(
                                                      ) [StatementContinue]
                                                      NoStatement(
                                                      ) [NoStatement]
                                                    ) [Statements]
                                                  ) [Statements]
                                                ) [StatementStatementList]
                                              ) [StatementIf]
                                              Statements(
                                                StatementIf(
                                                  LParenIf(
                                                  ) [LParenIf]
                                                  OneCondTerm(
                                                    OneCondFact(
                                                      CondFactRelop(
                                                        ExprPositive(
                                                          AddopEnd(
                                                            Term(
                                                              MulopEnd(
                                                                FactorDesignator(
                                                                  DesignatorIdent(
                                                                   i
                                                                  ) [DesignatorIdent]
                                                                ) [FactorDesignator]
                                                              ) [MulopEnd]
                                                            ) [Term]
                                                          ) [AddopEnd]
                                                        ) [ExprPositive]
                                                        EqualTo(
                                                        ) [EqualTo]
                                                        ExprPositive(
                                                          AddopEnd(
                                                            Term(
                                                              MulopEnd(
                                                                FactorNum(
                                                                 4
                                                                ) [FactorNum]
                                                              ) [MulopEnd]
                                                            ) [Term]
                                                          ) [AddopEnd]
                                                        ) [ExprPositive]
                                                      ) [CondFactRelop]
                                                    ) [OneCondFact]
                                                  ) [OneCondTerm]
                                                  RParenIf(
                                                  ) [RParenIf]
                                                  StatementBreak(
                                                  ) [StatementBreak]
                                                ) [StatementIf]
                                                Statements(
                                                  StatementDesignator(
                                                    DesignatorStatementMatched(
                                                      DesignatorStatementAssignop(
                                                        DesignatorIdent(
                                                         i
                                                        ) [DesignatorIdent]
                                                        Assignop(
                                                        ) [Assignop]
                                                        ExprPositive(
                                                          AddopEnd(
                                                            Term(
                                                              MulopEnd(
                                                                FactorDesignatorActPars(
                                                                  DesignatorIdent(
                                                                   inkrement
                                                                  ) [DesignatorIdent]
                                                                  ActualParsList(
                                                                    ActParsList(
                                                                      ActParsEnd(
                                                                        ExprPositive(
                                                                          AddopEnd(
                                                                            Term(
                                                                              MulopEnd(
                                                                                FactorDesignator(
                                                                                  DesignatorIdent(
                                                                                   i
                                                                                  ) [DesignatorIdent]
                                                                                ) [FactorDesignator]
                                                                              ) [MulopEnd]
                                                                            ) [Term]
                                                                          ) [AddopEnd]
                                                                        ) [ExprPositive]
                                                                      ) [ActParsEnd]
                                                                      ExprPositive(
                                                                        AddopEnd(
                                                                          Term(
                                                                            MulopEnd(
                                                                              FactorNum(
                                                                               1
                                                                              ) [FactorNum]
                                                                            ) [MulopEnd]
                                                                          ) [Term]
                                                                        ) [AddopEnd]
                                                                      ) [ExprPositive]
                                                                    ) [ActParsList]
                                                                  ) [ActualParsList]
                                                                ) [FactorDesignatorActPars]
                                                              ) [MulopEnd]
                                                            ) [Term]
                                                          ) [AddopEnd]
                                                        ) [ExprPositive]
                                                      ) [DesignatorStatementAssignop]
                                                    ) [DesignatorStatementMatched]
                                                  ) [StatementDesignator]
                                                  NoStatement(
                                                  ) [NoStatement]
                                                ) [Statements]
                                              ) [Statements]
                                            ) [Statements]
                                          ) [StatementStatementList]
                                        ) [StatementForCondFact]
                                        Statements(
                                          StatementIfElse(
                                            LParenIf(
                                            ) [LParenIf]
                                            OneCondTerm(
                                              CondTerms(
                                                OneCondFact(
                                                  CondFactRelop(
                                                    ExprPositive(
                                                      AddopEnd(
                                                        Term(
                                                          MulopEnd(
                                                            FactorDesignator(
                                                              DesignatorIdent(
                                                               i
                                                              ) [DesignatorIdent]
                                                            ) [FactorDesignator]
                                                          ) [MulopEnd]
                                                        ) [Term]
                                                      ) [AddopEnd]
                                                    ) [ExprPositive]
                                                    EqualTo(
                                                    ) [EqualTo]
                                                    ExprPositive(
                                                      AddopEnd(
                                                        Term(
                                                          MulopEnd(
                                                            FactorNum(
                                                             3
                                                            ) [FactorNum]
                                                          ) [MulopEnd]
                                                        ) [Term]
                                                      ) [AddopEnd]
                                                    ) [ExprPositive]
                                                  ) [CondFactRelop]
                                                ) [OneCondFact]
                                                CondFactExpr(
                                                  ExprPositive(
                                                    AddopEnd(
                                                      Term(
                                                        MulopEnd(
                                                          FactorDesignatorActPars(
                                                            DesignatorIdent(
                                                             verify
                                                            ) [DesignatorIdent]
                                                            NoActPars(
                                                            ) [NoActPars]
                                                          ) [FactorDesignatorActPars]
                                                        ) [MulopEnd]
                                                      ) [Term]
                                                    ) [AddopEnd]
                                                  ) [ExprPositive]
                                                ) [CondFactExpr]
                                              ) [CondTerms]
                                            ) [OneCondTerm]
                                            RParenIf(
                                            ) [RParenIf]
                                            StatementPrint(
                                              ExprNegativ(
                                                AddopEnd(
                                                  Term(
                                                    MulopEnd(
                                                      FactorNum(
                                                       4
                                                      ) [FactorNum]
                                                    ) [MulopEnd]
                                                  ) [Term]
                                                ) [AddopEnd]
                                              ) [ExprNegativ]
                                            ) [StatementPrint]
                                            ElseSt(
                                            ) [ElseSt]
                                            StatementPrint(
                                              ExprPositive(
                                                AddopEnd(
                                                  Term(
                                                    MulopEnd(
                                                      FactorNum(
                                                       4
                                                      ) [FactorNum]
                                                    ) [MulopEnd]
                                                  ) [Term]
                                                ) [AddopEnd]
                                              ) [ExprPositive]
                                            ) [StatementPrint]
                                          ) [StatementIfElse]
                                          NoStatement(
                                          ) [NoStatement]
                                        ) [Statements]
                                      ) [Statements]
                                    ) [Statements]
                                  ) [Statements]
                                ) [Statements]
                              ) [Statements]
                            ) [Statements]
                          ) [Statements]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [Statements]
                ) [Statements]
              ) [Statements]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  00:07:03,567 - ===================================
INFO  00:07:03,567 - Pocetak programa test302.
INFO  00:07:03,567 - Deklarisana je konstanta jedan na liniji 5
INFO  00:07:03,567 - Deklarisana je promenljiva i na liniji 7
INFO  00:07:03,568 - Deklarisana je promenljiva ibool na liniji 8
INFO  00:07:03,568 - Deklarisana je promenljiva niz2 na liniji 10
INFO  00:07:03,568 - Deklarisana je promenljiva niz na liniji 12
INFO  00:07:03,568 - Deklarisana je promenljiva niz_2 na liniji 12
INFO  00:07:03,568 - Deklarisana je promenljiva niz_3 na liniji 12
INFO  00:07:03,568 - Deklarisana je promenljiva a na liniji 13
INFO  00:07:03,568 - Obradjuje se funkcija sum na liniji 18
INFO  00:07:03,568 - Deklarisan je parametar funkcije z na liniji 18
INFO  00:07:03,568 - Deklarisan je parametar funkcije d na liniji 18
INFO  00:07:03,568 - Dobra povratna vrednost funkcije na liniji 20
INFO  00:07:03,568 - Obradjuje se funkcija inkrement na liniji 23
INFO  00:07:03,568 - Deklarisan je parametar funkcije a na liniji 23
INFO  00:07:03,569 - Deklarisan je parametar funkcije inc na liniji 23
INFO  00:07:03,569 - Deklarisana je promenljiva pom na liniji 24
INFO  00:07:03,569 - Designator i expr su odgovarajuceg tipa na liniji 26
INFO  00:07:03,569 - Designator i expr su odgovarajuceg tipa na liniji 27
INFO  00:07:03,569 - Pronadjen poziv funkcije sum na liniji 29
INFO  00:07:03,569 - Dobra povratna vrednost funkcije na liniji 29
INFO  00:07:03,569 - Obradjuje se funkcija verify na liniji 32
INFO  00:07:03,569 - Obradjena funkcija PRINT na liniji 33
INFO  00:07:03,569 - Dobra povratna vrednost funkcije na liniji 34
INFO  00:07:03,569 - Obradjuje se funkcija main na liniji 37
INFO  00:07:03,569 - Obradjena funkcija PRINT na liniji 39
INFO  00:07:03,569 - Obradjena funkcija PRINT na liniji 40
INFO  00:07:03,569 - Designator i expr su odgovarajuceg tipa na liniji 42
INFO  00:07:03,569 - Designator i expr su odgovarajuceg tipa na liniji 43
INFO  00:07:03,569 - Designator i expr su odgovarajuceg tipa na liniji 44
INFO  00:07:03,570 - Designator i expr su odgovarajuceg tipa na liniji 45
INFO  00:07:03,570 - Obradjena funkcija PRINT na liniji 50
INFO  00:07:03,570 - Obradjena funkcija PRINT na liniji 51
INFO  00:07:03,570 - Designator i expr su odgovarajuceg tipa na liniji 52
ERROR 00:07:03,571 - Greska: Ime niz ne predstavlja tip! na liniji 53
ERROR 00:07:03,571 - Greska na liniji 53 designator i expr nisu istog tipa
INFO  00:07:03,571 - Kreiran/promenjen element niza niz
INFO  00:07:03,571 - Designator i expr su odgovarajuceg tipa na liniji 55
INFO  00:07:03,571 - Kreiran/promenjen element niza niz
INFO  00:07:03,571 - Designator i expr su odgovarajuceg tipa na liniji 56
INFO  00:07:03,571 - Kreiran/promenjen element niza niz
INFO  00:07:03,571 - Kreiran/promenjen element niza niz
INFO  00:07:03,571 - Kreiran/promenjen element niza niz
INFO  00:07:03,571 - Pronadjen poziv funkcije sum na liniji 57
INFO  00:07:03,571 - Designator i expr su odgovarajuceg tipa na liniji 57
INFO  00:07:03,571 - Kreiran/promenjen element niza niz
INFO  00:07:03,571 - Obradjena funkcija PRINT na liniji 58
INFO  00:07:03,571 - Kreiran/promenjen element niza niz
INFO  00:07:03,571 - Obradjena funkcija PRINT na liniji 58
INFO  00:07:03,571 - Kreiran/promenjen element niza niz
INFO  00:07:03,571 - Obradjena funkcija PRINT na liniji 58
INFO  00:07:03,571 - Pronadjen poziv funkcije verify na liniji 59
INFO  00:07:03,571 - Kreiran/promenjen element niza niz
INFO  00:07:03,572 - Pronadjen poziv funkcije ord na liniji 59
INFO  00:07:03,572 - Obradjena funkcija PRINT na liniji 59
INFO  00:07:03,572 - Pronadjen poziv funkcije ord na liniji 60
INFO  00:07:03,572 - Obradjena funkcija PRINT na liniji 60
INFO  00:07:03,572 - Obradjena funkcija PRINT na liniji 62
INFO  00:07:03,572 - Designator i expr su odgovarajuceg tipa na liniji 63
INFO  00:07:03,572 - Designator i expr su odgovarajuceg tipa na liniji 64
INFO  00:07:03,572 - Pronadjen poziv funkcije inkrement na liniji 71
INFO  00:07:03,572 - Designator i expr su odgovarajuceg tipa na liniji 71
INFO  00:07:03,572 - Pronadjen poziv funkcije verify na liniji 74
INFO  00:07:03,572 - Obradjena funkcija PRINT na liniji 74
INFO  00:07:03,572 - Obradjena funkcija PRINT na liniji 75
INFO  00:07:03,572 - ===================================
ERROR 00:07:03,572 - Parsiranje NIJE uspesno zavrseno!
