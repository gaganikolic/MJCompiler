INFO  23:47:34,295 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  23:47:34,377 - #2 program
INFO  23:47:34,378 - #49 test302
INFO  23:47:34,378 - #6 const
INFO  23:47:34,379 - #49 int
INFO  23:47:34,380 - #49 jedan
INFO  23:47:34,381 - #7 =
INFO  23:47:34,381 - #48 1
INFO  23:47:34,381 - #8 ;
INFO  23:47:34,381 - #49 int
INFO  23:47:34,382 - #49 i
INFO  23:47:34,382 - #8 ;
INFO  23:49:24,498 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  23:49:24,566 - #2 program
INFO  23:49:24,566 - #49 test302
INFO  23:49:24,566 - #6 const
INFO  23:49:24,568 - #49 int
INFO  23:49:24,568 - #49 jedan
INFO  23:49:24,571 - #7 =
INFO  23:49:24,571 - #48 1
INFO  23:49:24,571 - #8 ;
INFO  23:49:24,572 - #49 int
INFO  23:49:24,572 - #49 i
INFO  23:49:24,572 - #8 ;
INFO  23:49:24,573 - #49 bool
INFO  23:49:24,573 - #49 ibool
INFO  23:49:24,573 - #8 ;
INFO  23:49:24,573 - #49 int
INFO  23:49:24,574 - #49 niz2
INFO  23:49:24,574 - #8 ;
INFO  23:49:24,574 - #49 int
INFO  23:49:24,574 - #49 niz
INFO  23:49:24,574 - #10 [
INFO  23:49:24,574 - #11 ]
INFO  23:49:24,574 - #9 ,
INFO  23:49:24,574 - #49 niz_2
INFO  23:49:24,574 - #10 [
INFO  23:49:24,574 - #11 ]
INFO  23:49:24,574 - #9 ,
INFO  23:49:24,574 - #49 niz_3
INFO  23:49:24,574 - #10 [
INFO  23:49:24,575 - #11 ]
INFO  23:49:24,575 - #8 ;
INFO  23:49:24,575 - #49 int
INFO  23:49:24,575 - #49 a
INFO  23:49:24,575 - #8 ;
INFO  23:49:24,575 - #4 {
INFO  23:49:24,575 - #49 int
INFO  23:49:24,576 - #49 sum
INFO  23:49:24,576 - #20 (
INFO  23:49:24,576 - #49 int
INFO  23:49:24,576 - #49 z
INFO  23:49:24,576 - #9 ,
INFO  23:49:24,576 - #49 int
INFO  23:49:24,576 - #49 d
INFO  23:49:24,577 - #21 )
INFO  23:49:24,577 - #4 {
INFO  23:49:24,577 - #18 return
INFO  23:49:24,577 - #49 z
INFO  23:49:24,577 - #37 +
INFO  23:49:24,578 - #49 d
INFO  23:49:24,579 - #8 ;
INFO  23:49:24,580 - #5 }
INFO  23:49:24,580 - #49 int
INFO  23:49:24,582 - #49 inkrement
INFO  23:49:24,582 - #20 (
INFO  23:49:24,582 - #49 int
INFO  23:49:24,582 - #49 a
INFO  23:49:24,582 - #9 ,
INFO  23:49:24,582 - #49 int
INFO  23:49:24,582 - #49 inc
INFO  23:49:24,582 - #21 )
INFO  23:49:24,582 - #49 int
INFO  23:49:24,582 - #49 pom
INFO  23:49:24,582 - #8 ;
INFO  23:49:24,582 - #4 {
INFO  23:49:24,582 - #18 return
INFO  23:49:24,583 - #49 sum
INFO  23:49:24,583 - #20 (
INFO  23:49:24,583 - #49 a
INFO  23:49:24,583 - #9 ,
INFO  23:49:24,583 - #49 inc
INFO  23:49:24,583 - #21 )
INFO  23:49:24,583 - #8 ;
INFO  23:49:24,584 - #5 }
INFO  23:49:24,584 - #49 bool
INFO  23:49:24,584 - #49 verify
INFO  23:49:24,584 - #20 (
INFO  23:49:24,584 - #21 )
INFO  23:49:24,585 - #4 {
INFO  23:49:24,585 - #22 print
INFO  23:49:24,585 - #20 (
INFO  23:49:24,585 - #50 v
INFO  23:49:24,585 - #21 )
INFO  23:49:24,585 - #8 ;
INFO  23:49:24,585 - #18 return
INFO  23:49:24,585 - #51 false
INFO  23:49:24,585 - #8 ;
INFO  23:49:24,585 - #5 }
INFO  23:49:24,586 - #41 void
INFO  23:49:24,586 - #49 main
INFO  23:49:24,586 - #20 (
INFO  23:49:24,586 - #21 )
INFO  23:49:24,586 - #4 {
INFO  23:49:24,586 - #49 i
INFO  23:49:24,586 - #7 =
INFO  23:49:24,586 - #48 0
INFO  23:49:24,587 - #8 ;
INFO  23:49:24,588 - #23 for
INFO  23:49:24,588 - #20 (
INFO  23:49:24,589 - #49 i
INFO  23:49:24,589 - #7 =
INFO  23:49:24,589 - #48 0
INFO  23:49:24,589 - #8 ;
INFO  23:49:24,589 - #49 i
INFO  23:49:24,590 - #35 <
INFO  23:49:24,590 - #48 10
INFO  23:49:24,591 - #8 ;
INFO  23:49:24,592 - #21 )
INFO  23:49:24,594 - #4 {
INFO  23:49:24,595 - #14 if
INFO  23:49:24,595 - #20 (
INFO  23:49:24,595 - #49 i
INFO  23:49:24,596 - #32 !=
INFO  23:49:24,596 - #48 3
INFO  23:49:24,597 - #21 )
INFO  23:49:24,597 - #4 {
INFO  23:49:24,598 - #49 i
INFO  23:49:24,598 - #24 ++
INFO  23:49:24,598 - #8 ;
INFO  23:49:24,598 - #17 continue
INFO  23:49:24,598 - #8 ;
INFO  23:49:24,598 - #5 }
INFO  23:49:24,599 - #15 else
INFO  23:49:24,599 - #4 {
INFO  23:49:24,600 - #22 print
INFO  23:49:24,600 - #20 (
INFO  23:49:24,600 - #49 i
INFO  23:49:24,600 - #21 )
INFO  23:49:24,600 - #8 ;
INFO  23:49:24,600 - #5 }
INFO  23:49:24,600 - #5 }
INFO  23:49:24,601 - #5 }
INFO  23:49:24,601 - #5 }
INFO  23:49:24,618 - Program(
  ProgramName(
   test302
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstNum(
                     jedan
                     1
                    ) [ConstNum]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               bool
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   ibool
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 niz2
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarations(
            VarArr(
              VarName(
               niz
              ) [VarName]
            ) [VarArr]
            VarDeclarations(
              VarArr(
                VarName(
                 niz_2
                ) [VarName]
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                  VarName(
                   niz_3
                  ) [VarName]
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarations]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarationsEnd(
          VarIdent(
            VarName(
             a
            ) [VarName]
          ) [VarIdent]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        MethodDeclarationList(
          NoMethodDeclaration(
          ) [NoMethodDeclaration]
          MethodDecl(
            MethodNameAnyType(
              Type(
               int
              ) [Type]
             sum
            ) [MethodNameAnyType]
            MethodParameters(
              FormParsList(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 z
                ) [FormParsVar]
                FormParsEnd(
                  FormParsVar(
                    Type(
                     int
                    ) [Type]
                   d
                  ) [FormParsVar]
                ) [FormParsEnd]
              ) [FormParsList]
            ) [MethodParameters]
            NoDeclarations(
            ) [NoDeclarations]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopList(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             z
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           d
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [MethodDecl]
        ) [MethodDeclarationList]
        MethodDecl(
          MethodNameAnyType(
            Type(
             int
            ) [Type]
           inkrement
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsList(
              FormParsVar(
                Type(
                 int
                ) [Type]
               a
              ) [FormParsVar]
              FormParsEnd(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 inc
                ) [FormParsVar]
              ) [FormParsEnd]
            ) [FormParsList]
          ) [MethodParameters]
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     pom
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignatorActPars(
                        DesignatorIdent(
                         sum
                        ) [DesignatorIdent]
                        ActualParsList(
                          ActParsList(
                            ActParsEnd(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         a
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ActParsEnd]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       inc
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ActParsList]
                        ) [ActualParsList]
                      ) [FactorDesignatorActPars]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         verify
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        NoDeclarations(
        ) [NoDeclarations]
        Statements(
          StatementPrint(
            ExprPositive(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorChar(
                     v
                    ) [FactorChar]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprPositive]
          ) [StatementPrint]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorBool(
                       false
                      ) [FactorBool]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      NoDeclarations(
      ) [NoDeclarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementForCondFact(
            ForSt(
            ) [ForSt]
            DesignatorStatementOne(
              DesignatorStatementMatched(
                DesignatorStatementAssignop(
                  DesignatorIdent(
                   i
                  ) [DesignatorIdent]
                  Assignop(
                  ) [Assignop]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementMatched]
            ) [DesignatorStatementOne]
            LSemiFor(
            ) [LSemiFor]
            CondFactFor(
              CondFactRelop(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           i
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
                Less(
                ) [Less]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         10
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [CondFactRelop]
            ) [CondFactFor]
            RSemiFor(
            ) [RSemiFor]
            DesignatorStatementListSecond(
              DesignatorStatementEnd(
              ) [DesignatorStatementEnd]
            ) [DesignatorStatementListSecond]
            RParenFor(
            ) [RParenFor]
            StatementStatementList(
              Statements(
                StatementIfElse(
                  LParenIf(
                  ) [LParenIf]
                  OneCondTerm(
                    OneCondFact(
                      CondFactRelop(
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorDesignator(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [FactorDesignator]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                        NotEqualTo(
                        ) [NotEqualTo]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorNum(
                                 3
                                ) [FactorNum]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [CondFactRelop]
                    ) [OneCondFact]
                  ) [OneCondTerm]
                  RParenIf(
                  ) [RParenIf]
                  StatementStatementList(
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementIncrement(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [DesignatorStatementIncrement]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementContinue(
                        ) [StatementContinue]
                        NoStatement(
                        ) [NoStatement]
                      ) [Statements]
                    ) [Statements]
                  ) [StatementStatementList]
                  ElseSt(
                  ) [ElseSt]
                  StatementStatementList(
                    Statements(
                      StatementPrint(
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorDesignator(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [FactorDesignator]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [StatementPrint]
                      NoStatement(
                      ) [NoStatement]
                    ) [Statements]
                  ) [StatementStatementList]
                ) [StatementIfElse]
                NoStatement(
                ) [NoStatement]
              ) [Statements]
            ) [StatementStatementList]
          ) [StatementForCondFact]
          NoStatement(
          ) [NoStatement]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  23:49:24,618 - ===================================
INFO  23:49:24,618 - Pocetak programa test302.
INFO  23:49:24,618 - Deklarisana je konstanta jedan na liniji 5
INFO  23:49:24,619 - Deklarisana je promenljiva i na liniji 7
INFO  23:49:24,619 - Deklarisana je promenljiva ibool na liniji 8
INFO  23:49:24,619 - Deklarisana je promenljiva niz2 na liniji 10
INFO  23:49:24,619 - Deklarisana je promenljiva niz na liniji 12
INFO  23:49:24,619 - Deklarisana je promenljiva niz_2 na liniji 12
INFO  23:49:24,619 - Deklarisana je promenljiva niz_3 na liniji 12
INFO  23:49:24,619 - Deklarisana je promenljiva a na liniji 13
INFO  23:49:24,619 - Obradjuje se funkcija sum na liniji 18
INFO  23:49:24,619 - Deklarisan je parametar funkcije z na liniji 18
INFO  23:49:24,619 - Deklarisan je parametar funkcije d na liniji 18
INFO  23:49:24,619 - Dobra povratna vrednost funkcije na liniji 20
INFO  23:49:24,619 - Obradjuje se funkcija inkrement na liniji 23
INFO  23:49:24,619 - Deklarisan je parametar funkcije a na liniji 23
INFO  23:49:24,620 - Deklarisan je parametar funkcije inc na liniji 23
INFO  23:49:24,620 - Deklarisana je promenljiva pom na liniji 24
INFO  23:49:24,620 - Pronadjen poziv funkcije sum na liniji 28
INFO  23:49:24,620 - Dobra povratna vrednost funkcije na liniji 28
INFO  23:49:24,620 - Obradjuje se funkcija verify na liniji 31
INFO  23:49:24,620 - Obradjena funkcija PRINT na liniji 32
INFO  23:49:24,620 - Dobra povratna vrednost funkcije na liniji 33
INFO  23:49:24,620 - Obradjuje se funkcija main na liniji 36
INFO  23:49:24,620 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  23:49:24,620 - Designator i expr su odgovarajuceg tipa na liniji 42
INFO  23:49:24,620 - Obradjena funkcija PRINT na liniji 49
INFO  23:49:24,621 - ===================================
INFO  23:49:33,817 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  23:49:33,956 - #2 program
INFO  23:49:33,956 - #49 test302
INFO  23:49:33,957 - #6 const
INFO  23:49:33,959 - #49 int
INFO  23:49:33,960 - #49 jedan
INFO  23:49:33,961 - #7 =
INFO  23:49:33,961 - #48 1
INFO  23:49:33,961 - #8 ;
INFO  23:49:33,962 - #49 int
INFO  23:49:33,962 - #49 i
INFO  23:49:33,962 - #8 ;
INFO  23:49:33,964 - #49 bool
INFO  23:49:33,965 - #49 ibool
INFO  23:49:33,965 - #8 ;
INFO  23:49:33,965 - #49 int
INFO  23:49:33,965 - #49 niz2
INFO  23:49:33,965 - #8 ;
INFO  23:49:33,965 - #49 int
INFO  23:49:33,965 - #49 niz
INFO  23:49:33,966 - #10 [
INFO  23:49:33,966 - #11 ]
INFO  23:49:33,966 - #9 ,
INFO  23:49:33,966 - #49 niz_2
INFO  23:49:33,966 - #10 [
INFO  23:49:33,966 - #11 ]
INFO  23:49:33,966 - #9 ,
INFO  23:49:33,966 - #49 niz_3
INFO  23:49:33,967 - #10 [
INFO  23:49:33,967 - #11 ]
INFO  23:49:33,967 - #8 ;
INFO  23:49:33,967 - #49 int
INFO  23:49:33,967 - #49 a
INFO  23:49:33,967 - #8 ;
INFO  23:49:33,967 - #4 {
INFO  23:49:33,967 - #49 int
INFO  23:49:33,969 - #49 sum
INFO  23:49:33,969 - #20 (
INFO  23:49:33,970 - #49 int
INFO  23:49:33,970 - #49 z
INFO  23:49:33,970 - #9 ,
INFO  23:49:33,970 - #49 int
INFO  23:49:33,970 - #49 d
INFO  23:49:33,970 - #21 )
INFO  23:49:33,971 - #4 {
INFO  23:49:33,971 - #18 return
INFO  23:49:33,971 - #49 z
INFO  23:49:33,971 - #37 +
INFO  23:49:33,973 - #49 d
INFO  23:49:33,975 - #8 ;
INFO  23:49:33,976 - #5 }
INFO  23:49:33,978 - #49 int
INFO  23:49:33,980 - #49 inkrement
INFO  23:49:33,980 - #20 (
INFO  23:49:33,980 - #49 int
INFO  23:49:33,980 - #49 a
INFO  23:49:33,980 - #9 ,
INFO  23:49:33,980 - #49 int
INFO  23:49:33,980 - #49 inc
INFO  23:49:33,980 - #21 )
INFO  23:49:33,980 - #49 int
INFO  23:49:33,980 - #49 pom
INFO  23:49:33,980 - #8 ;
INFO  23:49:33,981 - #4 {
INFO  23:49:33,981 - #18 return
INFO  23:49:33,981 - #49 sum
INFO  23:49:33,981 - #20 (
INFO  23:49:33,981 - #49 a
INFO  23:49:33,981 - #9 ,
INFO  23:49:33,981 - #49 inc
INFO  23:49:33,981 - #21 )
INFO  23:49:33,982 - #8 ;
INFO  23:49:33,982 - #5 }
INFO  23:49:33,982 - #49 bool
INFO  23:49:33,982 - #49 verify
INFO  23:49:33,982 - #20 (
INFO  23:49:33,983 - #21 )
INFO  23:49:33,984 - #4 {
INFO  23:49:33,984 - #22 print
INFO  23:49:33,984 - #20 (
INFO  23:49:33,984 - #50 v
INFO  23:49:33,984 - #21 )
INFO  23:49:33,985 - #8 ;
INFO  23:49:33,985 - #18 return
INFO  23:49:33,985 - #51 false
INFO  23:49:33,985 - #8 ;
INFO  23:49:33,985 - #5 }
INFO  23:49:33,986 - #41 void
INFO  23:49:33,986 - #49 main
INFO  23:49:33,986 - #20 (
INFO  23:49:33,986 - #21 )
INFO  23:49:33,986 - #4 {
INFO  23:49:33,986 - #49 i
INFO  23:49:33,986 - #7 =
INFO  23:49:33,986 - #48 0
INFO  23:49:33,988 - #8 ;
INFO  23:49:33,989 - #23 for
INFO  23:49:33,989 - #20 (
INFO  23:49:33,990 - #49 i
INFO  23:49:33,990 - #7 =
INFO  23:49:33,990 - #48 0
INFO  23:49:33,991 - #8 ;
INFO  23:49:33,991 - #49 i
INFO  23:49:33,992 - #35 <
INFO  23:49:33,993 - #48 10
INFO  23:49:33,995 - #8 ;
INFO  23:49:33,996 - #21 )
INFO  23:49:33,999 - #4 {
INFO  23:49:34,001 - #14 if
INFO  23:49:34,001 - #20 (
INFO  23:49:34,002 - #49 i
INFO  23:49:34,003 - #32 !=
INFO  23:49:34,003 - #48 3
INFO  23:49:34,004 - #21 )
INFO  23:49:34,006 - #4 {
INFO  23:49:34,007 - #49 i
INFO  23:49:34,007 - #24 ++
INFO  23:49:34,008 - #8 ;
INFO  23:49:34,008 - #17 continue
INFO  23:49:34,008 - #8 ;
INFO  23:49:34,008 - #5 }
INFO  23:49:34,009 - #15 else
INFO  23:49:34,010 - #4 {
INFO  23:49:34,011 - #22 print
INFO  23:49:34,011 - #20 (
INFO  23:49:34,011 - #49 i
INFO  23:49:34,011 - #21 )
INFO  23:49:34,012 - #8 ;
INFO  23:49:34,012 - #5 }
INFO  23:49:34,012 - #5 }
INFO  23:49:34,012 - #5 }
INFO  23:49:34,013 - #5 }
INFO  23:49:34,050 - Program(
  ProgramName(
   test302
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstNum(
                     jedan
                     1
                    ) [ConstNum]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               bool
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   ibool
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 niz2
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarations(
            VarArr(
              VarName(
               niz
              ) [VarName]
            ) [VarArr]
            VarDeclarations(
              VarArr(
                VarName(
                 niz_2
                ) [VarName]
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                  VarName(
                   niz_3
                  ) [VarName]
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarations]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarationsEnd(
          VarIdent(
            VarName(
             a
            ) [VarName]
          ) [VarIdent]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        MethodDeclarationList(
          NoMethodDeclaration(
          ) [NoMethodDeclaration]
          MethodDecl(
            MethodNameAnyType(
              Type(
               int
              ) [Type]
             sum
            ) [MethodNameAnyType]
            MethodParameters(
              FormParsList(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 z
                ) [FormParsVar]
                FormParsEnd(
                  FormParsVar(
                    Type(
                     int
                    ) [Type]
                   d
                  ) [FormParsVar]
                ) [FormParsEnd]
              ) [FormParsList]
            ) [MethodParameters]
            NoDeclarations(
            ) [NoDeclarations]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopList(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             z
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           d
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [MethodDecl]
        ) [MethodDeclarationList]
        MethodDecl(
          MethodNameAnyType(
            Type(
             int
            ) [Type]
           inkrement
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsList(
              FormParsVar(
                Type(
                 int
                ) [Type]
               a
              ) [FormParsVar]
              FormParsEnd(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 inc
                ) [FormParsVar]
              ) [FormParsEnd]
            ) [FormParsList]
          ) [MethodParameters]
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     pom
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignatorActPars(
                        DesignatorIdent(
                         sum
                        ) [DesignatorIdent]
                        ActualParsList(
                          ActParsList(
                            ActParsEnd(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         a
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ActParsEnd]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       inc
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ActParsList]
                        ) [ActualParsList]
                      ) [FactorDesignatorActPars]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         verify
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        NoDeclarations(
        ) [NoDeclarations]
        Statements(
          StatementPrint(
            ExprPositive(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorChar(
                     v
                    ) [FactorChar]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprPositive]
          ) [StatementPrint]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorBool(
                       false
                      ) [FactorBool]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      NoDeclarations(
      ) [NoDeclarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementForCondFact(
            ForSt(
            ) [ForSt]
            DesignatorStatementOne(
              DesignatorStatementMatched(
                DesignatorStatementAssignop(
                  DesignatorIdent(
                   i
                  ) [DesignatorIdent]
                  Assignop(
                  ) [Assignop]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementMatched]
            ) [DesignatorStatementOne]
            LSemiFor(
            ) [LSemiFor]
            CondFactFor(
              CondFactRelop(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           i
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
                Less(
                ) [Less]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         10
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [CondFactRelop]
            ) [CondFactFor]
            RSemiFor(
            ) [RSemiFor]
            DesignatorStatementListSecond(
              DesignatorStatementEnd(
              ) [DesignatorStatementEnd]
            ) [DesignatorStatementListSecond]
            RParenFor(
            ) [RParenFor]
            StatementStatementList(
              Statements(
                StatementIfElse(
                  LParenIf(
                  ) [LParenIf]
                  OneCondTerm(
                    OneCondFact(
                      CondFactRelop(
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorDesignator(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [FactorDesignator]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                        NotEqualTo(
                        ) [NotEqualTo]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorNum(
                                 3
                                ) [FactorNum]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [CondFactRelop]
                    ) [OneCondFact]
                  ) [OneCondTerm]
                  RParenIf(
                  ) [RParenIf]
                  StatementStatementList(
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementIncrement(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [DesignatorStatementIncrement]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementContinue(
                        ) [StatementContinue]
                        NoStatement(
                        ) [NoStatement]
                      ) [Statements]
                    ) [Statements]
                  ) [StatementStatementList]
                  ElseSt(
                  ) [ElseSt]
                  StatementStatementList(
                    Statements(
                      StatementPrint(
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorDesignator(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [FactorDesignator]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [StatementPrint]
                      NoStatement(
                      ) [NoStatement]
                    ) [Statements]
                  ) [StatementStatementList]
                ) [StatementIfElse]
                NoStatement(
                ) [NoStatement]
              ) [Statements]
            ) [StatementStatementList]
          ) [StatementForCondFact]
          NoStatement(
          ) [NoStatement]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  23:49:34,051 - ===================================
INFO  23:49:34,052 - Pocetak programa test302.
INFO  23:49:34,052 - Deklarisana je konstanta jedan na liniji 5
INFO  23:49:34,052 - Deklarisana je promenljiva i na liniji 7
INFO  23:49:34,052 - Deklarisana je promenljiva ibool na liniji 8
INFO  23:49:34,052 - Deklarisana je promenljiva niz2 na liniji 10
INFO  23:49:34,052 - Deklarisana je promenljiva niz na liniji 12
INFO  23:49:34,053 - Deklarisana je promenljiva niz_2 na liniji 12
INFO  23:49:34,053 - Deklarisana je promenljiva niz_3 na liniji 12
INFO  23:49:34,053 - Deklarisana je promenljiva a na liniji 13
INFO  23:49:34,053 - Obradjuje se funkcija sum na liniji 18
INFO  23:49:34,053 - Deklarisan je parametar funkcije z na liniji 18
INFO  23:49:34,054 - Deklarisan je parametar funkcije d na liniji 18
INFO  23:49:34,054 - Dobra povratna vrednost funkcije na liniji 20
INFO  23:49:34,054 - Obradjuje se funkcija inkrement na liniji 23
INFO  23:49:34,054 - Deklarisan je parametar funkcije a na liniji 23
INFO  23:49:34,054 - Deklarisan je parametar funkcije inc na liniji 23
INFO  23:49:34,054 - Deklarisana je promenljiva pom na liniji 24
INFO  23:49:34,055 - Pronadjen poziv funkcije sum na liniji 28
INFO  23:49:34,055 - Dobra povratna vrednost funkcije na liniji 28
INFO  23:49:34,055 - Obradjuje se funkcija verify na liniji 31
INFO  23:49:34,056 - Obradjena funkcija PRINT na liniji 32
INFO  23:49:34,056 - Dobra povratna vrednost funkcije na liniji 33
INFO  23:49:34,056 - Obradjuje se funkcija main na liniji 36
INFO  23:49:34,056 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  23:49:34,057 - Designator i expr su odgovarajuceg tipa na liniji 42
INFO  23:49:34,057 - Obradjena funkcija PRINT na liniji 49
INFO  23:49:34,058 - ===================================
INFO  23:49:48,609 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  23:49:48,658 - #2 program
INFO  23:49:48,658 - #49 test302
INFO  23:49:48,658 - #6 const
INFO  23:49:48,659 - #49 int
INFO  23:49:48,659 - #49 jedan
INFO  23:49:48,660 - #7 =
INFO  23:49:48,660 - #48 1
INFO  23:49:48,660 - #8 ;
INFO  23:49:48,660 - #49 int
INFO  23:49:48,661 - #49 i
INFO  23:49:48,661 - #8 ;
INFO  23:49:48,661 - #49 bool
INFO  23:49:48,662 - #49 ibool
INFO  23:49:48,662 - #8 ;
INFO  23:49:48,662 - #49 int
INFO  23:49:48,662 - #49 niz2
INFO  23:49:48,662 - #8 ;
INFO  23:49:48,662 - #49 int
INFO  23:49:48,662 - #49 niz
INFO  23:49:48,662 - #10 [
INFO  23:49:48,662 - #11 ]
INFO  23:49:48,662 - #9 ,
INFO  23:49:48,663 - #49 niz_2
INFO  23:49:48,663 - #10 [
INFO  23:49:48,663 - #11 ]
INFO  23:49:48,663 - #9 ,
INFO  23:49:48,663 - #49 niz_3
INFO  23:49:48,663 - #10 [
INFO  23:49:48,663 - #11 ]
INFO  23:49:48,663 - #8 ;
INFO  23:49:48,663 - #49 int
INFO  23:49:48,663 - #49 a
INFO  23:49:48,663 - #8 ;
INFO  23:49:48,664 - #4 {
INFO  23:49:48,664 - #49 int
INFO  23:49:48,664 - #49 sum
INFO  23:49:48,665 - #20 (
INFO  23:49:48,665 - #49 int
INFO  23:49:48,665 - #49 z
INFO  23:49:48,665 - #9 ,
INFO  23:49:48,665 - #49 int
INFO  23:49:48,666 - #49 d
INFO  23:49:48,666 - #21 )
INFO  23:49:48,666 - #4 {
INFO  23:49:48,667 - #18 return
INFO  23:49:48,667 - #49 z
INFO  23:49:48,667 - #37 +
INFO  23:49:48,668 - #49 d
INFO  23:49:48,669 - #8 ;
INFO  23:49:48,670 - #5 }
INFO  23:49:48,670 - #49 int
INFO  23:49:48,671 - #49 inkrement
INFO  23:49:48,671 - #20 (
INFO  23:49:48,671 - #49 int
INFO  23:49:48,671 - #49 a
INFO  23:49:48,672 - #9 ,
INFO  23:49:48,672 - #49 int
INFO  23:49:48,672 - #49 inc
INFO  23:49:48,672 - #21 )
INFO  23:49:48,672 - #49 int
INFO  23:49:48,672 - #49 pom
INFO  23:49:48,672 - #8 ;
INFO  23:49:48,672 - #4 {
INFO  23:49:48,672 - #18 return
INFO  23:49:48,672 - #49 sum
INFO  23:49:48,672 - #20 (
INFO  23:49:48,672 - #49 a
INFO  23:49:48,672 - #9 ,
INFO  23:49:48,672 - #49 inc
INFO  23:49:48,672 - #21 )
INFO  23:49:48,673 - #8 ;
INFO  23:49:48,673 - #5 }
INFO  23:49:48,673 - #49 bool
INFO  23:49:48,673 - #49 verify
INFO  23:49:48,673 - #20 (
INFO  23:49:48,673 - #21 )
INFO  23:49:48,674 - #4 {
INFO  23:49:48,674 - #22 print
INFO  23:49:48,674 - #20 (
INFO  23:49:48,674 - #50 v
INFO  23:49:48,674 - #21 )
INFO  23:49:48,674 - #8 ;
INFO  23:49:48,674 - #18 return
INFO  23:49:48,674 - #51 false
INFO  23:49:48,674 - #8 ;
INFO  23:49:48,675 - #5 }
INFO  23:49:48,675 - #41 void
INFO  23:49:48,675 - #49 main
INFO  23:49:48,675 - #20 (
INFO  23:49:48,675 - #21 )
INFO  23:49:48,675 - #4 {
INFO  23:49:48,675 - #49 i
INFO  23:49:48,675 - #7 =
INFO  23:49:48,675 - #48 0
INFO  23:49:48,676 - #8 ;
INFO  23:49:48,676 - #23 for
INFO  23:49:48,676 - #20 (
INFO  23:49:48,677 - #49 i
INFO  23:49:48,677 - #7 =
INFO  23:49:48,677 - #48 0
INFO  23:49:48,677 - #8 ;
INFO  23:49:48,678 - #49 i
INFO  23:49:48,678 - #35 <
INFO  23:49:48,679 - #48 10
INFO  23:49:48,680 - #8 ;
INFO  23:49:48,680 - #21 )
INFO  23:49:48,682 - #4 {
INFO  23:49:48,683 - #14 if
INFO  23:49:48,683 - #20 (
INFO  23:49:48,683 - #49 i
INFO  23:49:48,684 - #32 !=
INFO  23:49:48,684 - #48 3
INFO  23:49:48,684 - #21 )
INFO  23:49:48,684 - #4 {
INFO  23:49:48,685 - #49 i
INFO  23:49:48,685 - #24 ++
INFO  23:49:48,685 - #8 ;
INFO  23:49:48,685 - #17 continue
INFO  23:49:48,685 - #8 ;
INFO  23:49:48,685 - #5 }
INFO  23:49:48,686 - #15 else
INFO  23:49:48,686 - #4 {
INFO  23:49:48,686 - #22 print
INFO  23:49:48,686 - #20 (
INFO  23:49:48,686 - #49 i
INFO  23:49:48,687 - #21 )
INFO  23:49:48,687 - #8 ;
INFO  23:49:48,687 - #5 }
INFO  23:49:48,687 - #5 }
INFO  23:49:48,687 - #5 }
INFO  23:49:48,687 - #5 }
INFO  23:49:48,696 - Program(
  ProgramName(
   test302
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstNum(
                     jedan
                     1
                    ) [ConstNum]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               bool
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   ibool
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 niz2
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarations(
            VarArr(
              VarName(
               niz
              ) [VarName]
            ) [VarArr]
            VarDeclarations(
              VarArr(
                VarName(
                 niz_2
                ) [VarName]
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                  VarName(
                   niz_3
                  ) [VarName]
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarations]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarationsEnd(
          VarIdent(
            VarName(
             a
            ) [VarName]
          ) [VarIdent]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        MethodDeclarationList(
          NoMethodDeclaration(
          ) [NoMethodDeclaration]
          MethodDecl(
            MethodNameAnyType(
              Type(
               int
              ) [Type]
             sum
            ) [MethodNameAnyType]
            MethodParameters(
              FormParsList(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 z
                ) [FormParsVar]
                FormParsEnd(
                  FormParsVar(
                    Type(
                     int
                    ) [Type]
                   d
                  ) [FormParsVar]
                ) [FormParsEnd]
              ) [FormParsList]
            ) [MethodParameters]
            NoDeclarations(
            ) [NoDeclarations]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopList(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             z
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           d
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [MethodDecl]
        ) [MethodDeclarationList]
        MethodDecl(
          MethodNameAnyType(
            Type(
             int
            ) [Type]
           inkrement
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsList(
              FormParsVar(
                Type(
                 int
                ) [Type]
               a
              ) [FormParsVar]
              FormParsEnd(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 inc
                ) [FormParsVar]
              ) [FormParsEnd]
            ) [FormParsList]
          ) [MethodParameters]
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     pom
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignatorActPars(
                        DesignatorIdent(
                         sum
                        ) [DesignatorIdent]
                        ActualParsList(
                          ActParsList(
                            ActParsEnd(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         a
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ActParsEnd]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       inc
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ActParsList]
                        ) [ActualParsList]
                      ) [FactorDesignatorActPars]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         verify
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        NoDeclarations(
        ) [NoDeclarations]
        Statements(
          StatementPrint(
            ExprPositive(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorChar(
                     v
                    ) [FactorChar]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprPositive]
          ) [StatementPrint]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorBool(
                       false
                      ) [FactorBool]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      NoDeclarations(
      ) [NoDeclarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementForCondFact(
            ForSt(
            ) [ForSt]
            DesignatorStatementOne(
              DesignatorStatementMatched(
                DesignatorStatementAssignop(
                  DesignatorIdent(
                   i
                  ) [DesignatorIdent]
                  Assignop(
                  ) [Assignop]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementMatched]
            ) [DesignatorStatementOne]
            LSemiFor(
            ) [LSemiFor]
            CondFactFor(
              CondFactRelop(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           i
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
                Less(
                ) [Less]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         10
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [CondFactRelop]
            ) [CondFactFor]
            RSemiFor(
            ) [RSemiFor]
            DesignatorStatementListSecond(
              DesignatorStatementEnd(
              ) [DesignatorStatementEnd]
            ) [DesignatorStatementListSecond]
            RParenFor(
            ) [RParenFor]
            StatementStatementList(
              Statements(
                StatementIfElse(
                  LParenIf(
                  ) [LParenIf]
                  OneCondTerm(
                    OneCondFact(
                      CondFactRelop(
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorDesignator(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [FactorDesignator]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                        NotEqualTo(
                        ) [NotEqualTo]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorNum(
                                 3
                                ) [FactorNum]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [CondFactRelop]
                    ) [OneCondFact]
                  ) [OneCondTerm]
                  RParenIf(
                  ) [RParenIf]
                  StatementStatementList(
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementIncrement(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [DesignatorStatementIncrement]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementContinue(
                        ) [StatementContinue]
                        NoStatement(
                        ) [NoStatement]
                      ) [Statements]
                    ) [Statements]
                  ) [StatementStatementList]
                  ElseSt(
                  ) [ElseSt]
                  StatementStatementList(
                    Statements(
                      StatementPrint(
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorDesignator(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [FactorDesignator]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [StatementPrint]
                      NoStatement(
                      ) [NoStatement]
                    ) [Statements]
                  ) [StatementStatementList]
                ) [StatementIfElse]
                NoStatement(
                ) [NoStatement]
              ) [Statements]
            ) [StatementStatementList]
          ) [StatementForCondFact]
          NoStatement(
          ) [NoStatement]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  23:49:48,697 - ===================================
INFO  23:49:48,697 - Pocetak programa test302.
INFO  23:49:48,697 - Deklarisana je konstanta jedan na liniji 5
INFO  23:49:48,697 - Deklarisana je promenljiva i na liniji 7
INFO  23:49:48,697 - Deklarisana je promenljiva ibool na liniji 8
INFO  23:49:48,697 - Deklarisana je promenljiva niz2 na liniji 10
INFO  23:49:48,697 - Deklarisana je promenljiva niz na liniji 12
INFO  23:49:48,697 - Deklarisana je promenljiva niz_2 na liniji 12
INFO  23:49:48,697 - Deklarisana je promenljiva niz_3 na liniji 12
INFO  23:49:48,697 - Deklarisana je promenljiva a na liniji 13
INFO  23:49:48,698 - Obradjuje se funkcija sum na liniji 18
INFO  23:49:48,698 - Deklarisan je parametar funkcije z na liniji 18
INFO  23:49:48,698 - Deklarisan je parametar funkcije d na liniji 18
INFO  23:49:48,698 - Dobra povratna vrednost funkcije na liniji 20
INFO  23:49:48,698 - Obradjuje se funkcija inkrement na liniji 23
INFO  23:49:48,698 - Deklarisan je parametar funkcije a na liniji 23
INFO  23:49:48,698 - Deklarisan je parametar funkcije inc na liniji 23
INFO  23:49:48,698 - Deklarisana je promenljiva pom na liniji 24
INFO  23:49:48,698 - Pronadjen poziv funkcije sum na liniji 28
INFO  23:49:48,698 - Dobra povratna vrednost funkcije na liniji 28
INFO  23:49:48,698 - Obradjuje se funkcija verify na liniji 31
INFO  23:49:48,698 - Obradjena funkcija PRINT na liniji 32
INFO  23:49:48,698 - Dobra povratna vrednost funkcije na liniji 33
INFO  23:49:48,699 - Obradjuje se funkcija main na liniji 36
INFO  23:49:48,699 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  23:49:48,699 - Designator i expr su odgovarajuceg tipa na liniji 42
INFO  23:49:48,699 - Obradjena funkcija PRINT na liniji 49
INFO  23:49:48,699 - ===================================
INFO  23:49:48,706 - Parsiranje uspesno zavrseno!
INFO  23:50:41,951 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  23:50:42,086 - #2 program
INFO  23:50:42,086 - #49 test302
INFO  23:50:42,086 - #6 const
INFO  23:50:42,089 - #49 int
INFO  23:50:42,089 - #49 jedan
INFO  23:50:42,091 - #7 =
INFO  23:50:42,091 - #48 1
INFO  23:50:42,091 - #8 ;
INFO  23:50:42,091 - #49 int
INFO  23:50:42,092 - #49 i
INFO  23:50:42,092 - #8 ;
INFO  23:50:42,094 - #49 bool
INFO  23:50:42,094 - #49 ibool
INFO  23:50:42,094 - #8 ;
INFO  23:50:42,094 - #49 int
INFO  23:50:42,094 - #49 niz2
INFO  23:50:42,095 - #8 ;
INFO  23:50:42,095 - #49 int
INFO  23:50:42,095 - #49 niz
INFO  23:50:42,095 - #10 [
INFO  23:50:42,095 - #11 ]
INFO  23:50:42,095 - #9 ,
INFO  23:50:42,096 - #49 niz_2
INFO  23:50:42,096 - #10 [
INFO  23:50:42,096 - #11 ]
INFO  23:50:42,096 - #9 ,
INFO  23:50:42,096 - #49 niz_3
INFO  23:50:42,096 - #10 [
INFO  23:50:42,096 - #11 ]
INFO  23:50:42,096 - #8 ;
INFO  23:50:42,097 - #49 int
INFO  23:50:42,097 - #49 a
INFO  23:50:42,097 - #8 ;
INFO  23:50:42,097 - #4 {
INFO  23:50:42,097 - #49 int
INFO  23:50:42,099 - #49 sum
INFO  23:50:42,099 - #20 (
INFO  23:50:42,099 - #49 int
INFO  23:50:42,099 - #49 z
INFO  23:50:42,099 - #9 ,
INFO  23:50:42,100 - #49 int
INFO  23:50:42,100 - #49 d
INFO  23:50:42,100 - #21 )
INFO  23:50:42,100 - #4 {
INFO  23:50:42,100 - #18 return
INFO  23:50:42,101 - #49 z
INFO  23:50:42,101 - #37 +
INFO  23:50:42,103 - #49 d
INFO  23:50:42,105 - #8 ;
INFO  23:50:42,106 - #5 }
INFO  23:50:42,107 - #49 int
INFO  23:50:42,108 - #49 inkrement
INFO  23:50:42,109 - #20 (
INFO  23:50:42,109 - #49 int
INFO  23:50:42,109 - #49 a
INFO  23:50:42,109 - #9 ,
INFO  23:50:42,109 - #49 int
INFO  23:50:42,109 - #49 inc
INFO  23:50:42,109 - #21 )
INFO  23:50:42,109 - #49 int
INFO  23:50:42,109 - #49 pom
INFO  23:50:42,110 - #8 ;
INFO  23:50:42,110 - #4 {
INFO  23:50:42,110 - #18 return
INFO  23:50:42,110 - #49 sum
INFO  23:50:42,110 - #20 (
INFO  23:50:42,110 - #49 a
INFO  23:50:42,110 - #9 ,
INFO  23:50:42,110 - #49 inc
INFO  23:50:42,110 - #21 )
INFO  23:50:42,111 - #8 ;
INFO  23:50:42,111 - #5 }
INFO  23:50:42,111 - #49 bool
INFO  23:50:42,111 - #49 verify
INFO  23:50:42,111 - #20 (
INFO  23:50:42,111 - #21 )
INFO  23:50:42,112 - #4 {
INFO  23:50:42,113 - #22 print
INFO  23:50:42,113 - #20 (
INFO  23:50:42,113 - #50 v
INFO  23:50:42,113 - #21 )
INFO  23:50:42,113 - #8 ;
INFO  23:50:42,113 - #18 return
INFO  23:50:42,114 - #51 false
INFO  23:50:42,114 - #8 ;
INFO  23:50:42,114 - #5 }
INFO  23:50:42,114 - #41 void
INFO  23:50:42,114 - #49 main
INFO  23:50:42,114 - #20 (
INFO  23:50:42,115 - #21 )
INFO  23:50:42,115 - #4 {
INFO  23:50:42,115 - #49 i
INFO  23:50:42,115 - #7 =
INFO  23:50:42,115 - #48 0
INFO  23:50:42,116 - #8 ;
INFO  23:50:42,117 - #23 for
INFO  23:50:42,117 - #20 (
INFO  23:50:42,119 - #49 i
INFO  23:50:42,119 - #7 =
INFO  23:50:42,119 - #48 0
INFO  23:50:42,119 - #8 ;
INFO  23:50:42,119 - #49 i
INFO  23:50:42,120 - #35 <
INFO  23:50:42,121 - #48 10
INFO  23:50:42,123 - #8 ;
INFO  23:50:42,124 - #21 )
INFO  23:50:42,126 - #4 {
INFO  23:50:42,127 - #14 if
INFO  23:50:42,127 - #20 (
INFO  23:50:42,127 - #49 i
INFO  23:50:42,128 - #32 !=
INFO  23:50:42,128 - #48 3
INFO  23:50:42,129 - #21 )
INFO  23:50:42,130 - #4 {
INFO  23:50:42,131 - #49 i
INFO  23:50:42,131 - #24 ++
INFO  23:50:42,131 - #8 ;
INFO  23:50:42,131 - #17 continue
INFO  23:50:42,131 - #8 ;
INFO  23:50:42,132 - #5 }
INFO  23:50:42,132 - #15 else
INFO  23:50:42,133 - #4 {
INFO  23:50:42,134 - #22 print
INFO  23:50:42,134 - #20 (
INFO  23:50:42,134 - #49 i
INFO  23:50:42,134 - #21 )
INFO  23:50:42,134 - #8 ;
INFO  23:50:42,134 - #5 }
INFO  23:50:42,134 - #5 }
INFO  23:50:42,134 - #5 }
INFO  23:50:42,135 - #5 }
INFO  23:50:42,150 - Program(
  ProgramName(
   test302
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstNum(
                     jedan
                     1
                    ) [ConstNum]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               bool
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   ibool
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 niz2
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarations(
            VarArr(
              VarName(
               niz
              ) [VarName]
            ) [VarArr]
            VarDeclarations(
              VarArr(
                VarName(
                 niz_2
                ) [VarName]
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                  VarName(
                   niz_3
                  ) [VarName]
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarations]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarationsEnd(
          VarIdent(
            VarName(
             a
            ) [VarName]
          ) [VarIdent]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        MethodDeclarationList(
          NoMethodDeclaration(
          ) [NoMethodDeclaration]
          MethodDecl(
            MethodNameAnyType(
              Type(
               int
              ) [Type]
             sum
            ) [MethodNameAnyType]
            MethodParameters(
              FormParsList(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 z
                ) [FormParsVar]
                FormParsEnd(
                  FormParsVar(
                    Type(
                     int
                    ) [Type]
                   d
                  ) [FormParsVar]
                ) [FormParsEnd]
              ) [FormParsList]
            ) [MethodParameters]
            NoDeclarations(
            ) [NoDeclarations]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopList(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             z
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           d
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [MethodDecl]
        ) [MethodDeclarationList]
        MethodDecl(
          MethodNameAnyType(
            Type(
             int
            ) [Type]
           inkrement
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsList(
              FormParsVar(
                Type(
                 int
                ) [Type]
               a
              ) [FormParsVar]
              FormParsEnd(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 inc
                ) [FormParsVar]
              ) [FormParsEnd]
            ) [FormParsList]
          ) [MethodParameters]
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     pom
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignatorActPars(
                        DesignatorIdent(
                         sum
                        ) [DesignatorIdent]
                        ActualParsList(
                          ActParsList(
                            ActParsEnd(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         a
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ActParsEnd]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       inc
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ActParsList]
                        ) [ActualParsList]
                      ) [FactorDesignatorActPars]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         verify
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        NoDeclarations(
        ) [NoDeclarations]
        Statements(
          StatementPrint(
            ExprPositive(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorChar(
                     v
                    ) [FactorChar]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprPositive]
          ) [StatementPrint]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorBool(
                       false
                      ) [FactorBool]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      NoDeclarations(
      ) [NoDeclarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementForCondFact(
            ForSt(
            ) [ForSt]
            DesignatorStatementOne(
              DesignatorStatementMatched(
                DesignatorStatementAssignop(
                  DesignatorIdent(
                   i
                  ) [DesignatorIdent]
                  Assignop(
                  ) [Assignop]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementMatched]
            ) [DesignatorStatementOne]
            LSemiFor(
            ) [LSemiFor]
            CondFactFor(
              CondFactRelop(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           i
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
                Less(
                ) [Less]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         10
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [CondFactRelop]
            ) [CondFactFor]
            RSemiFor(
            ) [RSemiFor]
            DesignatorStatementListSecond(
              DesignatorStatementEnd(
              ) [DesignatorStatementEnd]
            ) [DesignatorStatementListSecond]
            RParenFor(
            ) [RParenFor]
            StatementStatementList(
              Statements(
                StatementIfElse(
                  LParenIf(
                  ) [LParenIf]
                  OneCondTerm(
                    OneCondFact(
                      CondFactRelop(
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorDesignator(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [FactorDesignator]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                        NotEqualTo(
                        ) [NotEqualTo]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorNum(
                                 3
                                ) [FactorNum]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [CondFactRelop]
                    ) [OneCondFact]
                  ) [OneCondTerm]
                  RParenIf(
                  ) [RParenIf]
                  StatementStatementList(
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementIncrement(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [DesignatorStatementIncrement]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementContinue(
                        ) [StatementContinue]
                        NoStatement(
                        ) [NoStatement]
                      ) [Statements]
                    ) [Statements]
                  ) [StatementStatementList]
                  ElseSt(
                  ) [ElseSt]
                  StatementStatementList(
                    Statements(
                      StatementPrint(
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorDesignator(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [FactorDesignator]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [StatementPrint]
                      NoStatement(
                      ) [NoStatement]
                    ) [Statements]
                  ) [StatementStatementList]
                ) [StatementIfElse]
                NoStatement(
                ) [NoStatement]
              ) [Statements]
            ) [StatementStatementList]
          ) [StatementForCondFact]
          NoStatement(
          ) [NoStatement]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  23:50:42,151 - ===================================
INFO  23:50:42,152 - Pocetak programa test302.
INFO  23:50:42,152 - Deklarisana je konstanta jedan na liniji 5
INFO  23:50:42,152 - Deklarisana je promenljiva i na liniji 7
INFO  23:50:42,152 - Deklarisana je promenljiva ibool na liniji 8
INFO  23:50:42,153 - Deklarisana je promenljiva niz2 na liniji 10
INFO  23:50:42,153 - Deklarisana je promenljiva niz na liniji 12
INFO  23:50:42,153 - Deklarisana je promenljiva niz_2 na liniji 12
INFO  23:50:42,153 - Deklarisana je promenljiva niz_3 na liniji 12
INFO  23:50:42,153 - Deklarisana je promenljiva a na liniji 13
INFO  23:50:42,153 - Obradjuje se funkcija sum na liniji 18
INFO  23:50:42,154 - Deklarisan je parametar funkcije z na liniji 18
INFO  23:50:42,154 - Deklarisan je parametar funkcije d na liniji 18
INFO  23:50:42,154 - Dobra povratna vrednost funkcije na liniji 20
INFO  23:50:42,155 - Obradjuje se funkcija inkrement na liniji 23
INFO  23:50:42,155 - Deklarisan je parametar funkcije a na liniji 23
INFO  23:50:42,155 - Deklarisan je parametar funkcije inc na liniji 23
INFO  23:50:42,155 - Deklarisana je promenljiva pom na liniji 24
INFO  23:50:42,155 - Pronadjen poziv funkcije sum na liniji 28
INFO  23:50:42,155 - Dobra povratna vrednost funkcije na liniji 28
INFO  23:50:42,155 - Obradjuje se funkcija verify na liniji 31
INFO  23:50:42,156 - Obradjena funkcija PRINT na liniji 32
INFO  23:50:42,156 - Dobra povratna vrednost funkcije na liniji 33
INFO  23:50:42,156 - Obradjuje se funkcija main na liniji 36
INFO  23:50:42,156 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  23:50:42,156 - Designator i expr su odgovarajuceg tipa na liniji 42
INFO  23:50:42,156 - Obradjena funkcija PRINT na liniji 49
INFO  23:50:42,156 - ===================================
INFO  23:50:42,175 - Parsiranje uspesno zavrseno!
INFO  23:50:53,265 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  23:50:53,313 - #2 program
INFO  23:50:53,313 - #49 test302
INFO  23:50:53,313 - #6 const
INFO  23:50:53,314 - #49 int
INFO  23:50:53,314 - #49 jedan
INFO  23:50:53,315 - #7 =
INFO  23:50:53,315 - #48 1
INFO  23:50:53,315 - #8 ;
INFO  23:50:53,315 - #49 int
INFO  23:50:53,315 - #49 i
INFO  23:50:53,315 - #8 ;
INFO  23:50:53,316 - #49 bool
INFO  23:50:53,316 - #49 ibool
INFO  23:50:53,316 - #8 ;
INFO  23:50:53,316 - #49 int
INFO  23:50:53,316 - #49 niz2
INFO  23:50:53,316 - #8 ;
INFO  23:50:53,316 - #49 int
INFO  23:50:53,317 - #49 niz
INFO  23:50:53,317 - #10 [
INFO  23:50:53,317 - #11 ]
INFO  23:50:53,317 - #9 ,
INFO  23:50:53,317 - #49 niz_2
INFO  23:50:53,317 - #10 [
INFO  23:50:53,317 - #11 ]
INFO  23:50:53,317 - #9 ,
INFO  23:50:53,317 - #49 niz_3
INFO  23:50:53,317 - #10 [
INFO  23:50:53,317 - #11 ]
INFO  23:50:53,317 - #8 ;
INFO  23:50:53,317 - #49 int
INFO  23:50:53,318 - #49 a
INFO  23:50:53,318 - #8 ;
INFO  23:50:53,318 - #4 {
INFO  23:50:53,318 - #49 int
INFO  23:50:53,319 - #49 sum
INFO  23:50:53,319 - #20 (
INFO  23:50:53,319 - #49 int
INFO  23:50:53,319 - #49 z
INFO  23:50:53,319 - #9 ,
INFO  23:50:53,319 - #49 int
INFO  23:50:53,319 - #49 d
INFO  23:50:53,319 - #21 )
INFO  23:50:53,319 - #4 {
INFO  23:50:53,320 - #18 return
INFO  23:50:53,320 - #49 z
INFO  23:50:53,320 - #37 +
INFO  23:50:53,321 - #49 d
INFO  23:50:53,322 - #8 ;
INFO  23:50:53,322 - #5 }
INFO  23:50:53,323 - #49 int
INFO  23:50:53,324 - #49 inkrement
INFO  23:50:53,324 - #20 (
INFO  23:50:53,324 - #49 int
INFO  23:50:53,324 - #49 a
INFO  23:50:53,324 - #9 ,
INFO  23:50:53,324 - #49 int
INFO  23:50:53,324 - #49 inc
INFO  23:50:53,324 - #21 )
INFO  23:50:53,324 - #49 int
INFO  23:50:53,325 - #49 pom
INFO  23:50:53,325 - #8 ;
INFO  23:50:53,325 - #4 {
INFO  23:50:53,325 - #18 return
INFO  23:50:53,325 - #49 sum
INFO  23:50:53,325 - #20 (
INFO  23:50:53,325 - #49 a
INFO  23:50:53,325 - #9 ,
INFO  23:50:53,325 - #49 inc
INFO  23:50:53,325 - #21 )
INFO  23:50:53,325 - #8 ;
INFO  23:50:53,326 - #5 }
INFO  23:50:53,326 - #49 bool
INFO  23:50:53,326 - #49 verify
INFO  23:50:53,326 - #20 (
INFO  23:50:53,326 - #21 )
INFO  23:50:53,326 - #4 {
INFO  23:50:53,327 - #22 print
INFO  23:50:53,327 - #20 (
INFO  23:50:53,327 - #50 v
INFO  23:50:53,327 - #21 )
INFO  23:50:53,327 - #8 ;
INFO  23:50:53,327 - #18 return
INFO  23:50:53,327 - #51 false
INFO  23:50:53,327 - #8 ;
INFO  23:50:53,327 - #5 }
INFO  23:50:53,328 - #41 void
INFO  23:50:53,328 - #49 main
INFO  23:50:53,328 - #20 (
INFO  23:50:53,328 - #21 )
INFO  23:50:53,328 - #4 {
INFO  23:50:53,328 - #49 i
INFO  23:50:53,328 - #7 =
INFO  23:50:53,328 - #48 0
INFO  23:50:53,329 - #8 ;
INFO  23:50:53,329 - #23 for
INFO  23:50:53,329 - #20 (
INFO  23:50:53,330 - #49 i
INFO  23:50:53,330 - #7 =
INFO  23:50:53,330 - #48 0
INFO  23:50:53,330 - #8 ;
INFO  23:50:53,331 - #49 i
INFO  23:50:53,331 - #35 <
INFO  23:50:53,331 - #48 10
INFO  23:50:53,333 - #8 ;
INFO  23:50:53,333 - #21 )
INFO  23:50:53,335 - #4 {
INFO  23:50:53,336 - #14 if
INFO  23:50:53,336 - #20 (
INFO  23:50:53,336 - #49 i
INFO  23:50:53,336 - #32 !=
INFO  23:50:53,336 - #48 3
INFO  23:50:53,337 - #21 )
INFO  23:50:53,337 - #4 {
INFO  23:50:53,338 - #49 i
INFO  23:50:53,338 - #24 ++
INFO  23:50:53,338 - #8 ;
INFO  23:50:53,338 - #17 continue
INFO  23:50:53,338 - #8 ;
INFO  23:50:53,338 - #5 }
INFO  23:50:53,339 - #15 else
INFO  23:50:53,339 - #4 {
INFO  23:50:53,339 - #22 print
INFO  23:50:53,339 - #20 (
INFO  23:50:53,339 - #49 i
INFO  23:50:53,339 - #21 )
INFO  23:50:53,339 - #8 ;
INFO  23:50:53,340 - #5 }
INFO  23:50:53,340 - #5 }
INFO  23:50:53,340 - #5 }
INFO  23:50:53,340 - #5 }
INFO  23:50:53,348 - Program(
  ProgramName(
   test302
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstNum(
                     jedan
                     1
                    ) [ConstNum]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               bool
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   ibool
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 niz2
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarations(
            VarArr(
              VarName(
               niz
              ) [VarName]
            ) [VarArr]
            VarDeclarations(
              VarArr(
                VarName(
                 niz_2
                ) [VarName]
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                  VarName(
                   niz_3
                  ) [VarName]
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarations]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarationsEnd(
          VarIdent(
            VarName(
             a
            ) [VarName]
          ) [VarIdent]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        MethodDeclarationList(
          NoMethodDeclaration(
          ) [NoMethodDeclaration]
          MethodDecl(
            MethodNameAnyType(
              Type(
               int
              ) [Type]
             sum
            ) [MethodNameAnyType]
            MethodParameters(
              FormParsList(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 z
                ) [FormParsVar]
                FormParsEnd(
                  FormParsVar(
                    Type(
                     int
                    ) [Type]
                   d
                  ) [FormParsVar]
                ) [FormParsEnd]
              ) [FormParsList]
            ) [MethodParameters]
            NoDeclarations(
            ) [NoDeclarations]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopList(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             z
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           d
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [MethodDecl]
        ) [MethodDeclarationList]
        MethodDecl(
          MethodNameAnyType(
            Type(
             int
            ) [Type]
           inkrement
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsList(
              FormParsVar(
                Type(
                 int
                ) [Type]
               a
              ) [FormParsVar]
              FormParsEnd(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 inc
                ) [FormParsVar]
              ) [FormParsEnd]
            ) [FormParsList]
          ) [MethodParameters]
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     pom
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignatorActPars(
                        DesignatorIdent(
                         sum
                        ) [DesignatorIdent]
                        ActualParsList(
                          ActParsList(
                            ActParsEnd(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         a
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ActParsEnd]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       inc
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ActParsList]
                        ) [ActualParsList]
                      ) [FactorDesignatorActPars]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         verify
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        NoDeclarations(
        ) [NoDeclarations]
        Statements(
          StatementPrint(
            ExprPositive(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorChar(
                     v
                    ) [FactorChar]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprPositive]
          ) [StatementPrint]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorBool(
                       false
                      ) [FactorBool]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      NoDeclarations(
      ) [NoDeclarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementForCondFact(
            ForSt(
            ) [ForSt]
            DesignatorStatementOne(
              DesignatorStatementMatched(
                DesignatorStatementAssignop(
                  DesignatorIdent(
                   i
                  ) [DesignatorIdent]
                  Assignop(
                  ) [Assignop]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementMatched]
            ) [DesignatorStatementOne]
            LSemiFor(
            ) [LSemiFor]
            CondFactFor(
              CondFactRelop(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           i
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
                Less(
                ) [Less]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         10
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [CondFactRelop]
            ) [CondFactFor]
            RSemiFor(
            ) [RSemiFor]
            DesignatorStatementListSecond(
              DesignatorStatementEnd(
              ) [DesignatorStatementEnd]
            ) [DesignatorStatementListSecond]
            RParenFor(
            ) [RParenFor]
            StatementStatementList(
              Statements(
                StatementIfElse(
                  LParenIf(
                  ) [LParenIf]
                  OneCondTerm(
                    OneCondFact(
                      CondFactRelop(
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorDesignator(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [FactorDesignator]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                        NotEqualTo(
                        ) [NotEqualTo]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorNum(
                                 3
                                ) [FactorNum]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [CondFactRelop]
                    ) [OneCondFact]
                  ) [OneCondTerm]
                  RParenIf(
                  ) [RParenIf]
                  StatementStatementList(
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementIncrement(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [DesignatorStatementIncrement]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementContinue(
                        ) [StatementContinue]
                        NoStatement(
                        ) [NoStatement]
                      ) [Statements]
                    ) [Statements]
                  ) [StatementStatementList]
                  ElseSt(
                  ) [ElseSt]
                  StatementStatementList(
                    Statements(
                      StatementPrint(
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorDesignator(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [FactorDesignator]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [StatementPrint]
                      NoStatement(
                      ) [NoStatement]
                    ) [Statements]
                  ) [StatementStatementList]
                ) [StatementIfElse]
                NoStatement(
                ) [NoStatement]
              ) [Statements]
            ) [StatementStatementList]
          ) [StatementForCondFact]
          NoStatement(
          ) [NoStatement]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  23:50:53,349 - ===================================
INFO  23:50:53,349 - Pocetak programa test302.
INFO  23:50:53,349 - Deklarisana je konstanta jedan na liniji 5
INFO  23:50:53,349 - Deklarisana je promenljiva i na liniji 7
INFO  23:50:53,349 - Deklarisana je promenljiva ibool na liniji 8
INFO  23:50:53,350 - Deklarisana je promenljiva niz2 na liniji 10
INFO  23:50:53,350 - Deklarisana je promenljiva niz na liniji 12
INFO  23:50:53,350 - Deklarisana je promenljiva niz_2 na liniji 12
INFO  23:50:53,350 - Deklarisana je promenljiva niz_3 na liniji 12
INFO  23:50:53,350 - Deklarisana je promenljiva a na liniji 13
INFO  23:50:53,350 - Obradjuje se funkcija sum na liniji 18
INFO  23:50:53,350 - Deklarisan je parametar funkcije z na liniji 18
INFO  23:50:53,350 - Deklarisan je parametar funkcije d na liniji 18
INFO  23:50:53,350 - Dobra povratna vrednost funkcije na liniji 20
INFO  23:50:53,350 - Obradjuje se funkcija inkrement na liniji 23
INFO  23:50:53,351 - Deklarisan je parametar funkcije a na liniji 23
INFO  23:50:53,351 - Deklarisan je parametar funkcije inc na liniji 23
INFO  23:50:53,351 - Deklarisana je promenljiva pom na liniji 24
INFO  23:50:53,351 - Pronadjen poziv funkcije sum na liniji 28
INFO  23:50:53,351 - Dobra povratna vrednost funkcije na liniji 28
INFO  23:50:53,351 - Obradjuje se funkcija verify na liniji 31
INFO  23:50:53,351 - Obradjena funkcija PRINT na liniji 32
INFO  23:50:53,351 - Dobra povratna vrednost funkcije na liniji 33
INFO  23:50:53,351 - Obradjuje se funkcija main na liniji 36
INFO  23:50:53,351 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  23:50:53,351 - Designator i expr su odgovarajuceg tipa na liniji 42
INFO  23:50:53,351 - Obradjena funkcija PRINT na liniji 49
INFO  23:50:53,351 - ===================================
INFO  23:50:53,361 - Parsiranje uspesno zavrseno!
INFO  23:51:33,570 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  23:51:33,625 - #2 program
INFO  23:51:33,625 - #49 test302
INFO  23:51:33,625 - #6 const
INFO  23:51:33,626 - #49 int
INFO  23:51:33,626 - #49 jedan
INFO  23:51:33,627 - #7 =
INFO  23:51:33,627 - #48 1
INFO  23:51:33,627 - #8 ;
INFO  23:51:33,627 - #49 int
INFO  23:51:33,627 - #49 i
INFO  23:51:33,627 - #8 ;
INFO  23:51:33,628 - #49 bool
INFO  23:51:33,628 - #49 ibool
INFO  23:51:33,628 - #8 ;
INFO  23:51:33,628 - #49 int
INFO  23:51:33,628 - #49 niz2
INFO  23:51:33,628 - #8 ;
INFO  23:51:33,629 - #49 int
INFO  23:51:33,629 - #49 niz
INFO  23:51:33,629 - #10 [
INFO  23:51:33,629 - #11 ]
INFO  23:51:33,629 - #9 ,
INFO  23:51:33,629 - #49 niz_2
INFO  23:51:33,629 - #10 [
INFO  23:51:33,629 - #11 ]
INFO  23:51:33,629 - #9 ,
INFO  23:51:33,629 - #49 niz_3
INFO  23:51:33,629 - #10 [
INFO  23:51:33,630 - #11 ]
INFO  23:51:33,630 - #8 ;
INFO  23:51:33,630 - #49 int
INFO  23:51:33,630 - #49 a
INFO  23:51:33,630 - #8 ;
INFO  23:51:33,630 - #4 {
INFO  23:51:33,630 - #49 int
INFO  23:51:33,631 - #49 sum
INFO  23:51:33,631 - #20 (
INFO  23:51:33,631 - #49 int
INFO  23:51:33,631 - #49 z
INFO  23:51:33,631 - #9 ,
INFO  23:51:33,631 - #49 int
INFO  23:51:33,631 - #49 d
INFO  23:51:33,631 - #21 )
INFO  23:51:33,632 - #4 {
INFO  23:51:33,632 - #18 return
INFO  23:51:33,632 - #49 z
INFO  23:51:33,632 - #37 +
INFO  23:51:33,633 - #49 d
INFO  23:51:33,634 - #8 ;
INFO  23:51:33,635 - #5 }
INFO  23:51:33,636 - #49 int
INFO  23:51:33,637 - #49 inkrement
INFO  23:51:33,637 - #20 (
INFO  23:51:33,637 - #49 int
INFO  23:51:33,637 - #49 a
INFO  23:51:33,638 - #9 ,
INFO  23:51:33,638 - #49 int
INFO  23:51:33,638 - #49 inc
INFO  23:51:33,638 - #21 )
INFO  23:51:33,638 - #49 int
INFO  23:51:33,638 - #49 pom
INFO  23:51:33,638 - #8 ;
INFO  23:51:33,638 - #4 {
INFO  23:51:33,638 - #18 return
INFO  23:51:33,638 - #49 sum
INFO  23:51:33,638 - #20 (
INFO  23:51:33,638 - #49 a
INFO  23:51:33,638 - #9 ,
INFO  23:51:33,639 - #49 inc
INFO  23:51:33,639 - #21 )
INFO  23:51:33,639 - #8 ;
INFO  23:51:33,639 - #5 }
INFO  23:51:33,639 - #49 bool
INFO  23:51:33,639 - #49 verify
INFO  23:51:33,639 - #20 (
INFO  23:51:33,639 - #21 )
INFO  23:51:33,640 - #4 {
INFO  23:51:33,640 - #22 print
INFO  23:51:33,640 - #20 (
INFO  23:51:33,640 - #50 v
INFO  23:51:33,641 - #21 )
INFO  23:51:33,641 - #8 ;
INFO  23:51:33,641 - #18 return
INFO  23:51:33,641 - #51 false
INFO  23:51:33,641 - #8 ;
INFO  23:51:33,641 - #5 }
INFO  23:51:33,641 - #41 void
INFO  23:51:33,641 - #49 main
INFO  23:51:33,642 - #20 (
INFO  23:51:33,642 - #21 )
INFO  23:51:33,642 - #4 {
INFO  23:51:33,642 - #49 i
INFO  23:51:33,642 - #7 =
INFO  23:51:33,642 - #48 0
INFO  23:51:33,643 - #8 ;
INFO  23:51:33,644 - #23 for
INFO  23:51:33,644 - #20 (
INFO  23:51:33,645 - #49 i
INFO  23:51:33,645 - #7 =
INFO  23:51:33,645 - #48 0
INFO  23:51:33,645 - #8 ;
INFO  23:51:33,645 - #49 i
INFO  23:51:33,646 - #35 <
INFO  23:51:33,646 - #48 10
INFO  23:51:33,648 - #8 ;
INFO  23:51:33,649 - #21 )
INFO  23:51:33,650 - #4 {
INFO  23:51:33,651 - #14 if
INFO  23:51:33,651 - #20 (
INFO  23:51:33,651 - #49 i
INFO  23:51:33,652 - #32 !=
INFO  23:51:33,652 - #48 3
INFO  23:51:33,653 - #21 )
INFO  23:51:33,653 - #4 {
INFO  23:51:33,654 - #49 i
INFO  23:51:33,654 - #24 ++
INFO  23:51:33,654 - #8 ;
INFO  23:51:33,654 - #22 print
INFO  23:51:33,654 - #20 (
INFO  23:51:33,654 - #49 i
INFO  23:51:33,654 - #21 )
INFO  23:51:33,655 - #8 ;
INFO  23:51:33,655 - #17 continue
INFO  23:51:33,655 - #8 ;
INFO  23:51:33,655 - #5 }
INFO  23:51:33,655 - #22 print
INFO  23:51:33,656 - #20 (
INFO  23:51:33,656 - #50 c
INFO  23:51:33,656 - #21 )
INFO  23:51:33,656 - #8 ;
INFO  23:51:33,656 - #5 }
INFO  23:51:33,656 - #5 }
INFO  23:51:33,657 - #5 }
INFO  23:51:33,667 - Program(
  ProgramName(
   test302
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstNum(
                     jedan
                     1
                    ) [ConstNum]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               bool
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   ibool
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 niz2
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarations(
            VarArr(
              VarName(
               niz
              ) [VarName]
            ) [VarArr]
            VarDeclarations(
              VarArr(
                VarName(
                 niz_2
                ) [VarName]
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                  VarName(
                   niz_3
                  ) [VarName]
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarations]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarationsEnd(
          VarIdent(
            VarName(
             a
            ) [VarName]
          ) [VarIdent]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        MethodDeclarationList(
          NoMethodDeclaration(
          ) [NoMethodDeclaration]
          MethodDecl(
            MethodNameAnyType(
              Type(
               int
              ) [Type]
             sum
            ) [MethodNameAnyType]
            MethodParameters(
              FormParsList(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 z
                ) [FormParsVar]
                FormParsEnd(
                  FormParsVar(
                    Type(
                     int
                    ) [Type]
                   d
                  ) [FormParsVar]
                ) [FormParsEnd]
              ) [FormParsList]
            ) [MethodParameters]
            NoDeclarations(
            ) [NoDeclarations]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopList(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             z
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           d
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [MethodDecl]
        ) [MethodDeclarationList]
        MethodDecl(
          MethodNameAnyType(
            Type(
             int
            ) [Type]
           inkrement
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsList(
              FormParsVar(
                Type(
                 int
                ) [Type]
               a
              ) [FormParsVar]
              FormParsEnd(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 inc
                ) [FormParsVar]
              ) [FormParsEnd]
            ) [FormParsList]
          ) [MethodParameters]
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     pom
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignatorActPars(
                        DesignatorIdent(
                         sum
                        ) [DesignatorIdent]
                        ActualParsList(
                          ActParsList(
                            ActParsEnd(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         a
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ActParsEnd]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       inc
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ActParsList]
                        ) [ActualParsList]
                      ) [FactorDesignatorActPars]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         verify
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        NoDeclarations(
        ) [NoDeclarations]
        Statements(
          StatementPrint(
            ExprPositive(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorChar(
                     v
                    ) [FactorChar]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprPositive]
          ) [StatementPrint]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorBool(
                       false
                      ) [FactorBool]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      NoDeclarations(
      ) [NoDeclarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementForCondFact(
            ForSt(
            ) [ForSt]
            DesignatorStatementOne(
              DesignatorStatementMatched(
                DesignatorStatementAssignop(
                  DesignatorIdent(
                   i
                  ) [DesignatorIdent]
                  Assignop(
                  ) [Assignop]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementMatched]
            ) [DesignatorStatementOne]
            LSemiFor(
            ) [LSemiFor]
            CondFactFor(
              CondFactRelop(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           i
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
                Less(
                ) [Less]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         10
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [CondFactRelop]
            ) [CondFactFor]
            RSemiFor(
            ) [RSemiFor]
            DesignatorStatementListSecond(
              DesignatorStatementEnd(
              ) [DesignatorStatementEnd]
            ) [DesignatorStatementListSecond]
            RParenFor(
            ) [RParenFor]
            StatementStatementList(
              Statements(
                StatementIf(
                  LParenIf(
                  ) [LParenIf]
                  OneCondTerm(
                    OneCondFact(
                      CondFactRelop(
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorDesignator(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [FactorDesignator]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                        NotEqualTo(
                        ) [NotEqualTo]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorNum(
                                 3
                                ) [FactorNum]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [CondFactRelop]
                    ) [OneCondFact]
                  ) [OneCondTerm]
                  RParenIf(
                  ) [RParenIf]
                  StatementStatementList(
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementIncrement(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [DesignatorStatementIncrement]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementPrint(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     i
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [StatementPrint]
                        Statements(
                          StatementContinue(
                          ) [StatementContinue]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [StatementStatementList]
                ) [StatementIf]
                Statements(
                  StatementPrint(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorChar(
                             c
                            ) [FactorChar]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [StatementPrint]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [Statements]
            ) [StatementStatementList]
          ) [StatementForCondFact]
          NoStatement(
          ) [NoStatement]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  23:51:33,668 - ===================================
INFO  23:51:33,668 - Pocetak programa test302.
INFO  23:51:33,668 - Deklarisana je konstanta jedan na liniji 5
INFO  23:51:33,669 - Deklarisana je promenljiva i na liniji 7
INFO  23:51:33,669 - Deklarisana je promenljiva ibool na liniji 8
INFO  23:51:33,669 - Deklarisana je promenljiva niz2 na liniji 10
INFO  23:51:33,669 - Deklarisana je promenljiva niz na liniji 12
INFO  23:51:33,669 - Deklarisana je promenljiva niz_2 na liniji 12
INFO  23:51:33,669 - Deklarisana je promenljiva niz_3 na liniji 12
INFO  23:51:33,669 - Deklarisana je promenljiva a na liniji 13
INFO  23:51:33,670 - Obradjuje se funkcija sum na liniji 18
INFO  23:51:33,670 - Deklarisan je parametar funkcije z na liniji 18
INFO  23:51:33,670 - Deklarisan je parametar funkcije d na liniji 18
INFO  23:51:33,670 - Dobra povratna vrednost funkcije na liniji 20
INFO  23:51:33,670 - Obradjuje se funkcija inkrement na liniji 23
INFO  23:51:33,670 - Deklarisan je parametar funkcije a na liniji 23
INFO  23:51:33,671 - Deklarisan je parametar funkcije inc na liniji 23
INFO  23:51:33,671 - Deklarisana je promenljiva pom na liniji 24
INFO  23:51:33,671 - Pronadjen poziv funkcije sum na liniji 28
INFO  23:51:33,671 - Dobra povratna vrednost funkcije na liniji 28
INFO  23:51:33,671 - Obradjuje se funkcija verify na liniji 31
INFO  23:51:33,671 - Obradjena funkcija PRINT na liniji 32
INFO  23:51:33,671 - Dobra povratna vrednost funkcije na liniji 33
INFO  23:51:33,671 - Obradjuje se funkcija main na liniji 36
INFO  23:51:33,671 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  23:51:33,672 - Designator i expr su odgovarajuceg tipa na liniji 42
INFO  23:51:33,672 - Obradjena funkcija PRINT na liniji 46
INFO  23:51:33,672 - Obradjena funkcija PRINT na liniji 50
INFO  23:51:33,672 - ===================================
INFO  23:51:33,686 - Parsiranje uspesno zavrseno!
INFO  23:51:37,197 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  23:51:37,301 - #2 program
INFO  23:51:37,301 - #49 test302
INFO  23:51:37,301 - #6 const
INFO  23:51:37,303 - #49 int
INFO  23:51:37,303 - #49 jedan
INFO  23:51:37,304 - #7 =
INFO  23:51:37,304 - #48 1
INFO  23:51:37,305 - #8 ;
INFO  23:51:37,305 - #49 int
INFO  23:51:37,305 - #49 i
INFO  23:51:37,305 - #8 ;
INFO  23:51:37,306 - #49 bool
INFO  23:51:37,307 - #49 ibool
INFO  23:51:37,307 - #8 ;
INFO  23:51:37,307 - #49 int
INFO  23:51:37,307 - #49 niz2
INFO  23:51:37,307 - #8 ;
INFO  23:51:37,307 - #49 int
INFO  23:51:37,307 - #49 niz
INFO  23:51:37,307 - #10 [
INFO  23:51:37,307 - #11 ]
INFO  23:51:37,308 - #9 ,
INFO  23:51:37,308 - #49 niz_2
INFO  23:51:37,308 - #10 [
INFO  23:51:37,308 - #11 ]
INFO  23:51:37,308 - #9 ,
INFO  23:51:37,308 - #49 niz_3
INFO  23:51:37,308 - #10 [
INFO  23:51:37,308 - #11 ]
INFO  23:51:37,308 - #8 ;
INFO  23:51:37,308 - #49 int
INFO  23:51:37,309 - #49 a
INFO  23:51:37,309 - #8 ;
INFO  23:51:37,309 - #4 {
INFO  23:51:37,309 - #49 int
INFO  23:51:37,310 - #49 sum
INFO  23:51:37,310 - #20 (
INFO  23:51:37,310 - #49 int
INFO  23:51:37,310 - #49 z
INFO  23:51:37,310 - #9 ,
INFO  23:51:37,310 - #49 int
INFO  23:51:37,310 - #49 d
INFO  23:51:37,310 - #21 )
INFO  23:51:37,311 - #4 {
INFO  23:51:37,311 - #18 return
INFO  23:51:37,311 - #49 z
INFO  23:51:37,311 - #37 +
INFO  23:51:37,312 - #49 d
INFO  23:51:37,314 - #8 ;
INFO  23:51:37,314 - #5 }
INFO  23:51:37,315 - #49 int
INFO  23:51:37,316 - #49 inkrement
INFO  23:51:37,316 - #20 (
INFO  23:51:37,316 - #49 int
INFO  23:51:37,316 - #49 a
INFO  23:51:37,317 - #9 ,
INFO  23:51:37,317 - #49 int
INFO  23:51:37,317 - #49 inc
INFO  23:51:37,317 - #21 )
INFO  23:51:37,317 - #49 int
INFO  23:51:37,317 - #49 pom
INFO  23:51:37,317 - #8 ;
INFO  23:51:37,317 - #4 {
INFO  23:51:37,317 - #18 return
INFO  23:51:37,317 - #49 sum
INFO  23:51:37,317 - #20 (
INFO  23:51:37,317 - #49 a
INFO  23:51:37,317 - #9 ,
INFO  23:51:37,317 - #49 inc
INFO  23:51:37,318 - #21 )
INFO  23:51:37,318 - #8 ;
INFO  23:51:37,318 - #5 }
INFO  23:51:37,318 - #49 bool
INFO  23:51:37,318 - #49 verify
INFO  23:51:37,318 - #20 (
INFO  23:51:37,318 - #21 )
INFO  23:51:37,319 - #4 {
INFO  23:51:37,319 - #22 print
INFO  23:51:37,319 - #20 (
INFO  23:51:37,319 - #50 v
INFO  23:51:37,319 - #21 )
INFO  23:51:37,320 - #8 ;
INFO  23:51:37,320 - #18 return
INFO  23:51:37,320 - #51 false
INFO  23:51:37,320 - #8 ;
INFO  23:51:37,320 - #5 }
INFO  23:51:37,320 - #41 void
INFO  23:51:37,320 - #49 main
INFO  23:51:37,320 - #20 (
INFO  23:51:37,320 - #21 )
INFO  23:51:37,320 - #4 {
INFO  23:51:37,320 - #49 i
INFO  23:51:37,321 - #7 =
INFO  23:51:37,321 - #48 0
INFO  23:51:37,322 - #8 ;
INFO  23:51:37,323 - #23 for
INFO  23:51:37,323 - #20 (
INFO  23:51:37,324 - #49 i
INFO  23:51:37,324 - #7 =
INFO  23:51:37,324 - #48 0
INFO  23:51:37,324 - #8 ;
INFO  23:51:37,324 - #49 i
INFO  23:51:37,325 - #35 <
INFO  23:51:37,325 - #48 10
INFO  23:51:37,327 - #8 ;
INFO  23:51:37,328 - #21 )
INFO  23:51:37,331 - #4 {
INFO  23:51:37,332 - #14 if
INFO  23:51:37,332 - #20 (
INFO  23:51:37,332 - #49 i
INFO  23:51:37,333 - #32 !=
INFO  23:51:37,333 - #48 3
INFO  23:51:37,334 - #21 )
INFO  23:51:37,335 - #4 {
INFO  23:51:37,336 - #49 i
INFO  23:51:37,336 - #24 ++
INFO  23:51:37,336 - #8 ;
INFO  23:51:37,336 - #22 print
INFO  23:51:37,336 - #20 (
INFO  23:51:37,336 - #49 i
INFO  23:51:37,336 - #21 )
INFO  23:51:37,337 - #8 ;
INFO  23:51:37,337 - #17 continue
INFO  23:51:37,337 - #8 ;
INFO  23:51:37,337 - #5 }
INFO  23:51:37,338 - #22 print
INFO  23:51:37,338 - #20 (
INFO  23:51:37,339 - #50 c
INFO  23:51:37,339 - #21 )
INFO  23:51:37,339 - #8 ;
INFO  23:51:37,339 - #5 }
INFO  23:51:37,339 - #5 }
INFO  23:51:37,339 - #5 }
INFO  23:51:37,358 - Program(
  ProgramName(
   test302
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              NoDeclarations(
              ) [NoDeclarations]
              ConstDeclaration(
                ConstDeclarationList(
                  Type(
                   int
                  ) [Type]
                  ConstDeclarationsEnd(
                    ConstNum(
                     jedan
                     1
                    ) [ConstNum]
                  ) [ConstDeclarationsEnd]
                ) [ConstDeclarationList]
              ) [ConstDeclaration]
            ) [Declarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     i
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          VarDeclaration(
            VarDeclarationList(
              Type(
               bool
              ) [Type]
              VarDeclarationsEnd(
                VarIdent(
                  VarName(
                   ibool
                  ) [VarName]
                ) [VarIdent]
              ) [VarDeclarationsEnd]
            ) [VarDeclarationList]
          ) [VarDeclaration]
        ) [Declarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarationsEnd(
              VarIdent(
                VarName(
                 niz2
                ) [VarName]
              ) [VarIdent]
            ) [VarDeclarationsEnd]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      VarDeclaration(
        VarDeclarationList(
          Type(
           int
          ) [Type]
          VarDeclarations(
            VarArr(
              VarName(
               niz
              ) [VarName]
            ) [VarArr]
            VarDeclarations(
              VarArr(
                VarName(
                 niz_2
                ) [VarName]
              ) [VarArr]
              VarDeclarationsEnd(
                VarArr(
                  VarName(
                   niz_3
                  ) [VarName]
                ) [VarArr]
              ) [VarDeclarationsEnd]
            ) [VarDeclarations]
          ) [VarDeclarations]
        ) [VarDeclarationList]
      ) [VarDeclaration]
    ) [Declarations]
    VarDeclaration(
      VarDeclarationList(
        Type(
         int
        ) [Type]
        VarDeclarationsEnd(
          VarIdent(
            VarName(
             a
            ) [VarName]
          ) [VarIdent]
        ) [VarDeclarationsEnd]
      ) [VarDeclarationList]
    ) [VarDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    MethodDeclarationList(
      MethodDeclarationList(
        MethodDeclarationList(
          NoMethodDeclaration(
          ) [NoMethodDeclaration]
          MethodDecl(
            MethodNameAnyType(
              Type(
               int
              ) [Type]
             sum
            ) [MethodNameAnyType]
            MethodParameters(
              FormParsList(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 z
                ) [FormParsVar]
                FormParsEnd(
                  FormParsVar(
                    Type(
                     int
                    ) [Type]
                   d
                  ) [FormParsVar]
                ) [FormParsEnd]
              ) [FormParsList]
            ) [MethodParameters]
            NoDeclarations(
            ) [NoDeclarations]
            Statements(
              StatementReturnExpr(
                ExprPositive(
                  AddopList(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorDesignator(
                            DesignatorIdent(
                             z
                            ) [DesignatorIdent]
                          ) [FactorDesignator]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                    Plus(
                    ) [Plus]
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           d
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopList]
                ) [ExprPositive]
              ) [StatementReturnExpr]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [MethodDecl]
        ) [MethodDeclarationList]
        MethodDecl(
          MethodNameAnyType(
            Type(
             int
            ) [Type]
           inkrement
          ) [MethodNameAnyType]
          MethodParameters(
            FormParsList(
              FormParsVar(
                Type(
                 int
                ) [Type]
               a
              ) [FormParsVar]
              FormParsEnd(
                FormParsVar(
                  Type(
                   int
                  ) [Type]
                 inc
                ) [FormParsVar]
              ) [FormParsEnd]
            ) [FormParsList]
          ) [MethodParameters]
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VarDeclaration(
              VarDeclarationList(
                Type(
                 int
                ) [Type]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     pom
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarationList]
            ) [VarDeclaration]
          ) [Declarations]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorDesignatorActPars(
                        DesignatorIdent(
                         sum
                        ) [DesignatorIdent]
                        ActualParsList(
                          ActParsList(
                            ActParsEnd(
                              ExprPositive(
                                AddopEnd(
                                  Term(
                                    MulopEnd(
                                      FactorDesignator(
                                        DesignatorIdent(
                                         a
                                        ) [DesignatorIdent]
                                      ) [FactorDesignator]
                                    ) [MulopEnd]
                                  ) [Term]
                                ) [AddopEnd]
                              ) [ExprPositive]
                            ) [ActParsEnd]
                            ExprPositive(
                              AddopEnd(
                                Term(
                                  MulopEnd(
                                    FactorDesignator(
                                      DesignatorIdent(
                                       inc
                                      ) [DesignatorIdent]
                                    ) [FactorDesignator]
                                  ) [MulopEnd]
                                ) [Term]
                              ) [AddopEnd]
                            ) [ExprPositive]
                          ) [ActParsList]
                        ) [ActualParsList]
                      ) [FactorDesignatorActPars]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [MethodDecl]
      ) [MethodDeclarationList]
      MethodDecl(
        MethodNameAnyType(
          Type(
           bool
          ) [Type]
         verify
        ) [MethodNameAnyType]
        NoMethodParameters(
        ) [NoMethodParameters]
        NoDeclarations(
        ) [NoDeclarations]
        Statements(
          StatementPrint(
            ExprPositive(
              AddopEnd(
                Term(
                  MulopEnd(
                    FactorChar(
                     v
                    ) [FactorChar]
                  ) [MulopEnd]
                ) [Term]
              ) [AddopEnd]
            ) [ExprPositive]
          ) [StatementPrint]
          Statements(
            StatementReturnExpr(
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorBool(
                       false
                      ) [FactorBool]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [StatementReturnExpr]
            NoStatement(
            ) [NoStatement]
          ) [Statements]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarationList]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      NoDeclarations(
      ) [NoDeclarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       0
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementForCondFact(
            ForSt(
            ) [ForSt]
            DesignatorStatementOne(
              DesignatorStatementMatched(
                DesignatorStatementAssignop(
                  DesignatorIdent(
                   i
                  ) [DesignatorIdent]
                  Assignop(
                  ) [Assignop]
                  ExprPositive(
                    AddopEnd(
                      Term(
                        MulopEnd(
                          FactorNum(
                           0
                          ) [FactorNum]
                        ) [MulopEnd]
                      ) [Term]
                    ) [AddopEnd]
                  ) [ExprPositive]
                ) [DesignatorStatementAssignop]
              ) [DesignatorStatementMatched]
            ) [DesignatorStatementOne]
            LSemiFor(
            ) [LSemiFor]
            CondFactFor(
              CondFactRelop(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorDesignator(
                          DesignatorIdent(
                           i
                          ) [DesignatorIdent]
                        ) [FactorDesignator]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
                Less(
                ) [Less]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         10
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [CondFactRelop]
            ) [CondFactFor]
            RSemiFor(
            ) [RSemiFor]
            DesignatorStatementListSecond(
              DesignatorStatementEnd(
              ) [DesignatorStatementEnd]
            ) [DesignatorStatementListSecond]
            RParenFor(
            ) [RParenFor]
            StatementStatementList(
              Statements(
                StatementIf(
                  LParenIf(
                  ) [LParenIf]
                  OneCondTerm(
                    OneCondFact(
                      CondFactRelop(
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorDesignator(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [FactorDesignator]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                        NotEqualTo(
                        ) [NotEqualTo]
                        ExprPositive(
                          AddopEnd(
                            Term(
                              MulopEnd(
                                FactorNum(
                                 3
                                ) [FactorNum]
                              ) [MulopEnd]
                            ) [Term]
                          ) [AddopEnd]
                        ) [ExprPositive]
                      ) [CondFactRelop]
                    ) [OneCondFact]
                  ) [OneCondTerm]
                  RParenIf(
                  ) [RParenIf]
                  StatementStatementList(
                    Statements(
                      StatementDesignator(
                        DesignatorStatementMatched(
                          DesignatorStatementIncrement(
                            DesignatorIdent(
                             i
                            ) [DesignatorIdent]
                          ) [DesignatorStatementIncrement]
                        ) [DesignatorStatementMatched]
                      ) [StatementDesignator]
                      Statements(
                        StatementPrint(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     i
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [StatementPrint]
                        Statements(
                          StatementContinue(
                          ) [StatementContinue]
                          NoStatement(
                          ) [NoStatement]
                        ) [Statements]
                      ) [Statements]
                    ) [Statements]
                  ) [StatementStatementList]
                ) [StatementIf]
                Statements(
                  StatementPrint(
                    ExprPositive(
                      AddopEnd(
                        Term(
                          MulopEnd(
                            FactorChar(
                             c
                            ) [FactorChar]
                          ) [MulopEnd]
                        ) [Term]
                      ) [AddopEnd]
                    ) [ExprPositive]
                  ) [StatementPrint]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [Statements]
            ) [StatementStatementList]
          ) [StatementForCondFact]
          NoStatement(
          ) [NoStatement]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  23:51:37,359 - ===================================
INFO  23:51:37,359 - Pocetak programa test302.
INFO  23:51:37,359 - Deklarisana je konstanta jedan na liniji 5
INFO  23:51:37,359 - Deklarisana je promenljiva i na liniji 7
INFO  23:51:37,359 - Deklarisana je promenljiva ibool na liniji 8
INFO  23:51:37,359 - Deklarisana je promenljiva niz2 na liniji 10
INFO  23:51:37,359 - Deklarisana je promenljiva niz na liniji 12
INFO  23:51:37,359 - Deklarisana je promenljiva niz_2 na liniji 12
INFO  23:51:37,359 - Deklarisana je promenljiva niz_3 na liniji 12
INFO  23:51:37,360 - Deklarisana je promenljiva a na liniji 13
INFO  23:51:37,360 - Obradjuje se funkcija sum na liniji 18
INFO  23:51:37,360 - Deklarisan je parametar funkcije z na liniji 18
INFO  23:51:37,360 - Deklarisan je parametar funkcije d na liniji 18
INFO  23:51:37,360 - Dobra povratna vrednost funkcije na liniji 20
INFO  23:51:37,360 - Obradjuje se funkcija inkrement na liniji 23
INFO  23:51:37,360 - Deklarisan je parametar funkcije a na liniji 23
INFO  23:51:37,360 - Deklarisan je parametar funkcije inc na liniji 23
INFO  23:51:37,360 - Deklarisana je promenljiva pom na liniji 24
INFO  23:51:37,360 - Pronadjen poziv funkcije sum na liniji 28
INFO  23:51:37,361 - Dobra povratna vrednost funkcije na liniji 28
INFO  23:51:37,361 - Obradjuje se funkcija verify na liniji 31
INFO  23:51:37,361 - Obradjena funkcija PRINT na liniji 32
INFO  23:51:37,361 - Dobra povratna vrednost funkcije na liniji 33
INFO  23:51:37,361 - Obradjuje se funkcija main na liniji 36
INFO  23:51:37,361 - Designator i expr su odgovarajuceg tipa na liniji 41
INFO  23:51:37,361 - Designator i expr su odgovarajuceg tipa na liniji 42
INFO  23:51:37,362 - Obradjena funkcija PRINT na liniji 46
INFO  23:51:37,362 - Obradjena funkcija PRINT na liniji 50
INFO  23:51:37,362 - ===================================
