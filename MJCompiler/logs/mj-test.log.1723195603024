INFO  11:25:59,875 - Compiling source file: C:\Users\lenovo\Desktop\pp1 projekat\projekat\workspace\MJCompiler\test\test4.mj
INFO  11:25:59,935 - #2 program
INFO  11:25:59,935 - #49 test301
INFO  11:25:59,936 - #6 const
INFO  11:25:59,937 - #49 int
INFO  11:25:59,937 - #49 nula
INFO  11:25:59,938 - #7 =
INFO  11:25:59,938 - #48 0
INFO  11:25:59,938 - #8 ;
INFO  11:25:59,938 - #6 const
INFO  11:25:59,938 - #49 int
INFO  11:25:59,938 - #49 jedan
INFO  11:25:59,938 - #7 =
INFO  11:25:59,939 - #48 1
INFO  11:25:59,939 - #8 ;
INFO  11:25:59,939 - #6 const
INFO  11:25:59,939 - #49 int
INFO  11:25:59,939 - #49 pet
INFO  11:25:59,939 - #7 =
INFO  11:25:59,939 - #48 5
INFO  11:25:59,939 - #8 ;
INFO  11:25:59,939 - #4 {
INFO  11:25:59,940 - #41 void
INFO  11:25:59,941 - #49 main
INFO  11:25:59,941 - #20 (
INFO  11:25:59,941 - #21 )
INFO  11:25:59,942 - #49 int
INFO  11:25:59,942 - #49 i
INFO  11:25:59,942 - #9 ,
INFO  11:25:59,943 - #49 y
INFO  11:25:59,943 - #9 ,
INFO  11:25:59,943 - #49 z
INFO  11:25:59,943 - #8 ;
INFO  11:25:59,943 - #4 {
INFO  11:25:59,944 - #49 i
INFO  11:25:59,944 - #7 =
INFO  11:25:59,944 - #48 1
INFO  11:25:59,945 - #8 ;
INFO  11:25:59,946 - #49 y
INFO  11:25:59,947 - #7 =
INFO  11:25:59,947 - #48 0
INFO  11:25:59,947 - #8 ;
INFO  11:25:59,947 - #23 for
INFO  11:25:59,947 - #20 (
INFO  11:25:59,948 - #8 ;
INFO  11:25:59,948 - #8 ;
INFO  11:25:59,948 - #21 )
INFO  11:25:59,948 - #4 {
INFO  11:25:59,949 - #14 if
INFO  11:25:59,949 - #20 (
INFO  11:25:59,949 - #49 i
INFO  11:25:59,949 - #35 <
INFO  11:25:59,950 - #48 3
INFO  11:25:59,951 - #21 )
INFO  11:25:59,951 - #4 {
INFO  11:25:59,952 - #22 print
INFO  11:25:59,952 - #20 (
INFO  11:25:59,952 - #50 u
INFO  11:25:59,952 - #21 )
INFO  11:25:59,952 - #8 ;
INFO  11:25:59,952 - #14 if
INFO  11:25:59,952 - #20 (
INFO  11:25:59,953 - #49 y
INFO  11:25:59,953 - #31 ==
INFO  11:25:59,953 - #48 0
INFO  11:25:59,953 - #21 )
INFO  11:25:59,953 - #16 break
INFO  11:25:59,953 - #8 ;
INFO  11:25:59,954 - #49 i
INFO  11:25:59,954 - #24 ++
INFO  11:25:59,954 - #8 ;
INFO  11:25:59,954 - #17 continue
INFO  11:25:59,954 - #8 ;
INFO  11:25:59,954 - #5 }
INFO  11:25:59,955 - #5 }
INFO  11:25:59,956 - #22 print
INFO  11:25:59,956 - #20 (
INFO  11:25:59,956 - #48 5
INFO  11:25:59,956 - #21 )
INFO  11:25:59,956 - #8 ;
INFO  11:25:59,956 - #5 }
INFO  11:25:59,956 - #5 }
INFO  11:25:59,964 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  Declarations(
    Declarations(
      Declarations(
        NoDeclarations(
        ) [NoDeclarations]
        ConstDeclaration(
          ConstDeclarationList(
            Type(
             int
            ) [Type]
            ConstDeclarationsEnd(
              ConstNum(
               nula
               0
              ) [ConstNum]
            ) [ConstDeclarationsEnd]
          ) [ConstDeclarationList]
        ) [ConstDeclaration]
      ) [Declarations]
      ConstDeclaration(
        ConstDeclarationList(
          Type(
           int
          ) [Type]
          ConstDeclarationsEnd(
            ConstNum(
             jedan
             1
            ) [ConstNum]
          ) [ConstDeclarationsEnd]
        ) [ConstDeclarationList]
      ) [ConstDeclaration]
    ) [Declarations]
    ConstDeclaration(
      ConstDeclarationList(
        Type(
         int
        ) [Type]
        ConstDeclarationsEnd(
          ConstNum(
           pet
           5
          ) [ConstNum]
        ) [ConstDeclarationsEnd]
      ) [ConstDeclarationList]
    ) [ConstDeclaration]
  ) [Declarations]
  MethodDeclarationList(
    NoMethodDeclaration(
    ) [NoMethodDeclaration]
    MethodDecl(
      MethodNameVoid(
       main
      ) [MethodNameVoid]
      NoMethodParameters(
      ) [NoMethodParameters]
      Declarations(
        NoDeclarations(
        ) [NoDeclarations]
        VarDeclaration(
          VarDeclarationList(
            Type(
             int
            ) [Type]
            VarDeclarations(
              VarIdent(
                VarName(
                 i
                ) [VarName]
              ) [VarIdent]
              VarDeclarations(
                VarIdent(
                  VarName(
                   y
                  ) [VarName]
                ) [VarIdent]
                VarDeclarationsEnd(
                  VarIdent(
                    VarName(
                     z
                    ) [VarName]
                  ) [VarIdent]
                ) [VarDeclarationsEnd]
              ) [VarDeclarations]
            ) [VarDeclarations]
          ) [VarDeclarationList]
        ) [VarDeclaration]
      ) [Declarations]
      Statements(
        StatementDesignator(
          DesignatorStatementMatched(
            DesignatorStatementAssignop(
              DesignatorIdent(
               i
              ) [DesignatorIdent]
              Assignop(
              ) [Assignop]
              ExprPositive(
                AddopEnd(
                  Term(
                    MulopEnd(
                      FactorNum(
                       1
                      ) [FactorNum]
                    ) [MulopEnd]
                  ) [Term]
                ) [AddopEnd]
              ) [ExprPositive]
            ) [DesignatorStatementAssignop]
          ) [DesignatorStatementMatched]
        ) [StatementDesignator]
        Statements(
          StatementDesignator(
            DesignatorStatementMatched(
              DesignatorStatementAssignop(
                DesignatorIdent(
                 y
                ) [DesignatorIdent]
                Assignop(
                ) [Assignop]
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         0
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [DesignatorStatementAssignop]
            ) [DesignatorStatementMatched]
          ) [StatementDesignator]
          Statements(
            StatementFor(
              ForSt(
              ) [ForSt]
              DesignatorStatementEnd(
              ) [DesignatorStatementEnd]
              DesignatorStatementEnd(
              ) [DesignatorStatementEnd]
              StatementStatementList(
                Statements(
                  StatementIf(
                    LParenIf(
                    ) [LParenIf]
                    OneCondTerm(
                      OneCondFact(
                        CondFactRelop(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorDesignator(
                                    DesignatorIdent(
                                     i
                                    ) [DesignatorIdent]
                                  ) [FactorDesignator]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                          Less(
                          ) [Less]
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorNum(
                                   3
                                  ) [FactorNum]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [CondFactRelop]
                      ) [OneCondFact]
                    ) [OneCondTerm]
                    RParenIf(
                    ) [RParenIf]
                    StatementStatementList(
                      Statements(
                        StatementPrint(
                          ExprPositive(
                            AddopEnd(
                              Term(
                                MulopEnd(
                                  FactorChar(
                                   u
                                  ) [FactorChar]
                                ) [MulopEnd]
                              ) [Term]
                            ) [AddopEnd]
                          ) [ExprPositive]
                        ) [StatementPrint]
                        Statements(
                          StatementIf(
                            LParenIf(
                            ) [LParenIf]
                            OneCondTerm(
                              OneCondFact(
                                CondFactRelop(
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorDesignator(
                                            DesignatorIdent(
                                             y
                                            ) [DesignatorIdent]
                                          ) [FactorDesignator]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                  EqualTo(
                                  ) [EqualTo]
                                  ExprPositive(
                                    AddopEnd(
                                      Term(
                                        MulopEnd(
                                          FactorNum(
                                           0
                                          ) [FactorNum]
                                        ) [MulopEnd]
                                      ) [Term]
                                    ) [AddopEnd]
                                  ) [ExprPositive]
                                ) [CondFactRelop]
                              ) [OneCondFact]
                            ) [OneCondTerm]
                            RParenIf(
                            ) [RParenIf]
                            StatementBreak(
                            ) [StatementBreak]
                          ) [StatementIf]
                          Statements(
                            StatementDesignator(
                              DesignatorStatementMatched(
                                DesignatorStatementIncrement(
                                  DesignatorIdent(
                                   i
                                  ) [DesignatorIdent]
                                ) [DesignatorStatementIncrement]
                              ) [DesignatorStatementMatched]
                            ) [StatementDesignator]
                            Statements(
                              StatementContinue(
                              ) [StatementContinue]
                              NoStatement(
                              ) [NoStatement]
                            ) [Statements]
                          ) [Statements]
                        ) [Statements]
                      ) [Statements]
                    ) [StatementStatementList]
                  ) [StatementIf]
                  NoStatement(
                  ) [NoStatement]
                ) [Statements]
              ) [StatementStatementList]
            ) [StatementFor]
            Statements(
              StatementPrint(
                ExprPositive(
                  AddopEnd(
                    Term(
                      MulopEnd(
                        FactorNum(
                         5
                        ) [FactorNum]
                      ) [MulopEnd]
                    ) [Term]
                  ) [AddopEnd]
                ) [ExprPositive]
              ) [StatementPrint]
              NoStatement(
              ) [NoStatement]
            ) [Statements]
          ) [Statements]
        ) [Statements]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  11:25:59,965 - ===================================
INFO  11:25:59,965 - Pocetak programa test301.
INFO  11:25:59,965 - Deklarisana je konstanta nula na liniji 5
INFO  11:25:59,966 - Deklarisana je konstanta jedan na liniji 6
INFO  11:25:59,966 - Deklarisana je konstanta pet na liniji 7
INFO  11:25:59,966 - Obradjuje se funkcija main na liniji 13
INFO  11:25:59,966 - Deklarisana je promenljiva i na liniji 14
INFO  11:25:59,966 - Deklarisana je promenljiva y na liniji 14
INFO  11:25:59,966 - Deklarisana je promenljiva z na liniji 14
INFO  11:25:59,966 - Designator i expr su odgovarajuceg tipa na liniji 16
INFO  11:25:59,967 - Designator i expr su odgovarajuceg tipa na liniji 17
INFO  11:25:59,967 - Obradjena funkcija PRINT na liniji 20
INFO  11:25:59,967 - Obradjena funkcija PRINT na liniji 26
INFO  11:25:59,967 - ===================================
INFO  11:25:59,974 - Parsiranje uspesno zavrseno!
